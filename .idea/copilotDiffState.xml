<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/about/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/about/page.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import { useState, useEffect } from 'react'&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'&#10;&#10;export default function AboutPage() {&#10;  const [content, setContent] = useState&lt;any&gt;(null)&#10;  const [loading, setLoading] = useState(true)&#10;&#10;  useEffect(() =&gt; {&#10;    fetchContent()&#10;  }, [])&#10;&#10;  const fetchContent = async () =&gt; {&#10;    try {&#10;      const response = await fetch('/api/footer')&#10;      if (response.ok) {&#10;        const data = await response.json()&#10;        const aboutContent = data.content.find((item: any) =&gt; item.slug === 'about')&#10;        setContent(aboutContent)&#10;      }&#10;    } catch (error) {&#10;      console.error('Error fetching content:', error)&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;container mx-auto px-4 py-12&quot;&gt;&#10;        &lt;Card className=&quot;max-w-4xl mx-auto&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;text-3xl font-bold text-center&quot;&gt;&#10;              {content?.title || 'Our Story'}&#10;            &lt;/CardTitle&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;prose max-w-none&quot;&gt;&#10;            &lt;div&#10;              dangerouslySetInnerHTML={{&#10;                __html: content?.content || `&#10;                  &lt;h2&gt;About Southern Fashion &amp; Décor&lt;/h2&gt;&#10;                  &lt;p&gt;Welcome to Southern Fashion &amp; Décor, your premier destination for exquisite fashion and home décor items in Bangladesh.&lt;/p&gt;&#10;                  &#10;                  &lt;h3&gt;Our Journey&lt;/h3&gt;&#10;                  &lt;p&gt;Founded with a passion for bringing beautiful, high-quality products to Bangladesh, Southern Fashion &amp; Décor has been serving customers since our inception. We believe that everyone deserves access to stylish, affordable fashion and home décor that reflects their personality and lifestyle.&lt;/p&gt;&#10;                  &#10;                  &lt;h3&gt;Our Mission&lt;/h3&gt;&#10;                  &lt;p&gt;To provide our customers with an exceptional shopping experience through:&lt;/p&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Carefully curated fashion and home décor collections&lt;/li&gt;&#10;                    &lt;li&gt;Competitive pricing and excellent value&lt;/li&gt;&#10;                    &lt;li&gt;Outstanding customer service&lt;/li&gt;&#10;                    &lt;li&gt;Fast and reliable delivery across Bangladesh&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;What We Offer&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;&lt;strong&gt;Fashion:&lt;/strong&gt; Men's, women's, and children's clothing and accessories&lt;/li&gt;&#10;                    &lt;li&gt;&lt;strong&gt;Home Décor:&lt;/strong&gt; Furniture, decorative items, and home accessories&lt;/li&gt;&#10;                    &lt;li&gt;&lt;strong&gt;Footwear:&lt;/strong&gt; Stylish and comfortable shoes for all occasions&lt;/li&gt;&#10;                    &lt;li&gt;&lt;strong&gt;Special Collections:&lt;/strong&gt; Seasonal and trending items&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;Our Commitment&lt;/h3&gt;&#10;                  &lt;p&gt;We are committed to sustainability, ethical business practices, and supporting local artisans and manufacturers. Every purchase you make helps support our mission to bring quality products while maintaining responsible business practices.&lt;/p&gt;&#10;                `&#10;              }}&#10;            /&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="'use client'&#10;&#10;import FooterPageTemplate from '@/components/FooterPageTemplate'&#10;&#10;export default function AboutPage() {&#10;  const fallbackContent = `&#10;    &lt;h2&gt;About Southern Fashion &amp; Décor&lt;/h2&gt;&#10;    &lt;p&gt;Welcome to Southern Fashion &amp; Décor, your premier destination for exquisite fashion and home décor items in Bangladesh.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Our Journey&lt;/h3&gt;&#10;    &lt;p&gt;Founded with a passion for bringing beautiful, high-quality products to Bangladesh, Southern Fashion &amp; Décor has been serving customers since our inception. We believe that everyone deserves access to stylish, affordable fashion and home décor that reflects their personality and lifestyle.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Our Mission&lt;/h3&gt;&#10;    &lt;p&gt;To provide our customers with an exceptional shopping experience through:&lt;/p&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Carefully curated fashion and home décor collections&lt;/li&gt;&#10;      &lt;li&gt;Competitive pricing and excellent value&lt;/li&gt;&#10;      &lt;li&gt;Outstanding customer service&lt;/li&gt;&#10;      &lt;li&gt;Fast and reliable delivery across Bangladesh&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;What We Offer&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;&lt;strong&gt;Fashion:&lt;/strong&gt; Men's, women's, and children's clothing and accessories&lt;/li&gt;&#10;      &lt;li&gt;&lt;strong&gt;Home Décor:&lt;/strong&gt; Furniture, decorative items, and home accessories&lt;/li&gt;&#10;      &lt;li&gt;&lt;strong&gt;Footwear:&lt;/strong&gt; Stylish and comfortable shoes for all occasions&lt;/li&gt;&#10;      &lt;li&gt;&lt;strong&gt;Special Collections:&lt;/strong&gt; Seasonal and trending items&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Our Commitment&lt;/h3&gt;&#10;    &lt;p&gt;We are committed to sustainability, ethical business practices, and supporting local artisans and manufacturers. Every purchase you make helps support our mission to bring quality products while maintaining responsible business practices.&lt;/p&gt;&#10;  `&#10;&#10;  return (&#10;    &lt;FooterPageTemplate &#10;      slug=&quot;about&quot;&#10;      fallbackTitle=&quot;Our Story&quot;&#10;      fallbackContent={fallbackContent}&#10;    /&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/admin/footer/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/admin/footer/page.tsx" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="'use client'&#10;&#10;import { useState, useEffect } from 'react'&#10;import { Button } from '@/components/ui/button'&#10;import { Input } from '@/components/ui/input'&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'&#10;import { Badge } from '@/components/ui/badge'&#10;import {&#10;  Table,&#10;  TableBody,&#10;  TableCell,&#10;  TableHead,&#10;  TableHeader,&#10;  TableRow&#10;} from '@/components/ui/table'&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogTrigger&#10;} from '@/components/ui/dialog'&#10;import {&#10;  Select,&#10;  SelectContent,&#10;  SelectItem,&#10;  SelectTrigger,&#10;  SelectValue,&#10;} from '@/components/ui/select'&#10;import { Label } from '@/components/ui/label'&#10;import { Textarea } from '@/components/ui/textarea'&#10;import { Switch } from '@/components/ui/switch'&#10;import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'&#10;import {&#10;  Plus,&#10;  Edit,&#10;  Trash2,&#10;  Upload,&#10;  X,&#10;  Globe,&#10;  FileText,&#10;  Share2,&#10;  CreditCard&#10;} from 'lucide-react'&#10;&#10;export default function AdminFooter() {&#10;  const [footerData, setFooterData] = useState&lt;any&gt;({ content: [], socialLinks: [], paymentMethods: [] })&#10;  const [loading, setLoading] = useState(true)&#10;  const [showContentModal, setShowContentModal] = useState(false)&#10;  const [showSocialModal, setShowSocialModal] = useState(false)&#10;  const [showPaymentModal, setShowPaymentModal] = useState(false)&#10;  const [editingItem, setEditingItem] = useState&lt;any&gt;(null)&#10;  const [activeTab, setActiveTab] = useState('content')&#10;&#10;  const [contentForm, setContentForm] = useState({&#10;    slug: '',&#10;    title: '',&#10;    content: '',&#10;    section: 'help',&#10;    isActive: true&#10;  })&#10;&#10;  const [socialForm, setSocialForm] = useState({&#10;    platform: '',&#10;    url: '',&#10;    icon: '',&#10;    isActive: true&#10;  })&#10;&#10;  const [paymentForm, setPaymentForm] = useState({&#10;    name: '',&#10;    image: '',&#10;    isActive: true&#10;  })&#10;&#10;  useEffect(() =&gt; {&#10;    fetchFooterData()&#10;  }, [])&#10;&#10;  const fetchFooterData = async () =&gt; {&#10;    try {&#10;      const token = localStorage.getItem('adminToken')&#10;      const response = await fetch('/api/admin/footer', {&#10;        headers: {&#10;          'Authorization': `Bearer ${token}`&#10;        }&#10;      })&#10;&#10;      if (response.ok) {&#10;        const data = await response.json()&#10;        setFooterData(data)&#10;      }&#10;    } catch (error) {&#10;      console.error('Error fetching footer data:', error)&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  const handleCreateContent = async () =&gt; {&#10;    try {&#10;      const token = localStorage.getItem('adminToken')&#10;      const response = await fetch('/api/admin/footer', {&#10;        method: 'POST',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;          'Authorization': `Bearer ${token}`&#10;        },&#10;        body: JSON.stringify({ type: 'content', data: contentForm })&#10;      })&#10;&#10;      if (response.ok) {&#10;        setShowContentModal(false)&#10;        resetContentForm()&#10;        fetchFooterData()&#10;      }&#10;    } catch (error) {&#10;      console.error('Error creating content:', error)&#10;    }&#10;  }&#10;&#10;  const handleUpdateContent = async () =&gt; {&#10;    try {&#10;      const token = localStorage.getItem('adminToken')&#10;      const response = await fetch(`/api/admin/footer/${editingItem.id}`, {&#10;        method: 'PUT',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;          'Authorization': `Bearer ${token}`&#10;        },&#10;        body: JSON.stringify({ type: 'content', data: contentForm })&#10;      })&#10;&#10;      if (response.ok) {&#10;        setShowContentModal(false)&#10;        setEditingItem(null)&#10;        resetContentForm()&#10;        fetchFooterData()&#10;      }&#10;    } catch (error) {&#10;      console.error('Error updating content:', error)&#10;    }&#10;  }&#10;&#10;  const handleDeleteItem = async (id: string, type: string) =&gt; {&#10;    if (confirm('Are you sure you want to delete this item?')) {&#10;      try {&#10;        const token = localStorage.getItem('adminToken')&#10;        const response = await fetch(`/api/admin/footer/${id}`, {&#10;          method: 'DELETE',&#10;          headers: {&#10;            'Content-Type': 'application/json',&#10;            'Authorization': `Bearer ${token}`&#10;          },&#10;          body: JSON.stringify({ type })&#10;        })&#10;&#10;        if (response.ok) {&#10;          fetchFooterData()&#10;        }&#10;      } catch (error) {&#10;        console.error('Error deleting item:', error)&#10;      }&#10;    }&#10;  }&#10;&#10;  const resetContentForm = () =&gt; {&#10;    setContentForm({&#10;      slug: '',&#10;      title: '',&#10;      content: '',&#10;      section: 'help',&#10;      isActive: true&#10;    })&#10;  }&#10;&#10;  const resetSocialForm = () =&gt; {&#10;    setSocialForm({&#10;      platform: '',&#10;      url: '',&#10;      icon: '',&#10;      isActive: true&#10;    })&#10;  }&#10;&#10;  const resetPaymentForm = () =&gt; {&#10;    setPaymentForm({&#10;      name: '',&#10;      image: '',&#10;      isActive: true&#10;    })&#10;  }&#10;&#10;  const openEditContentModal = (content: any) =&gt; {&#10;    setEditingItem(content)&#10;    setContentForm({&#10;      slug: content.slug,&#10;      title: content.title,&#10;      content: content.content,&#10;      section: content.section,&#10;      isActive: content.isActive&#10;    })&#10;    setShowContentModal(true)&#10;  }&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;p-6 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;p-6 space-y-6&quot;&gt;&#10;      &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold&quot;&gt;Footer Content Management&lt;/h1&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;Tabs value={activeTab} onValueChange={setActiveTab} className=&quot;w-full&quot;&gt;&#10;        &lt;TabsList className=&quot;grid w-full grid-cols-3&quot;&gt;&#10;          &lt;TabsTrigger value=&quot;content&quot; className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;FileText className=&quot;h-4 w-4&quot; /&gt;&#10;            Page Content&#10;          &lt;/TabsTrigger&gt;&#10;          &lt;TabsTrigger value=&quot;social&quot; className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;Share2 className=&quot;h-4 w-4&quot; /&gt;&#10;            Social Links&#10;          &lt;/TabsTrigger&gt;&#10;          &lt;TabsTrigger value=&quot;payment&quot; className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;CreditCard className=&quot;h-4 w-4&quot; /&gt;&#10;            Payment Methods&#10;          &lt;/TabsTrigger&gt;&#10;        &lt;/TabsList&gt;&#10;&#10;        {/* Footer Content Tab */}&#10;        &lt;TabsContent value=&quot;content&quot; className=&quot;space-y-6&quot;&gt;&#10;          &lt;Card&gt;&#10;            &lt;CardHeader className=&quot;flex flex-row items-center justify-between&quot;&gt;&#10;              &lt;CardTitle&gt;Footer Pages Content&lt;/CardTitle&gt;&#10;              &lt;Dialog open={showContentModal} onOpenChange={setShowContentModal}&gt;&#10;                &lt;DialogTrigger asChild&gt;&#10;                  &lt;Button onClick={resetContentForm}&gt;&#10;                    &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                    Add Page Content&#10;                  &lt;/Button&gt;&#10;                &lt;/DialogTrigger&gt;&#10;                &lt;DialogContent className=&quot;max-w-4xl max-h-[90vh] overflow-y-auto&quot;&gt;&#10;                  &lt;DialogHeader&gt;&#10;                    &lt;DialogTitle&gt;&#10;                      {editingItem ? 'Edit Page Content' : 'Add New Page Content'}&#10;                    &lt;/DialogTitle&gt;&#10;                  &lt;/DialogHeader&gt;&#10;&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                      &lt;div className=&quot;space-y-2&quot;&gt;&#10;                        &lt;Label htmlFor=&quot;slug&quot;&gt;Page Slug *&lt;/Label&gt;&#10;                        &lt;Input&#10;                          id=&quot;slug&quot;&#10;                          value={contentForm.slug}&#10;                          onChange={(e) =&gt; setContentForm(prev =&gt; ({...prev, slug: e.target.value}))}&#10;                          placeholder=&quot;e.g., contact, about, terms&quot;&#10;                          disabled={!!editingItem}&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;space-y-2&quot;&gt;&#10;                        &lt;Label htmlFor=&quot;section&quot;&gt;Section&lt;/Label&gt;&#10;                        &lt;Select&#10;                          value={contentForm.section}&#10;                          onValueChange={(value) =&gt; setContentForm(prev =&gt; ({...prev, section: value}))}&#10;                        &gt;&#10;                          &lt;SelectTrigger&gt;&#10;                            &lt;SelectValue /&gt;&#10;                          &lt;/SelectTrigger&gt;&#10;                          &lt;SelectContent&gt;&#10;                            &lt;SelectItem value=&quot;help&quot;&gt;Help&lt;/SelectItem&gt;&#10;                            &lt;SelectItem value=&quot;about&quot;&gt;About Us&lt;/SelectItem&gt;&#10;                            &lt;SelectItem value=&quot;social&quot;&gt;Social&lt;/SelectItem&gt;&#10;                            &lt;SelectItem value=&quot;other&quot;&gt;Other&lt;/SelectItem&gt;&#10;                          &lt;/SelectContent&gt;&#10;                        &lt;/Select&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                      &lt;Label htmlFor=&quot;title&quot;&gt;Page Title *&lt;/Label&gt;&#10;                      &lt;Input&#10;                        id=&quot;title&quot;&#10;                        value={contentForm.title}&#10;                        onChange={(e) =&gt; setContentForm(prev =&gt; ({...prev, title: e.target.value}))}&#10;                        placeholder=&quot;Enter page title&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                      &lt;Label htmlFor=&quot;content&quot;&gt;Content (HTML supported) *&lt;/Label&gt;&#10;                      &lt;Textarea&#10;                        id=&quot;content&quot;&#10;                        value={contentForm.content}&#10;                        onChange={(e) =&gt; setContentForm(prev =&gt; ({...prev, content: e.target.value}))}&#10;                        placeholder=&quot;Enter page content with HTML markup&quot;&#10;                        rows={15}&#10;                        className=&quot;font-mono&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                      &lt;Switch&#10;                        id=&quot;isActive&quot;&#10;                        checked={contentForm.isActive}&#10;                        onCheckedChange={(checked) =&gt; setContentForm(prev =&gt; ({...prev, isActive: checked}))}&#10;                      /&gt;&#10;                      &lt;Label htmlFor=&quot;isActive&quot;&gt;Active&lt;/Label&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;flex justify-end gap-2 pt-4&quot;&gt;&#10;                      &lt;Button&#10;                        variant=&quot;outline&quot;&#10;                        onClick={() =&gt; {&#10;                          setShowContentModal(false)&#10;                          setEditingItem(null)&#10;                          resetContentForm()&#10;                        }}&#10;                      &gt;&#10;                        Cancel&#10;                      &lt;/Button&gt;&#10;                      &lt;Button&#10;                        onClick={editingItem ? handleUpdateContent : handleCreateContent}&#10;                        disabled={!contentForm.slug || !contentForm.title || !contentForm.content}&#10;                      &gt;&#10;                        {editingItem ? 'Update Content' : 'Create Content'}&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/DialogContent&gt;&#10;              &lt;/Dialog&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent&gt;&#10;              &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;                &lt;Table&gt;&#10;                  &lt;TableHeader&gt;&#10;                    &lt;TableRow&gt;&#10;                      &lt;TableHead&gt;Page&lt;/TableHead&gt;&#10;                      &lt;TableHead&gt;Section&lt;/TableHead&gt;&#10;                      &lt;TableHead&gt;Status&lt;/TableHead&gt;&#10;                      &lt;TableHead&gt;Updated&lt;/TableHead&gt;&#10;                      &lt;TableHead&gt;Actions&lt;/TableHead&gt;&#10;                    &lt;/TableRow&gt;&#10;                  &lt;/TableHeader&gt;&#10;                  &lt;TableBody&gt;&#10;                    {footerData.content.map((content: any) =&gt; (&#10;                      &lt;TableRow key={content.id}&gt;&#10;                        &lt;TableCell&gt;&#10;                          &lt;div&gt;&#10;                            &lt;p className=&quot;font-medium&quot;&gt;{content.title}&lt;/p&gt;&#10;                            &lt;p className=&quot;text-sm text-gray-500&quot;&gt;/{content.slug}&lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/TableCell&gt;&#10;                        &lt;TableCell&gt;&#10;                          &lt;Badge variant=&quot;outline&quot;&gt;{content.section}&lt;/Badge&gt;&#10;                        &lt;/TableCell&gt;&#10;                        &lt;TableCell&gt;&#10;                          &lt;Badge variant={content.isActive ? &quot;default&quot; : &quot;secondary&quot;}&gt;&#10;                            {content.isActive ? 'Active' : 'Inactive'}&#10;                          &lt;/Badge&gt;&#10;                        &lt;/TableCell&gt;&#10;                        &lt;TableCell&gt;&#10;                          {new Date(content.updatedAt).toLocaleDateString()}&#10;                        &lt;/TableCell&gt;&#10;                        &lt;TableCell&gt;&#10;                          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                            &lt;Button size=&quot;sm&quot; variant=&quot;outline&quot; onClick={() =&gt; openEditContentModal(content)}&gt;&#10;                              &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                            &lt;/Button&gt;&#10;                            &lt;Button&#10;                              size=&quot;sm&quot;&#10;                              variant=&quot;outline&quot;&#10;                              onClick={() =&gt; handleDeleteItem(content.id, 'content')}&#10;                            &gt;&#10;                              &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                            &lt;/Button&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/TableCell&gt;&#10;                      &lt;/TableRow&gt;&#10;                    ))}&#10;                    {footerData.content.length === 0 &amp;&amp; (&#10;                      &lt;TableRow&gt;&#10;                        &lt;TableCell colSpan={5} className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;div className=&quot;flex flex-col items-center gap-2&quot;&gt;&#10;                            &lt;FileText className=&quot;h-12 w-12 text-gray-400&quot; /&gt;&#10;                            &lt;p className=&quot;text-gray-500&quot;&gt;No footer content found&lt;/p&gt;&#10;                            &lt;Button size=&quot;sm&quot; onClick={() =&gt; setShowContentModal(true)}&gt;&#10;                              Create your first page&#10;                            &lt;/Button&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/TableCell&gt;&#10;                      &lt;/TableRow&gt;&#10;                    )}&#10;                  &lt;/TableBody&gt;&#10;                &lt;/Table&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/Card&gt;&#10;        &lt;/TabsContent&gt;&#10;&#10;        {/* Social Links Tab */}&#10;        &lt;TabsContent value=&quot;social&quot; className=&quot;space-y-6&quot;&gt;&#10;          &lt;Card&gt;&#10;            &lt;CardHeader className=&quot;flex flex-row items-center justify-between&quot;&gt;&#10;              &lt;CardTitle&gt;Social Media Links&lt;/CardTitle&gt;&#10;              &lt;Dialog open={showSocialModal} onOpenChange={setShowSocialModal}&gt;&#10;                &lt;DialogTrigger asChild&gt;&#10;                  &lt;Button onClick={resetSocialForm}&gt;&#10;                    &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                    Add Social Link&#10;                  &lt;/Button&gt;&#10;                &lt;/DialogTrigger&gt;&#10;                &lt;DialogContent&gt;&#10;                  &lt;DialogHeader&gt;&#10;                    &lt;DialogTitle&gt;Add Social Media Link&lt;/DialogTitle&gt;&#10;                  &lt;/DialogHeader&gt;&#10;&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                      &lt;Label htmlFor=&quot;platform&quot;&gt;Platform *&lt;/Label&gt;&#10;                      &lt;Select&#10;                        value={socialForm.platform}&#10;                        onValueChange={(value) =&gt; setSocialForm(prev =&gt; ({...prev, platform: value}))}&#10;                      &gt;&#10;                        &lt;SelectTrigger&gt;&#10;                          &lt;SelectValue placeholder=&quot;Select platform&quot; /&gt;&#10;                        &lt;/SelectTrigger&gt;&#10;                        &lt;SelectContent&gt;&#10;                          &lt;SelectItem value=&quot;facebook&quot;&gt;Facebook&lt;/SelectItem&gt;&#10;                          &lt;SelectItem value=&quot;instagram&quot;&gt;Instagram&lt;/SelectItem&gt;&#10;                          &lt;SelectItem value=&quot;twitter&quot;&gt;Twitter&lt;/SelectItem&gt;&#10;                          &lt;SelectItem value=&quot;linkedin&quot;&gt;LinkedIn&lt;/SelectItem&gt;&#10;                          &lt;SelectItem value=&quot;youtube&quot;&gt;YouTube&lt;/SelectItem&gt;&#10;                          &lt;SelectItem value=&quot;tiktok&quot;&gt;TikTok&lt;/SelectItem&gt;&#10;                        &lt;/SelectContent&gt;&#10;                      &lt;/Select&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                      &lt;Label htmlFor=&quot;url&quot;&gt;URL *&lt;/Label&gt;&#10;                      &lt;Input&#10;                        id=&quot;url&quot;&#10;                        value={socialForm.url}&#10;                        onChange={(e) =&gt; setSocialForm(prev =&gt; ({...prev, url: e.target.value}))}&#10;                        placeholder=&quot;https://facebook.com/yourpage&quot;&#10;                        type=&quot;url&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                      &lt;Label htmlFor=&quot;icon&quot;&gt;Icon (emoji or text)&lt;/Label&gt;&#10;                      &lt;Input&#10;                        id=&quot;icon&quot;&#10;                        value={socialForm.icon}&#10;                        onChange={(e) =&gt; setSocialForm(prev =&gt; ({...prev, icon: e.target.value}))}&#10;                        placeholder=&quot;f (for Facebook), i (for Instagram), etc.&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                      &lt;Switch&#10;                        id=&quot;socialActive&quot;&#10;                        checked={socialForm.isActive}&#10;                        onCheckedChange={(checked) =&gt; setSocialForm(prev =&gt; ({...prev, isActive: checked}))}&#10;                      /&gt;&#10;                      &lt;Label htmlFor=&quot;socialActive&quot;&gt;Active&lt;/Label&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;flex justify-end gap-2 pt-4&quot;&gt;&#10;                      &lt;Button variant=&quot;outline&quot; onClick={() =&gt; setShowSocialModal(false)}&gt;&#10;                        Cancel&#10;                      &lt;/Button&gt;&#10;                      &lt;Button&#10;                        onClick={async () =&gt; {&#10;                          try {&#10;                            const token = localStorage.getItem('adminToken')&#10;                            const response = await fetch('/api/admin/footer', {&#10;                              method: 'POST',&#10;                              headers: {&#10;                                'Content-Type': 'application/json',&#10;                                'Authorization': `Bearer ${token}`&#10;                              },&#10;                              body: JSON.stringify({ type: 'social', data: socialForm })&#10;                            })&#10;                            if (response.ok) {&#10;                              setShowSocialModal(false)&#10;                              resetSocialForm()&#10;                              fetchFooterData()&#10;                            }&#10;                          } catch (error) {&#10;                            console.error('Error creating social link:', error)&#10;                          }&#10;                        }}&#10;                        disabled={!socialForm.platform || !socialForm.url}&#10;                      &gt;&#10;                        Add Social Link&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/DialogContent&gt;&#10;              &lt;/Dialog&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent&gt;&#10;              &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;                &lt;Table&gt;&#10;                  &lt;TableHeader&gt;&#10;                    &lt;TableRow&gt;&#10;                      &lt;TableHead&gt;Platform&lt;/TableHead&gt;&#10;                      &lt;TableHead&gt;URL&lt;/TableHead&gt;&#10;                      &lt;TableHead&gt;Icon&lt;/TableHead&gt;&#10;                      &lt;TableHead&gt;Status&lt;/TableHead&gt;&#10;                      &lt;TableHead&gt;Actions&lt;/TableHead&gt;&#10;                    &lt;/TableRow&gt;&#10;                  &lt;/TableHeader&gt;&#10;                  &lt;TableBody&gt;&#10;                    {footerData.socialLinks.map((link: any) =&gt; (&#10;                      &lt;TableRow key={link.id}&gt;&#10;                        &lt;TableCell className=&quot;font-medium capitalize&quot;&gt;{link.platform}&lt;/TableCell&gt;&#10;                        &lt;TableCell&gt;&#10;                          &lt;a href={link.url} target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; className=&quot;text-blue-600 hover:underline&quot;&gt;&#10;                            {link.url}&#10;                          &lt;/a&gt;&#10;                        &lt;/TableCell&gt;&#10;                        &lt;TableCell&gt;{link.icon || '-'}&lt;/TableCell&gt;&#10;                        &lt;TableCell&gt;&#10;                          &lt;Badge variant={link.isActive ? &quot;default&quot; : &quot;secondary&quot;}&gt;&#10;                            {link.isActive ? 'Active' : 'Inactive'}&#10;                          &lt;/Badge&gt;&#10;                        &lt;/TableCell&gt;&#10;                        &lt;TableCell&gt;&#10;                          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                            &lt;Button size=&quot;sm&quot; variant=&quot;outline&quot;&gt;&#10;                              &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                            &lt;/Button&gt;&#10;                            &lt;Button&#10;                              size=&quot;sm&quot;&#10;                              variant=&quot;outline&quot;&#10;                              onClick={() =&gt; handleDeleteItem(link.id, 'social')}&#10;                            &gt;&#10;                              &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                            &lt;/Button&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/TableCell&gt;&#10;                      &lt;/TableRow&gt;&#10;                    ))}&#10;                    {footerData.socialLinks.length === 0 &amp;&amp; (&#10;                      &lt;TableRow&gt;&#10;                        &lt;TableCell colSpan={5} className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;div className=&quot;flex flex-col items-center gap-2&quot;&gt;&#10;                            &lt;Share2 className=&quot;h-12 w-12 text-gray-400&quot; /&gt;&#10;                            &lt;p className=&quot;text-gray-500&quot;&gt;No social links found&lt;/p&gt;&#10;                            &lt;Button size=&quot;sm&quot; onClick={() =&gt; setShowSocialModal(true)}&gt;&#10;                              Add your first social link&#10;                            &lt;/Button&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/TableCell&gt;&#10;                      &lt;/TableRow&gt;&#10;                    )}&#10;                  &lt;/TableBody&gt;&#10;                &lt;/Table&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/Card&gt;&#10;        &lt;/TabsContent&gt;&#10;&#10;        {/* Payment Methods Tab */}&#10;        &lt;TabsContent value=&quot;payment&quot; className=&quot;space-y-6&quot;&gt;&#10;          &lt;Card&gt;&#10;            &lt;CardHeader className=&quot;flex flex-row items-center justify-between&quot;&gt;&#10;              &lt;CardTitle&gt;Payment Methods&lt;/CardTitle&gt;&#10;              &lt;Dialog open={showPaymentModal} onOpenChange={setShowPaymentModal}&gt;&#10;                &lt;DialogTrigger asChild&gt;&#10;                  &lt;Button onClick={resetPaymentForm}&gt;&#10;                    &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                    Add Payment Method&#10;                  &lt;/Button&gt;&#10;                &lt;/DialogTrigger&gt;&#10;                &lt;DialogContent&gt;&#10;                  &lt;DialogHeader&gt;&#10;                    &lt;DialogTitle&gt;Add Payment Method&lt;/DialogTitle&gt;&#10;                  &lt;/DialogHeader&gt;&#10;&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                      &lt;Label htmlFor=&quot;paymentName&quot;&gt;Name *&lt;/Label&gt;&#10;                      &lt;Input&#10;                        id=&quot;paymentName&quot;&#10;                        value={paymentForm.name}&#10;                        onChange={(e) =&gt; setPaymentForm(prev =&gt; ({...prev, name: e.target.value}))}&#10;                        placeholder=&quot;e.g., Visa, Mastercard, bKash&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                      &lt;Label&gt;Payment Method Image&lt;/Label&gt;&#10;                      &lt;div className=&quot;border-2 border-dashed border-gray-300 rounded-lg p-4&quot;&gt;&#10;                        &lt;input&#10;                          type=&quot;file&quot;&#10;                          accept=&quot;image/*&quot;&#10;                          onChange={async (e) =&gt; {&#10;                            const file = e.target.files?.[0]&#10;                            if (file) {&#10;                              try {&#10;                                const token = localStorage.getItem('adminToken')&#10;                                const formData = new FormData()&#10;                                formData.append('file', file)&#10;                                formData.append('folder', 'payment-methods')&#10;&#10;                                const response = await fetch('/api/admin/upload', {&#10;                                  method: 'POST',&#10;                                  headers: {&#10;                                    'Authorization': `Bearer ${token}`&#10;                                  },&#10;                                  body: formData&#10;                                })&#10;&#10;                                if (response.ok) {&#10;                                  const data = await response.json()&#10;                                  setPaymentForm(prev =&gt; ({ ...prev, image: data.url }))&#10;                                }&#10;                              } catch (error) {&#10;                                console.error('Error uploading image:', error)&#10;                              }&#10;                            }&#10;                          }}&#10;                          className=&quot;hidden&quot;&#10;                          id=&quot;payment-image-upload&quot;&#10;                        /&gt;&#10;                        &lt;label htmlFor=&quot;payment-image-upload&quot; className=&quot;cursor-pointer&quot;&gt;&#10;                          &lt;div className=&quot;text-center&quot;&gt;&#10;                            &lt;Upload className=&quot;h-8 w-8 mx-auto text-gray-400 mb-2&quot; /&gt;&#10;                            &lt;p className=&quot;text-gray-600&quot;&gt;Click to upload payment method logo&lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/label&gt;&#10;&#10;                        {paymentForm.image &amp;&amp; (&#10;                          &lt;div className=&quot;mt-4 relative inline-block&quot;&gt;&#10;                            &lt;img&#10;                              src={paymentForm.image}&#10;                              alt=&quot;Payment Method&quot;&#10;                              className=&quot;w-20 h-12 object-contain rounded border&quot;&#10;                            /&gt;&#10;                            &lt;button&#10;                              type=&quot;button&quot;&#10;                              onClick={() =&gt; setPaymentForm(prev =&gt; ({...prev, image: ''}))}&#10;                              className=&quot;absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1&quot;&#10;                            &gt;&#10;                              &lt;X className=&quot;h-3 w-3&quot; /&gt;&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                      &lt;Switch&#10;                        id=&quot;paymentActive&quot;&#10;                        checked={paymentForm.isActive}&#10;                        onCheckedChange={(checked) =&gt; setPaymentForm(prev =&gt; ({...prev, isActive: checked}))}&#10;                      /&gt;&#10;                      &lt;Label htmlFor=&quot;paymentActive&quot;&gt;Active&lt;/Label&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;flex justify-end gap-2 pt-4&quot;&gt;&#10;                      &lt;Button variant=&quot;outline&quot; onClick={() =&gt; setShowPaymentModal(false)}&gt;&#10;                        Cancel&#10;                      &lt;/Button&gt;&#10;                      &lt;Button&#10;                        onClick={async () =&gt; {&#10;                          try {&#10;                            const token = localStorage.getItem('adminToken')&#10;                            const response = await fetch('/api/admin/footer', {&#10;                              method: 'POST',&#10;                              headers: {&#10;                                'Content-Type': 'application/json',&#10;                                'Authorization': `Bearer ${token}`&#10;                              },&#10;                              body: JSON.stringify({ type: 'payment', data: paymentForm })&#10;                            })&#10;                            if (response.ok) {&#10;                              setShowPaymentModal(false)&#10;                              resetPaymentForm()&#10;                              fetchFooterData()&#10;                            }&#10;                          } catch (error) {&#10;                            console.error('Error creating payment method:', error)&#10;                          }&#10;                        }}&#10;                        disabled={!paymentForm.name}&#10;                      &gt;&#10;                        Add Payment Method&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/DialogContent&gt;&#10;              &lt;/Dialog&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent&gt;&#10;              &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;                &lt;Table&gt;&#10;                  &lt;TableHeader&gt;&#10;                    &lt;TableRow&gt;&#10;                      &lt;TableHead&gt;Payment Method&lt;/TableHead&gt;&#10;                      &lt;TableHead&gt;Logo&lt;/TableHead&gt;&#10;                      &lt;TableHead&gt;Status&lt;/TableHead&gt;&#10;                      &lt;TableHead&gt;Actions&lt;/TableHead&gt;&#10;                    &lt;/TableRow&gt;&#10;                  &lt;/TableHeader&gt;&#10;                  &lt;TableBody&gt;&#10;                    {footerData.paymentMethods.map((method: any) =&gt; (&#10;                      &lt;TableRow key={method.id}&gt;&#10;                        &lt;TableCell className=&quot;font-medium&quot;&gt;{method.name}&lt;/TableCell&gt;&#10;                        &lt;TableCell&gt;&#10;                          {method.image ? (&#10;                            &lt;img&#10;                              src={method.image}&#10;                              alt={method.name}&#10;                              className=&quot;w-12 h-8 object-contain&quot;&#10;                            /&gt;&#10;                          ) : (&#10;                            &lt;div className=&quot;w-12 h-8 bg-gray-100 rounded flex items-center justify-center text-xs&quot;&gt;&#10;                              {method.name.substring(0, 2).toUpperCase()}&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        &lt;/TableCell&gt;&#10;                        &lt;TableCell&gt;&#10;                          &lt;Badge variant={method.isActive ? &quot;default&quot; : &quot;secondary&quot;}&gt;&#10;                            {method.isActive ? 'Active' : 'Inactive'}&#10;                          &lt;/Badge&gt;&#10;                        &lt;/TableCell&gt;&#10;                        &lt;TableCell&gt;&#10;                          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                            &lt;Button size=&quot;sm&quot; variant=&quot;outline&quot;&gt;&#10;                              &lt;Edit className=&quot;h-4 w-4&quot; /&gt;&#10;                            &lt;/Button&gt;&#10;                            &lt;Button&#10;                              size=&quot;sm&quot;&#10;                              variant=&quot;outline&quot;&#10;                              onClick={() =&gt; handleDeleteItem(method.id, 'payment')}&#10;                            &gt;&#10;                              &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                            &lt;/Button&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/TableCell&gt;&#10;                      &lt;/TableRow&gt;&#10;                    ))}&#10;                    {footerData.paymentMethods.length === 0 &amp;&amp; (&#10;                      &lt;TableRow&gt;&#10;                        &lt;TableCell colSpan={4} className=&quot;text-center py-8&quot;&gt;&#10;                          &lt;div className=&quot;flex flex-col items-center gap-2&quot;&gt;&#10;                            &lt;CreditCard className=&quot;h-12 w-12 text-gray-400&quot; /&gt;&#10;                            &lt;p className=&quot;text-gray-500&quot;&gt;No payment methods found&lt;/p&gt;&#10;                            &lt;Button size=&quot;sm&quot; onClick={() =&gt; setShowPaymentModal(true)}&gt;&#10;                              Add your first payment method&#10;                            &lt;/Button&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/TableCell&gt;&#10;                      &lt;/TableRow&gt;&#10;                    )}&#10;                  &lt;/TableBody&gt;&#10;                &lt;/Table&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/Card&gt;&#10;        &lt;/TabsContent&gt;&#10;      &lt;/Tabs&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/admin/pages/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/admin/pages/page.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import { useState, useEffect } from 'react'&#10;import { Button } from '@/components/ui/button'&#10;import { Input } from '@/components/ui/input'&#10;import { Label } from '@/components/ui/label'&#10;import { Textarea } from '@/components/ui/textarea'&#10;import { Switch } from '@/components/ui/switch'&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'&#10;import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'&#10;import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'&#10;import { Edit, Trash2, Plus } from 'lucide-react'&#10;import { toast } from 'sonner'&#10;&#10;interface Page {&#10;  id: string&#10;  title: string&#10;  slug: string&#10;  content: string&#10;  metaTitle?: string&#10;  metaDescription?: string&#10;  isPublished: boolean&#10;  createdAt: string&#10;  updatedAt: string&#10;}&#10;&#10;export default function PagesManagement() {&#10;  const [pages, setPages] = useState&lt;Page[]&gt;([])&#10;  const [loading, setLoading] = useState(true)&#10;  const [editingPage, setEditingPage] = useState&lt;Page | null&gt;(null)&#10;  const [isDialogOpen, setIsDialogOpen] = useState(false)&#10;  const [formData, setFormData] = useState({&#10;    title: '',&#10;    slug: '',&#10;    content: '',&#10;    metaTitle: '',&#10;    metaDescription: '',&#10;    isPublished: true&#10;  })&#10;&#10;  useEffect(() =&gt; {&#10;    fetchPages()&#10;  }, [])&#10;&#10;  const fetchPages = async () =&gt; {&#10;    try {&#10;      const response = await fetch('/api/admin/pages')&#10;      if (response.ok) {&#10;        const data = await response.json()&#10;        setPages(data)&#10;      }&#10;    } catch (error) {&#10;      console.error('Error fetching pages:', error)&#10;      toast.error('Failed to fetch pages')&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault()&#10;    &#10;    try {&#10;      const url = editingPage ? `/api/pages/${editingPage.slug}` : '/api/pages'&#10;      const method = editingPage ? 'PUT' : 'POST'&#10;      &#10;      const response = await fetch(url, {&#10;        method,&#10;        headers: { 'Content-Type': 'application/json' },&#10;        body: JSON.stringify(formData)&#10;      })&#10;&#10;      if (response.ok) {&#10;        toast.success(editingPage ? 'Page updated successfully' : 'Page created successfully')&#10;        setIsDialogOpen(false)&#10;        resetForm()&#10;        fetchPages()&#10;      } else {&#10;        const error = await response.json()&#10;        toast.error(error.error || 'Failed to save page')&#10;      }&#10;    } catch (error) {&#10;      console.error('Error saving page:', error)&#10;      toast.error('Failed to save page')&#10;    }&#10;  }&#10;&#10;  const handleEdit = (page: Page) =&gt; {&#10;    setEditingPage(page)&#10;    setFormData({&#10;      title: page.title,&#10;      slug: page.slug,&#10;      content: page.content,&#10;      metaTitle: page.metaTitle || '',&#10;      metaDescription: page.metaDescription || '',&#10;      isPublished: page.isPublished&#10;    })&#10;    setIsDialogOpen(true)&#10;  }&#10;&#10;  const handleDelete = async (slug: string) =&gt; {&#10;    if (!confirm('Are you sure you want to delete this page?')) return&#10;&#10;    try {&#10;      const response = await fetch(`/api/pages/${slug}`, {&#10;        method: 'DELETE'&#10;      })&#10;&#10;      if (response.ok) {&#10;        toast.success('Page deleted successfully')&#10;        fetchPages()&#10;      } else {&#10;        toast.error('Failed to delete page')&#10;      }&#10;    } catch (error) {&#10;      console.error('Error deleting page:', error)&#10;      toast.error('Failed to delete page')&#10;    }&#10;  }&#10;&#10;  const resetForm = () =&gt; {&#10;    setFormData({&#10;      title: '',&#10;      slug: '',&#10;      content: '',&#10;      metaTitle: '',&#10;      metaDescription: '',&#10;      isPublished: true&#10;    })&#10;    setEditingPage(null)&#10;  }&#10;&#10;  const generateSlug = (title: string) =&gt; {&#10;    return title&#10;      .toLowerCase()&#10;      .replace(/[^a-z0-9 -]/g, '')&#10;      .replace(/\s+/g, '-')&#10;      .replace(/-+/g, '-')&#10;      .trim()&#10;  }&#10;&#10;  const handleTitleChange = (title: string) =&gt; {&#10;    setFormData(prev =&gt; ({&#10;      ...prev,&#10;      title,&#10;      slug: !editingPage ? generateSlug(title) : prev.slug&#10;    }))&#10;  }&#10;&#10;  if (loading) {&#10;    return &lt;div className=&quot;p-6&quot;&gt;Loading pages...&lt;/div&gt;&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;p-6&quot;&gt;&#10;      &lt;div className=&quot;flex justify-between items-center mb-6&quot;&gt;&#10;        &lt;h1 className=&quot;text-2xl font-bold&quot;&gt;Pages Management&lt;/h1&gt;&#10;        &lt;Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}&gt;&#10;          &lt;DialogTrigger asChild&gt;&#10;            &lt;Button onClick={resetForm}&gt;&#10;              &lt;Plus className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;              Add New Page&#10;            &lt;/Button&gt;&#10;          &lt;/DialogTrigger&gt;&#10;          &lt;DialogContent className=&quot;max-w-2xl max-h-[90vh] overflow-y-auto&quot;&gt;&#10;            &lt;DialogHeader&gt;&#10;              &lt;DialogTitle&gt;&#10;                {editingPage ? 'Edit Page' : 'Create New Page'}&#10;              &lt;/DialogTitle&gt;&#10;            &lt;/DialogHeader&gt;&#10;            &lt;form onSubmit={handleSubmit} className=&quot;space-y-4&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;title&quot;&gt;Title&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;title&quot;&#10;                  value={formData.title}&#10;                  onChange={(e) =&gt; handleTitleChange(e.target.value)}&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;slug&quot;&gt;Slug&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;slug&quot;&#10;                  value={formData.slug}&#10;                  onChange={(e) =&gt; setFormData(prev =&gt; ({ ...prev, slug: e.target.value }))}&#10;                  required&#10;                  disabled={!!editingPage}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;content&quot;&gt;Content (HTML)&lt;/Label&gt;&#10;                &lt;Textarea&#10;                  id=&quot;content&quot;&#10;                  value={formData.content}&#10;                  onChange={(e) =&gt; setFormData(prev =&gt; ({ ...prev, content: e.target.value }))}&#10;                  rows={10}&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;metaTitle&quot;&gt;Meta Title&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;metaTitle&quot;&#10;                  value={formData.metaTitle}&#10;                  onChange={(e) =&gt; setFormData(prev =&gt; ({ ...prev, metaTitle: e.target.value }))}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;Label htmlFor=&quot;metaDescription&quot;&gt;Meta Description&lt;/Label&gt;&#10;                &lt;Textarea&#10;                  id=&quot;metaDescription&quot;&#10;                  value={formData.metaDescription}&#10;                  onChange={(e) =&gt; setFormData(prev =&gt; ({ ...prev, metaDescription: e.target.value }))}&#10;                  rows={3}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                &lt;Switch&#10;                  id=&quot;isPublished&quot;&#10;                  checked={formData.isPublished}&#10;                  onCheckedChange={(checked) =&gt; setFormData(prev =&gt; ({ ...prev, isPublished: checked }))}&#10;                /&gt;&#10;                &lt;Label htmlFor=&quot;isPublished&quot;&gt;Published&lt;/Label&gt;&#10;              &lt;/div&gt;&#10;              &lt;Button type=&quot;submit&quot; className=&quot;w-full&quot;&gt;&#10;                {editingPage ? 'Update Page' : 'Create Page'}&#10;              &lt;/Button&gt;&#10;            &lt;/form&gt;&#10;          &lt;/DialogContent&gt;&#10;        &lt;/Dialog&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;All Pages&lt;/CardTitle&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent&gt;&#10;          &lt;Table&gt;&#10;            &lt;TableHeader&gt;&#10;              &lt;TableRow&gt;&#10;                &lt;TableHead&gt;Title&lt;/TableHead&gt;&#10;                &lt;TableHead&gt;Slug&lt;/TableHead&gt;&#10;                &lt;TableHead&gt;Status&lt;/TableHead&gt;&#10;                &lt;TableHead&gt;Updated&lt;/TableHead&gt;&#10;                &lt;TableHead&gt;Actions&lt;/TableHead&gt;&#10;              &lt;/TableRow&gt;&#10;            &lt;/TableHeader&gt;&#10;            &lt;TableBody&gt;&#10;              {pages.map((page) =&gt; (&#10;                &lt;TableRow key={page.id}&gt;&#10;                  &lt;TableCell className=&quot;font-medium&quot;&gt;{page.title}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;/{page.slug}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;&#10;                    &lt;span className={`px-2 py-1 rounded-full text-xs ${&#10;                      page.isPublished &#10;                        ? 'bg-green-100 text-green-800' &#10;                        : 'bg-gray-100 text-gray-800'&#10;                    }`}&gt;&#10;                      {page.isPublished ? 'Published' : 'Draft'}&#10;                    &lt;/span&gt;&#10;                  &lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;&#10;                    {new Date(page.updatedAt).toLocaleDateString()}&#10;                  &lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;&#10;                    &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;                      &lt;Button&#10;                        variant=&quot;outline&quot;&#10;                        size=&quot;sm&quot;&#10;                        onClick={() =&gt; handleEdit(page)}&#10;                      &gt;&#10;                        &lt;Edit className=&quot;w-4 h-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                      &lt;Button&#10;                        variant=&quot;outline&quot;&#10;                        size=&quot;sm&quot;&#10;                        onClick={() =&gt; handleDelete(page.slug)}&#10;                      &gt;&#10;                        &lt;Trash2 className=&quot;w-4 h-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/TableCell&gt;&#10;                &lt;/TableRow&gt;&#10;              ))}&#10;            &lt;/TableBody&gt;&#10;          &lt;/Table&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/admin/footer/[id]/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/admin/footer/[id]/route.ts" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server'&#10;import { prisma } from '@/lib/prisma'&#10;import { verifyToken, getTokenFromRequest } from '@/lib/auth'&#10;&#10;async function verifyAdmin(request: NextRequest) {&#10;  const token = getTokenFromRequest(request)&#10;  if (!token) {&#10;    return { error: 'No authentication token provided', status: 401 }&#10;  }&#10;&#10;  const decoded = verifyToken(token) as any&#10;  if (!decoded) {&#10;    return { error: 'Invalid or expired token', status: 401 }&#10;  }&#10;&#10;  const user = await prisma.user.findUnique({&#10;    where: { id: decoded.userId }&#10;  })&#10;&#10;  if (!user) {&#10;    return { error: 'User not found', status: 401 }&#10;  }&#10;&#10;  if (user.role !== 'ADMIN' &amp;&amp; user.role !== 'SUPER_ADMIN') {&#10;    return { error: 'Insufficient privileges - Admin access required', status: 403 }&#10;  }&#10;&#10;  return { user }&#10;}&#10;&#10;// PUT /api/admin/footer/[id] - Update footer content (ADMIN ONLY)&#10;export async function PUT(&#10;  request: NextRequest,&#10;  { params }: { params: { id: string } }&#10;) {&#10;  try {&#10;    const authResult = await verifyAdmin(request)&#10;    if (authResult.error) {&#10;      return NextResponse.json({ error: authResult.error }, { status: authResult.status })&#10;    }&#10;&#10;    const { type, data } = await request.json()&#10;&#10;    // Validate input&#10;    if (!type || !data) {&#10;      return NextResponse.json({ error: 'Missing required fields: type and data' }, { status: 400 })&#10;    }&#10;&#10;    if (!params.id) {&#10;      return NextResponse.json({ error: 'Missing item ID' }, { status: 400 })&#10;    }&#10;&#10;    let result&#10;    switch (type) {&#10;      case 'content':&#10;        // Validate required fields for content&#10;        if (!data.title || !data.content) {&#10;          return NextResponse.json({ error: 'Missing required fields: title, content' }, { status: 400 })&#10;        }&#10;        &#10;        result = await prisma.footerContent.update({&#10;          where: { id: params.id },&#10;          data: {&#10;            title: data.title,&#10;            content: data.content,&#10;            section: data.section,&#10;            isActive: data.isActive&#10;          }&#10;        })&#10;        break&#10;        &#10;      case 'social':&#10;        // Validate required fields for social links&#10;        if (!data.platform || !data.url) {&#10;          return NextResponse.json({ error: 'Missing required fields: platform, url' }, { status: 400 })&#10;        }&#10;        &#10;        result = await prisma.socialLink.update({&#10;          where: { id: params.id },&#10;          data: {&#10;            platform: data.platform,&#10;            url: data.url,&#10;            icon: data.icon,&#10;            isActive: data.isActive&#10;          }&#10;        })&#10;        break&#10;        &#10;      case 'payment':&#10;        // Validate required fields for payment methods&#10;        if (!data.name) {&#10;          return NextResponse.json({ error: 'Missing required field: name' }, { status: 400 })&#10;        }&#10;        &#10;        result = await prisma.paymentMethod.update({&#10;          where: { id: params.id },&#10;          data: {&#10;            name: data.name,&#10;            image: data.image,&#10;            isActive: data.isActive&#10;          }&#10;        })&#10;        break&#10;        &#10;      default:&#10;        return NextResponse.json({ error: 'Invalid type. Must be: content, social, or payment' }, { status: 400 })&#10;    }&#10;&#10;    return NextResponse.json(result)&#10;  } catch (error) {&#10;    console.error('Error updating footer content:', error)&#10;    if (error.code === 'P2025') {&#10;      return NextResponse.json({ error: 'Item not found' }, { status: 404 })&#10;    }&#10;    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })&#10;  }&#10;}&#10;&#10;// DELETE /api/admin/footer/[id] - Delete footer content (ADMIN ONLY)&#10;export async function DELETE(&#10;  request: NextRequest,&#10;  { params }: { params: { id: string } }&#10;) {&#10;  try {&#10;    const authResult = await verifyAdmin(request)&#10;    if (authResult.error) {&#10;      return NextResponse.json({ error: authResult.error }, { status: authResult.status })&#10;    }&#10;&#10;    const { type } = await request.json()&#10;&#10;    // Validate input&#10;    if (!type) {&#10;      return NextResponse.json({ error: 'Missing required field: type' }, { status: 400 })&#10;    }&#10;&#10;    if (!params.id) {&#10;      return NextResponse.json({ error: 'Missing item ID' }, { status: 400 })&#10;    }&#10;&#10;    switch (type) {&#10;      case 'content':&#10;        await prisma.footerContent.delete({&#10;          where: { id: params.id }&#10;        })&#10;        break&#10;        &#10;      case 'social':&#10;        await prisma.socialLink.delete({&#10;          where: { id: params.id }&#10;        })&#10;        break&#10;        &#10;      case 'payment':&#10;        await prisma.paymentMethod.delete({&#10;          where: { id: params.id }&#10;        })&#10;        break&#10;        &#10;      default:&#10;        return NextResponse.json({ error: 'Invalid type. Must be: content, social, or payment' }, { status: 400 })&#10;    }&#10;&#10;    return NextResponse.json({ success: true })&#10;  } catch (error) {&#10;    console.error('Error deleting footer content:', error)&#10;    if (error.code === 'P2025') {&#10;      return NextResponse.json({ error: 'Item not found' }, { status: 404 })&#10;    }&#10;    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/admin/footer/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/admin/footer/route.ts" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server'&#10;import { prisma } from '@/lib/prisma'&#10;import { verifyToken, getTokenFromRequest } from '@/lib/auth'&#10;&#10;async function verifyAdmin(request: NextRequest) {&#10;  const token = getTokenFromRequest(request)&#10;  if (!token) {&#10;    return { error: 'No authentication token provided', status: 401 }&#10;  }&#10;&#10;  const decoded = verifyToken(token) as any&#10;  if (!decoded) {&#10;    return { error: 'Invalid or expired token', status: 401 }&#10;  }&#10;&#10;  const user = await prisma.user.findUnique({&#10;    where: { id: decoded.userId }&#10;  })&#10;&#10;  if (!user) {&#10;    return { error: 'User not found', status: 401 }&#10;  }&#10;&#10;  if (user.role !== 'ADMIN' &amp;&amp; user.role !== 'SUPER_ADMIN') {&#10;    return { error: 'Insufficient privileges - Admin access required', status: 403 }&#10;  }&#10;&#10;  return { user }&#10;}&#10;&#10;// GET /api/admin/footer - Get all footer content (ADMIN ONLY)&#10;export async function GET(request: NextRequest) {&#10;  try {&#10;    const authResult = await verifyAdmin(request)&#10;    if (authResult.error) {&#10;      return NextResponse.json({ error: authResult.error }, { status: authResult.status })&#10;    }&#10;&#10;    const [footerContent, socialLinks, paymentMethods] = await Promise.all([&#10;      prisma.footerContent.findMany({&#10;        orderBy: { section: 'asc' }&#10;      }),&#10;      prisma.socialLink.findMany(),&#10;      prisma.paymentMethod.findMany()&#10;    ])&#10;&#10;    return NextResponse.json({&#10;      content: footerContent,&#10;      socialLinks,&#10;      paymentMethods&#10;    })&#10;  } catch (error) {&#10;    console.error('Error fetching footer data:', error)&#10;    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })&#10;  }&#10;}&#10;&#10;// POST /api/admin/footer - Create footer content (ADMIN ONLY)&#10;export async function POST(request: NextRequest) {&#10;  try {&#10;    const authResult = await verifyAdmin(request)&#10;    if (authResult.error) {&#10;      return NextResponse.json({ error: authResult.error }, { status: authResult.status })&#10;    }&#10;&#10;    const { type, data } = await request.json()&#10;&#10;    // Validate input&#10;    if (!type || !data) {&#10;      return NextResponse.json({ error: 'Missing required fields: type and data' }, { status: 400 })&#10;    }&#10;&#10;    let result&#10;    switch (type) {&#10;      case 'content':&#10;        // Validate required fields for content&#10;        if (!data.slug || !data.title || !data.content) {&#10;          return NextResponse.json({ error: 'Missing required fields: slug, title, content' }, { status: 400 })&#10;        }&#10;        &#10;        // Check for duplicate slug&#10;        const existingContent = await prisma.footerContent.findUnique({&#10;          where: { slug: data.slug }&#10;        })&#10;        if (existingContent) {&#10;          return NextResponse.json({ error: 'Content with this slug already exists' }, { status: 409 })&#10;        }&#10;        &#10;        result = await prisma.footerContent.create({&#10;          data: {&#10;            slug: data.slug,&#10;            title: data.title,&#10;            content: data.content,&#10;            section: data.section || 'other',&#10;            isActive: data.isActive ?? true&#10;          }&#10;        })&#10;        break&#10;        &#10;      case 'social':&#10;        // Validate required fields for social links&#10;        if (!data.platform || !data.url) {&#10;          return NextResponse.json({ error: 'Missing required fields: platform, url' }, { status: 400 })&#10;        }&#10;        &#10;        result = await prisma.socialLink.create({&#10;          data: {&#10;            platform: data.platform,&#10;            url: data.url,&#10;            icon: data.icon,&#10;            isActive: data.isActive ?? true&#10;          }&#10;        })&#10;        break&#10;        &#10;      case 'payment':&#10;        // Validate required fields for payment methods&#10;        if (!data.name) {&#10;          return NextResponse.json({ error: 'Missing required field: name' }, { status: 400 })&#10;        }&#10;        &#10;        result = await prisma.paymentMethod.create({&#10;          data: {&#10;            name: data.name,&#10;            image: data.image,&#10;            isActive: data.isActive ?? true&#10;          }&#10;        })&#10;        break&#10;        &#10;      default:&#10;        return NextResponse.json({ error: 'Invalid type. Must be: content, social, or payment' }, { status: 400 })&#10;    }&#10;&#10;    return NextResponse.json(result, { status: 201 })&#10;  } catch (error) {&#10;    console.error('Error creating footer content:', error)&#10;    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/admin/pages/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/admin/pages/route.ts" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server'&#10;import { prisma } from '@/lib/prisma'&#10;&#10;export async function GET() {&#10;  try {&#10;    const pages = await prisma.page.findMany({&#10;      orderBy: { title: 'asc' }&#10;    })&#10;    return NextResponse.json(pages)&#10;  } catch (error) {&#10;    console.error('Error fetching admin pages:', error)&#10;    return NextResponse.json({ error: 'Failed to fetch pages' }, { status: 500 })&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/footer/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/footer/route.ts" />
              <option name="originalContent" value="import { NextRequest, NextResponse } from 'next/server'&#10;import { prisma } from '@/lib/prisma'&#10;&#10;// GET /api/footer - Get all footer content&#10;export async function GET() {&#10;  try {&#10;    const [footerContent, socialLinks, paymentMethods] = await Promise.all([&#10;      prisma.footerContent.findMany({&#10;        where: { isActive: true },&#10;        orderBy: { section: 'asc' }&#10;      }),&#10;      prisma.socialLink.findMany({&#10;        where: { isActive: true }&#10;      }),&#10;      prisma.paymentMethod.findMany({&#10;        where: { isActive: true }&#10;      })&#10;    ])&#10;&#10;    return NextResponse.json({&#10;      content: footerContent,&#10;      socialLinks,&#10;      paymentMethods&#10;    })&#10;  } catch (error) {&#10;    console.error('Error fetching footer content:', error)&#10;    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server'&#10;import { prisma } from '@/lib/prisma'&#10;&#10;// GET /api/footer - Public API for frontend (READ-ONLY)&#10;export async function GET(request: NextRequest) {&#10;  try {&#10;    const [footerContent, socialLinks, paymentMethods] = await Promise.all([&#10;      prisma.footerContent.findMany({&#10;        where: { isActive: true },&#10;        select: {&#10;          id: true,&#10;          slug: true,&#10;          title: true,&#10;          content: true,&#10;          section: true,&#10;          isActive: true&#10;        },&#10;        orderBy: { section: 'asc' }&#10;      }),&#10;      prisma.socialLink.findMany({&#10;        where: { isActive: true },&#10;        select: {&#10;          id: true,&#10;          platform: true,&#10;          url: true,&#10;          icon: true,&#10;          isActive: true&#10;        }&#10;      }),&#10;      prisma.paymentMethod.findMany({&#10;        where: { isActive: true },&#10;        select: {&#10;          id: true,&#10;          name: true,&#10;          image: true,&#10;          isActive: true&#10;        }&#10;      })&#10;    ])&#10;&#10;    return NextResponse.json({&#10;      content: footerContent,&#10;      socialLinks,&#10;      paymentMethods&#10;    })&#10;  } catch (error) {&#10;    console.error('Error fetching footer content:', error)&#10;    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })&#10;  }&#10;}&#10;&#10;// Block all modification attempts on public API&#10;export async function POST() {&#10;  return NextResponse.json({ error: 'Unauthorized - Content can only be managed through admin panel' }, { status: 403 })&#10;}&#10;&#10;export async function PUT() {&#10;  return NextResponse.json({ error: 'Unauthorized - Content can only be managed through admin panel' }, { status: 403 })&#10;}&#10;&#10;export async function DELETE() {&#10;  return NextResponse.json({ error: 'Unauthorized - Content can only be managed through admin panel' }, { status: 403 })&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/pages/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/pages/route.ts" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server'&#10;import { prisma } from '@/lib/prisma'&#10;&#10;export async function GET() {&#10;  try {&#10;    const pages = await prisma.page.findMany({&#10;      where: { isPublished: true },&#10;      orderBy: { title: 'asc' }&#10;    })&#10;    return NextResponse.json(pages)&#10;  } catch (error) {&#10;    console.error('Error fetching pages:', error)&#10;    return NextResponse.json({ error: 'Failed to fetch pages' }, { status: 500 })&#10;  }&#10;}&#10;&#10;export async function POST(request: NextRequest) {&#10;  try {&#10;    const data = await request.json()&#10;    const { title, slug, content, metaTitle, metaDescription, isPublished } = data&#10;&#10;    // Check if slug already exists&#10;    const existingPage = await prisma.page.findUnique({&#10;      where: { slug }&#10;    })&#10;&#10;    if (existingPage) {&#10;      return NextResponse.json({ error: 'Page with this slug already exists' }, { status: 400 })&#10;    }&#10;&#10;    const page = await prisma.page.create({&#10;      data: {&#10;        title,&#10;        slug,&#10;        content,&#10;        metaTitle,&#10;        metaDescription,&#10;        isPublished: isPublished ?? true&#10;      }&#10;    })&#10;&#10;    return NextResponse.json(page, { status: 201 })&#10;  } catch (error) {&#10;    console.error('Error creating page:', error)&#10;    return NextResponse.json({ error: 'Failed to create page' }, { status: 500 })&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/checkout/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/checkout/page.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import { useState, useEffect, useRef } from 'react'&#10;import { useRouter } from 'next/navigation'&#10;import { Button } from '@/components/ui/button'&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'&#10;import { Input } from '@/components/ui/input'&#10;import { Label } from '@/components/ui/label'&#10;import { Textarea } from '@/components/ui/textarea'&#10;import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'&#10;import { Checkbox } from '@/components/ui/checkbox'&#10;import { useStore } from '@/lib/store'&#10;import { ShoppingBag, CreditCard, Truck, MapPin, User } from 'lucide-react'&#10;import { toast } from '@/hooks/use-toast'&#10;import Image from 'next/image'&#10;&#10;interface CheckoutForm {&#10;  firstName: string&#10;  lastName: string&#10;  email: string&#10;  phone: string&#10;  billingAddress: string&#10;  billingCity: string&#10;  billingPostalCode: string&#10;  billingCountry: string&#10;  shippingAddress: string&#10;  shippingCity: string&#10;  shippingPostalCode: string&#10;  shippingCountry: string&#10;  sameAsBilling: boolean&#10;  paymentMethod: string&#10;  deliveryMethod: string&#10;  notes: string&#10;}&#10;&#10;export default function CheckoutPage() {&#10;  const router = useRouter()&#10;  const { cart, getCartTotal, getCartItemCount, clearCart, user } = useStore()&#10;  const [loading, setLoading] = useState(false)&#10;  const [formData, setFormData] = useState&lt;CheckoutForm&gt;({&#10;    firstName: '',&#10;    lastName: '',&#10;    email: user?.email || '',&#10;    phone: '',&#10;    billingAddress: '',&#10;    billingCity: '',&#10;    billingPostalCode: '',&#10;    billingCountry: 'Bangladesh',&#10;    shippingAddress: '',&#10;    shippingCity: '',&#10;    shippingPostalCode: '',&#10;    shippingCountry: 'Bangladesh',&#10;    sameAsBilling: true,&#10;    paymentMethod: 'cod',&#10;    deliveryMethod: 'standard',&#10;    notes: ''&#10;  })&#10;&#10;  // modal/confirm states&#10;  const [showConfirm, setShowConfirm] = useState(false)&#10;  const [showOrderSuccessModal, setShowOrderSuccessModal] = useState(false)&#10;  const successOkRef = useRef&lt;HTMLButtonElement | null&gt;(null)&#10;&#10;  const shippingCost = formData.deliveryMethod === 'express' ? 200 : (getCartTotal() &gt; 2000 ? 0 : 100)&#10;  const subtotal = getCartTotal()&#10;  const total = subtotal + shippingCost&#10;&#10;  useEffect(() =&gt; {&#10;    if (cart.length === 0) {&#10;      router.push('/')&#10;    }&#10;  }, [cart, router])&#10;&#10;  const handleInputChange = (field: keyof CheckoutForm, value: string | boolean) =&gt; {&#10;    setFormData(prev =&gt; ({&#10;      ...prev,&#10;      [field]: value,&#10;      ...(field === 'sameAsBilling' &amp;&amp; value === true ? {&#10;        shippingAddress: prev.billingAddress,&#10;        shippingCity: prev.billingCity,&#10;        shippingPostalCode: prev.billingPostalCode,&#10;        shippingCountry: prev.billingCountry&#10;      } : {})&#10;    }))&#10;  }&#10;&#10;  const validateForm = () =&gt; {&#10;    const required: (keyof CheckoutForm)[] = [&#10;      'firstName', 'lastName', 'email', 'phone',&#10;      'billingAddress', 'billingCity', 'billingPostalCode'&#10;    ]&#10;    if (!formData.sameAsBilling) {&#10;      required.push('shippingAddress', 'shippingCity', 'shippingPostalCode')&#10;    }&#10;    for (const field of required) {&#10;      if (!String(formData[field] ?? '').trim()) {&#10;        toast({&#10;          title: &quot;Missing Information&quot;,&#10;          description: `Please fill in ${String(field).replace(/([A-Z])/g, ' $1').toLowerCase()}`,&#10;          variant: &quot;destructive&quot;&#10;        })&#10;        return false&#10;      }&#10;    }&#10;    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/&#10;    if (!emailRegex.test(formData.email)) {&#10;      toast({ title: &quot;Invalid Email&quot;, description: &quot;Please enter a valid email address&quot;, variant: &quot;destructive&quot; })&#10;      return false&#10;    }&#10;    const phoneRegex = /^(\+880|880|0)?[1-9]\d{8,10}$/&#10;    const cleanPhone = formData.phone.replace(/[\s\-\(\)]/g, '')&#10;    if (!phoneRegex.test(cleanPhone)) {&#10;      toast({&#10;        title: &quot;Invalid Phone&quot;,&#10;        description: &quot;Please enter a valid phone number (e.g., 01712345678 or +8801712345678)&quot;,&#10;        variant: &quot;destructive&quot;&#10;      })&#10;      return false&#10;    }&#10;    return true&#10;  }&#10;&#10;  // Show confirmation popup before actual submission&#10;  const handlePlaceOrderClick = (e: React.FormEvent) =&gt; {&#10;    e.preventDefault()&#10;    if (!validateForm()) return&#10;    setShowConfirm(true)&#10;  }&#10;&#10;  // Proceed with order after confirmation&#10;  const handleConfirmOrder = async () =&gt; {&#10;    setLoading(true)&#10;    try {&#10;      const orderData = {&#10;        customerName: `${formData.firstName} ${formData.lastName}`,&#10;        customerEmail: formData.email,&#10;        customerPhone: formData.phone,&#10;        items: cart.map(item =&gt; ({&#10;          productId: item.product.id,&#10;          productName: item.product.name,&#10;          price: item.product.price,&#10;          quantity: item.quantity&#10;        })),&#10;        subtotal,&#10;        shippingAmount: shippingCost,&#10;        totalAmount: total,&#10;        billingAddress: {&#10;          address: formData.billingAddress,&#10;          city: formData.billingCity,&#10;          postalCode: formData.billingPostalCode,&#10;          country: formData.billingCountry&#10;        },&#10;        shippingAddress: formData.sameAsBilling ? {&#10;          address: formData.billingAddress,&#10;          city: formData.billingCity,&#10;          postalCode: formData.billingPostalCode,&#10;          country: formData.billingCountry&#10;        } : {&#10;          address: formData.shippingAddress,&#10;          city: formData.shippingCity,&#10;          postalCode: formData.shippingPostalCode,&#10;          country: formData.shippingCountry&#10;        },&#10;        paymentMethod: formData.paymentMethod,&#10;        deliveryMethod: formData.deliveryMethod,&#10;        notes: formData.notes&#10;      }&#10;&#10;      const response = await fetch('/api/orders', {&#10;        method: 'POST',&#10;        headers: { 'Content-Type': 'application/json' },&#10;        body: JSON.stringify(orderData),&#10;      })&#10;&#10;      if (response.ok) {&#10;        clearCart()&#10;        setShowConfirm(false)&#10;        setShowOrderSuccessModal(true)&#10;        // focus the OK for accessibility&#10;        setTimeout(() =&gt; successOkRef.current?.focus(), 0)&#10;        // lock body scroll while modal open&#10;        document.body.style.overflow = 'hidden'&#10;      } else {&#10;        const errorText = await response.text()&#10;        let errorMessage = &quot;Failed to place order. Please try again.&quot;&#10;        try {&#10;          const error = JSON.parse(errorText)&#10;          errorMessage = error.error || error.message || errorMessage&#10;        } catch {}&#10;        toast({ title: &quot;Order Failed&quot;, description: errorMessage, variant: &quot;destructive&quot; })&#10;      }&#10;    } catch (error) {&#10;      toast({ title: &quot;Error&quot;, description: &quot;Something went wrong. Please try again.&quot;, variant: &quot;destructive&quot; })&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  // Close success modal&#10;  const closeSuccessModal = () =&gt; {&#10;    setShowOrderSuccessModal(false)&#10;    document.body.style.overflow = '' // restore scroll&#10;  }&#10;&#10;  // Handle OK on success message&#10;  const handleSuccessOk = () =&gt; {&#10;    closeSuccessModal()&#10;    router.push('/')&#10;  }&#10;&#10;  // Close modals with ESC&#10;  useEffect(() =&gt; {&#10;    const onKey = (e: KeyboardEvent) =&gt; {&#10;      if (e.key === 'Escape') {&#10;        if (showConfirm) setShowConfirm(false)&#10;        if (showOrderSuccessModal) closeSuccessModal()&#10;      }&#10;    }&#10;    document.addEventListener('keydown', onKey)&#10;    return () =&gt; document.removeEventListener('keydown', onKey)&#10;  }, [showConfirm, showOrderSuccessModal])&#10;&#10;  if (cart.length === 0) return null&#10;&#10;  return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 py-8&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4&quot;&gt;&#10;          &lt;div className=&quot;max-w-6xl mx-auto&quot;&gt;&#10;            &lt;h1 className=&quot;text-3xl font-bold text-gray-900 mb-8 flex items-center gap-3&quot;&gt;&#10;              &lt;ShoppingBag className=&quot;h-8 w-8 text-[#6EC1D1]&quot; /&gt;&#10;              Checkout&#10;            &lt;/h1&gt;&#10;&#10;            &lt;form onSubmit={handlePlaceOrderClick}&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#10;                {/* Left Column - Forms */}&#10;                &lt;div className=&quot;lg:col-span-2 space-y-6&quot;&gt;&#10;                  {/* Customer Information */}&#10;                  &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;User className=&quot;h-5 w-5&quot; /&gt;&#10;                        Customer Information&#10;                      &lt;/CardTitle&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;div&gt;&#10;                          &lt;Label htmlFor=&quot;firstName&quot;&gt;First Name *&lt;/Label&gt;&#10;                          &lt;Input&#10;                              id=&quot;firstName&quot;&#10;                              value={formData.firstName}&#10;                              onChange={(e) =&gt; handleInputChange('firstName', e.target.value)}&#10;                              placeholder=&quot;Enter first name&quot;&#10;                              required&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;Label htmlFor=&quot;lastName&quot;&gt;Last Name *&lt;/Label&gt;&#10;                          &lt;Input&#10;                              id=&quot;lastName&quot;&#10;                              value={formData.lastName}&#10;                              onChange={(e) =&gt; handleInputChange('lastName', e.target.value)}&#10;                              placeholder=&quot;Enter last name&quot;&#10;                              required&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;div&gt;&#10;                          &lt;Label htmlFor=&quot;email&quot;&gt;Email Address *&lt;/Label&gt;&#10;                          &lt;Input&#10;                              id=&quot;email&quot;&#10;                              type=&quot;email&quot;&#10;                              value={formData.email}&#10;                              onChange={(e) =&gt; handleInputChange('email', e.target.value)}&#10;                              placeholder=&quot;Enter email address&quot;&#10;                              required&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;Label htmlFor=&quot;phone&quot;&gt;Phone Number *&lt;/Label&gt;&#10;                          &lt;Input&#10;                              id=&quot;phone&quot;&#10;                              value={formData.phone}&#10;                              onChange={(e) =&gt; handleInputChange('phone', e.target.value)}&#10;                              placeholder=&quot;+880 1X XX XX XX XX&quot;&#10;                              required&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;&#10;                  {/* Billing Address */}&#10;                  &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;MapPin className=&quot;h-5 w-5&quot; /&gt;&#10;                        Billing Address&#10;                      &lt;/CardTitle&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;Label htmlFor=&quot;billingAddress&quot;&gt;Street Address *&lt;/Label&gt;&#10;                        &lt;Input&#10;                            id=&quot;billingAddress&quot;&#10;                            value={formData.billingAddress}&#10;                            onChange={(e) =&gt; handleInputChange('billingAddress', e.target.value)}&#10;                            placeholder=&quot;Enter your street address&quot;&#10;                            required&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;                        &lt;div&gt;&#10;                          &lt;Label htmlFor=&quot;billingCity&quot;&gt;City *&lt;/Label&gt;&#10;                          &lt;Input&#10;                              id=&quot;billingCity&quot;&#10;                              value={formData.billingCity}&#10;                              onChange={(e) =&gt; handleInputChange('billingCity', e.target.value)}&#10;                              placeholder=&quot;City&quot;&#10;                              required&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;Label htmlFor=&quot;billingPostalCode&quot;&gt;Postal Code *&lt;/Label&gt;&#10;                          &lt;Input&#10;                              id=&quot;billingPostalCode&quot;&#10;                              value={formData.billingPostalCode}&#10;                              onChange={(e) =&gt; handleInputChange('billingPostalCode', e.target.value)}&#10;                              placeholder=&quot;Postal Code&quot;&#10;                              required&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;Label htmlFor=&quot;billingCountry&quot;&gt;Country&lt;/Label&gt;&#10;                          &lt;Input&#10;                              id=&quot;billingCountry&quot;&#10;                              value={formData.billingCountry}&#10;                              onChange={(e) =&gt; handleInputChange('billingCountry', e.target.value)}&#10;                              disabled&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;&#10;                  {/* Shipping Address */}&#10;                  &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;Truck className=&quot;h-5 w-5&quot; /&gt;&#10;                        Shipping Address&#10;                      &lt;/CardTitle&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;Checkbox&#10;                            id=&quot;sameAsBilling&quot;&#10;                            checked={formData.sameAsBilling}&#10;                            onCheckedChange={(checked) =&gt; handleInputChange('sameAsBilling', Boolean(checked))}&#10;                        /&gt;&#10;                        &lt;Label htmlFor=&quot;sameAsBilling&quot;&gt;Same as billing address&lt;/Label&gt;&#10;                      &lt;/div&gt;&#10;                      {!formData.sameAsBilling &amp;&amp; (&#10;                          &lt;&gt;&#10;                            &lt;div&gt;&#10;                              &lt;Label htmlFor=&quot;shippingAddress&quot;&gt;Street Address *&lt;/Label&gt;&#10;                              &lt;Input&#10;                                  id=&quot;shippingAddress&quot;&#10;                                  value={formData.shippingAddress}&#10;                                  onChange={(e) =&gt; handleInputChange('shippingAddress', e.target.value)}&#10;                                  placeholder=&quot;Enter shipping address&quot;&#10;                                  required&#10;                              /&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;                              &lt;div&gt;&#10;                                &lt;Label htmlFor=&quot;shippingCity&quot;&gt;City *&lt;/Label&gt;&#10;                                &lt;Input&#10;                                    id=&quot;shippingCity&quot;&#10;                                    value={formData.shippingCity}&#10;                                    onChange={(e) =&gt; handleInputChange('shippingCity', e.target.value)}&#10;                                    placeholder=&quot;City&quot;&#10;                                    required&#10;                                /&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div&gt;&#10;                                &lt;Label htmlFor=&quot;shippingPostalCode&quot;&gt;Postal Code *&lt;/Label&gt;&#10;                                &lt;Input&#10;                                    id=&quot;shippingPostalCode&quot;&#10;                                    value={formData.shippingPostalCode}&#10;                                    onChange={(e) =&gt; handleInputChange('shippingPostalCode', e.target.value)}&#10;                                    placeholder=&quot;Postal Code&quot;&#10;                                    required&#10;                                /&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div&gt;&#10;                                &lt;Label htmlFor=&quot;shippingCountry&quot;&gt;Country&lt;/Label&gt;&#10;                                &lt;Input&#10;                                    id=&quot;shippingCountry&quot;&#10;                                    value={formData.shippingCountry}&#10;                                    onChange={(e) =&gt; handleInputChange('shippingCountry', e.target.value)}&#10;                                    disabled&#10;                                /&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/&gt;&#10;                      )}&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;&#10;                  {/* Delivery &amp; Payment */}&#10;                  &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;CreditCard className=&quot;h-5 w-5&quot; /&gt;&#10;                        Delivery &amp; Payment&#10;                      &lt;/CardTitle&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;Label className=&quot;text-base font-medium&quot;&gt;Delivery Method&lt;/Label&gt;&#10;                        &lt;RadioGroup&#10;                            value={formData.deliveryMethod}&#10;                            onValueChange={(value) =&gt; handleInputChange('deliveryMethod', value)}&#10;                            className=&quot;mt-2&quot;&#10;                        &gt;&#10;                          &lt;div className=&quot;flex items-center space-x-2 p-3 border rounded-lg&quot;&gt;&#10;                            &lt;RadioGroupItem value=&quot;standard&quot; id=&quot;standard&quot; /&gt;&#10;                            &lt;Label htmlFor=&quot;standard&quot; className=&quot;flex-1&quot;&gt;&#10;                              &lt;div className=&quot;font-medium&quot;&gt;Standard Delivery (3-5 days)&lt;/div&gt;&#10;                              &lt;div className=&quot;text-sm text-gray-500&quot;&gt;&#10;                                {getCartTotal() &gt; 2000 ? 'Free' : '৳100'} - Regular delivery&#10;                              &lt;/div&gt;&#10;                            &lt;/Label&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;flex items-center space-x-2 p-3 border rounded-lg&quot;&gt;&#10;                            &lt;RadioGroupItem value=&quot;express&quot; id=&quot;express&quot; /&gt;&#10;                            &lt;Label htmlFor=&quot;express&quot; className=&quot;flex-1&quot;&gt;&#10;                              &lt;div className=&quot;font-medium&quot;&gt;Express Delivery (1-2 days)&lt;/div&gt;&#10;                              &lt;div className=&quot;text-sm text-gray-500&quot;&gt;৳200 - Fast delivery&lt;/div&gt;&#10;                            &lt;/Label&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/RadioGroup&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;Label className=&quot;text-base font-medium&quot;&gt;Payment Method&lt;/Label&gt;&#10;                        &lt;RadioGroup&#10;                            value={formData.paymentMethod}&#10;                            onValueChange={(value) =&gt; handleInputChange('paymentMethod', value)}&#10;                            className=&quot;mt-2&quot;&#10;                        &gt;&#10;                          &lt;div className=&quot;flex items-center space-x-2 p-3 border rounded-lg&quot;&gt;&#10;                            &lt;RadioGroupItem value=&quot;cod&quot; id=&quot;cod&quot; /&gt;&#10;                            &lt;Label htmlFor=&quot;cod&quot; className=&quot;flex-1&quot;&gt;&#10;                              &lt;div className=&quot;font-medium&quot;&gt;Cash on Delivery&lt;/div&gt;&#10;                              &lt;div className=&quot;text-sm text-gray-500&quot;&gt;Pay when you receive your order&lt;/div&gt;&#10;                            &lt;/Label&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;flex items-center space-x-2 p-3 border rounded-lg opacity-50&quot;&gt;&#10;                            &lt;RadioGroupItem value=&quot;online&quot; id=&quot;online&quot; disabled /&gt;&#10;                            &lt;Label htmlFor=&quot;online&quot; className=&quot;flex-1&quot;&gt;&#10;                              &lt;div className=&quot;font-medium&quot;&gt;Online Payment&lt;/div&gt;&#10;                              &lt;div className=&quot;text-sm text-gray-500&quot;&gt;Credit Card / Mobile Banking (Coming Soon)&lt;/div&gt;&#10;                            &lt;/Label&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/RadioGroup&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;Label htmlFor=&quot;notes&quot;&gt;Order Notes (Optional)&lt;/Label&gt;&#10;                        &lt;Textarea&#10;                            id=&quot;notes&quot;&#10;                            value={formData.notes}&#10;                            onChange={(e) =&gt; handleInputChange('notes', e.target.value)}&#10;                            placeholder=&quot;Special delivery instructions, gift message, etc.&quot;&#10;                            rows={3}&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Right Column - Order Summary */}&#10;                &lt;div className=&quot;lg:col-span-1&quot;&gt;&#10;                  &lt;Card className=&quot;sticky top-8&quot;&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle&gt;Order Summary&lt;/CardTitle&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {cart.map((item) =&gt; {&#10;                          let imageUrl = '/placeholder.jpg'&#10;                          const img = (item.product as any).images&#10;                          if (Array.isArray(img) &amp;&amp; img.length &gt; 0) {&#10;                            imageUrl = img[0]&#10;                          } else if (typeof img === 'string') {&#10;                            try {&#10;                              const parsed = JSON.parse(img)&#10;                              if (Array.isArray(parsed) &amp;&amp; parsed.length &gt; 0) imageUrl = parsed[0]&#10;                            } catch {&#10;                              const csvSplit = img.split(',').map((s) =&gt; s.trim()).filter(Boolean)&#10;                              if (csvSplit.length &gt; 0) imageUrl = csvSplit[0]&#10;                            }&#10;                          } else if (item.product.image) {&#10;                            imageUrl = item.product.image&#10;                          }&#10;                          return (&#10;                              &lt;div key={item.product.id} className=&quot;flex items-center gap-3 p-3 bg-gray-50 rounded-lg&quot;&gt;&#10;                                &lt;Image&#10;                                    src={imageUrl}&#10;                                    alt={item.product.name}&#10;                                    width={50}&#10;                                    height={50}&#10;                                    className=&quot;rounded object-cover&quot;&#10;                                /&gt;&#10;                                &lt;div className=&quot;flex-1&quot;&gt;&#10;                                  &lt;h4 className=&quot;font-medium text-sm&quot;&gt;{item.product.name}&lt;/h4&gt;&#10;                                  &lt;p className=&quot;text-xs text-gray-500&quot;&gt;Qty: {item.quantity}&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;text-sm font-medium&quot;&gt;&#10;                                  ৳{(item.product.price * item.quantity).toFixed(0)}&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                          )&#10;                        })}&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;border-t pt-4 space-y-2&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                          &lt;span&gt;Subtotal ({getCartItemCount()} items)&lt;/span&gt;&#10;                          &lt;span&gt;৳{subtotal.toFixed(0)}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                          &lt;span&gt;Shipping&lt;/span&gt;&#10;                          &lt;span&gt;{shippingCost === 0 ? 'Free' : `৳${shippingCost}`}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between font-bold text-lg pt-2 border-t&quot;&gt;&#10;                          &lt;span&gt;Total&lt;/span&gt;&#10;                          &lt;span className=&quot;text-[#6EC1D1]&quot;&gt;৳{total.toFixed(0)}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;Button&#10;                          type=&quot;submit&quot;&#10;                          className=&quot;w-full bg-[#6EC1D1] hover:bg-[#5AAFBF] text-white font-semibold h-12&quot;&#10;                          disabled={loading}&#10;                      &gt;&#10;                        {loading ? (&#10;                            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                              &lt;div className=&quot;animate-spin rounded-full h-4 w-4 border-b-2 border-white&quot;&gt;&lt;/div&gt;&#10;                              Processing...&#10;                            &lt;/div&gt;&#10;                        ) : (&#10;                            `Place Order - ৳${total.toFixed(0)}`&#10;                        )}&#10;                      &lt;/Button&gt;&#10;                      &lt;p className=&quot;text-xs text-gray-500 text-center&quot;&gt;&#10;                        By placing your order, you agree to our Terms &amp; Conditions and Privacy Policy.&#10;                      &lt;/p&gt;&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Confirm Modal */}&#10;        {showConfirm &amp;&amp; (&#10;            &lt;div&#10;                className=&quot;fixed inset-0 z-50 flex items-center justify-center bg-black/40&quot;&#10;                role=&quot;dialog&quot;&#10;                aria-modal=&quot;true&quot;&#10;                onClick={() =&gt; !loading &amp;&amp; setShowConfirm(false)}&#10;            &gt;&#10;              &lt;div&#10;                  className=&quot;bg-white rounded-xl p-8 shadow-xl w-full max-w-sm text-center border&quot;&#10;                  onClick={(e) =&gt; e.stopPropagation()}&#10;              &gt;&#10;                &lt;h3 className=&quot;text-lg font-bold mb-4&quot;&gt;Are you sure you want to place this order?&lt;/h3&gt;&#10;                &lt;div className=&quot;flex gap-4 justify-center&quot;&gt;&#10;                  &lt;Button&#10;                      className=&quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                      onClick={handleConfirmOrder}&#10;                      disabled={loading}&#10;                  &gt;&#10;                    Yes&#10;                  &lt;/Button&gt;&#10;                  &lt;Button&#10;                      className=&quot;bg-gray-300 hover:bg-gray-400 text-gray-700&quot;&#10;                      onClick={() =&gt; setShowConfirm(false)}&#10;                      disabled={loading}&#10;                  &gt;&#10;                    No&#10;                  &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Success Modal */}&#10;        {showOrderSuccessModal &amp;&amp; (&#10;            &lt;div&#10;                className=&quot;fixed inset-0 z-50 flex items-center justify-center bg-black/40&quot;&#10;                role=&quot;dialog&quot;&#10;                aria-modal=&quot;true&quot;&#10;                onClick={closeSuccessModal}   // click on backdrop closes&#10;            &gt;&#10;              &lt;div&#10;                  className=&quot;bg-white rounded-xl p-8 shadow-xl w-full max-w-sm text-center border&quot;&#10;                  onClick={(e) =&gt; e.stopPropagation()} // prevent close when clicking inside&#10;              &gt;&#10;                &lt;h3 className=&quot;text-xl font-bold mb-2 text-green-600&quot;&gt;Order Successfully Generated!&lt;/h3&gt;&#10;                &lt;p className=&quot;mb-6 text-gray-700&quot;&gt;&#10;                  Your order has been successfully generated. We will contact you soon.&#10;                &lt;/p&gt;&#10;                &lt;div className=&quot;flex gap-3&quot;&gt;&#10;                  &lt;Button&#10;                      ref={successOkRef}&#10;                      className=&quot;bg-blue-600 hover:bg-blue-700 text-white w-full&quot;&#10;                      onClick={handleSuccessOk}&#10;                      autoFocus&#10;                  &gt;&#10;                    OK&#10;                  &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="'use client'&#10;&#10;import { useState, useEffect, useRef } from 'react'&#10;import { useRouter } from 'next/navigation'&#10;import { Button } from '@/components/ui/button'&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'&#10;import { Input } from '@/components/ui/input'&#10;import { Label } from '@/components/ui/label'&#10;import { Textarea } from '@/components/ui/textarea'&#10;import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'&#10;import { Checkbox } from '@/components/ui/checkbox'&#10;import { useStore } from '@/lib/store'&#10;import { ShoppingBag, CreditCard, Truck, MapPin, User } from 'lucide-react'&#10;import { toast } from '@/hooks/use-toast'&#10;import Image from 'next/image'&#10;&#10;interface CheckoutForm {&#10;  firstName: string&#10;  lastName: string&#10;  email: string&#10;  phone: string&#10;  billingAddress: string&#10;  billingCity: string&#10;  billingPostalCode: string&#10;  billingCountry: string&#10;  shippingAddress: string&#10;  shippingCity: string&#10;  shippingPostalCode: string&#10;  shippingCountry: string&#10;  sameAsBilling: boolean&#10;  paymentMethod: string&#10;  deliveryMethod: string&#10;  notes: string&#10;}&#10;&#10;export default function CheckoutPage() {&#10;  const router = useRouter()&#10;  const { cart, getCartTotal, getCartItemCount, clearCart, user } = useStore()&#10;  const [loading, setLoading] = useState(false)&#10;  const [formData, setFormData] = useState&lt;CheckoutForm&gt;({&#10;    firstName: '',&#10;    lastName: '',&#10;    email: user?.email || '',&#10;    phone: '',&#10;    billingAddress: '',&#10;    billingCity: '',&#10;    billingPostalCode: '',&#10;    billingCountry: 'Bangladesh',&#10;    shippingAddress: '',&#10;    shippingCity: '',&#10;    shippingPostalCode: '',&#10;    shippingCountry: 'Bangladesh',&#10;    sameAsBilling: true,&#10;    paymentMethod: 'cod',&#10;    deliveryMethod: 'standard',&#10;    notes: ''&#10;  })&#10;&#10;  // modal/confirm states&#10;  const [showConfirm, setShowConfirm] = useState(false)&#10;  const [showOrderSuccessModal, setShowOrderSuccessModal] = useState(false)&#10;  const successOkRef = useRef&lt;HTMLButtonElement | null&gt;(null)&#10;&#10;  const shippingCost = formData.deliveryMethod === 'express' ? 200 : (getCartTotal() &gt; 2000 ? 0 : 100)&#10;  const subtotal = getCartTotal()&#10;  const total = subtotal + shippingCost&#10;&#10;  useEffect(() =&gt; {&#10;    if (cart.length === 0) {&#10;      router.push('/')&#10;    }&#10;  }, [cart, router])&#10;&#10;  const handleInputChange = (field: keyof CheckoutForm, value: string | boolean) =&gt; {&#10;    setFormData(prev =&gt; ({&#10;      ...prev,&#10;      [field]: value,&#10;      ...(field === 'sameAsBilling' &amp;&amp; value === true ? {&#10;        shippingAddress: prev.billingAddress,&#10;        shippingCity: prev.billingCity,&#10;        shippingPostalCode: prev.billingPostalCode,&#10;        shippingCountry: prev.billingCountry&#10;      } : {})&#10;    }))&#10;  }&#10;&#10;  const validateForm = () =&gt; {&#10;    const required: (keyof CheckoutForm)[] = [&#10;      'firstName', 'lastName', 'email', 'phone',&#10;      'billingAddress', 'billingCity', 'billingPostalCode'&#10;    ]&#10;    if (!formData.sameAsBilling) {&#10;      required.push('shippingAddress', 'shippingCity', 'shippingPostalCode')&#10;    }&#10;    for (const field of required) {&#10;      if (!String(formData[field] ?? '').trim()) {&#10;        toast({&#10;          title: &quot;Missing Information&quot;,&#10;          description: `Please fill in ${String(field).replace(/([A-Z])/g, ' $1').toLowerCase()}`,&#10;          variant: &quot;destructive&quot;&#10;        })&#10;        return false&#10;      }&#10;    }&#10;    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/&#10;    if (!emailRegex.test(formData.email)) {&#10;      toast({ title: &quot;Invalid Email&quot;, description: &quot;Please enter a valid email address&quot;, variant: &quot;destructive&quot; })&#10;      return false&#10;    }&#10;    const phoneRegex = /^(\+880|880|0)?[1-9]\d{8,10}$/&#10;    const cleanPhone = formData.phone.replace(/[\s\-\(\)]/g, '')&#10;    if (!phoneRegex.test(cleanPhone)) {&#10;      toast({&#10;        title: &quot;Invalid Phone&quot;,&#10;        description: &quot;Please enter a valid phone number (e.g., 01712345678 or +8801712345678)&quot;,&#10;        variant: &quot;destructive&quot;&#10;      })&#10;      return false&#10;    }&#10;    return true&#10;  }&#10;&#10;  // Show confirmation popup before actual submission&#10;  const handlePlaceOrderClick = (e: React.FormEvent) =&gt; {&#10;    e.preventDefault()&#10;    if (!validateForm()) return&#10;    setShowConfirm(true)&#10;  }&#10;&#10;  // Proceed with order after confirmation&#10;  const handleConfirmOrder = async () =&gt; {&#10;    setLoading(true)&#10;    try {&#10;      const orderData = {&#10;        customerName: `${formData.firstName} ${formData.lastName}`,&#10;        customerEmail: formData.email,&#10;        customerPhone: formData.phone,&#10;        items: cart.map(item =&gt; ({&#10;          productId: item.product.id,&#10;          productName: item.product.name,&#10;          price: item.product.price,&#10;          quantity: item.quantity&#10;        })),&#10;        subtotal,&#10;        shippingAmount: shippingCost,&#10;        totalAmount: total,&#10;        billingAddress: {&#10;          address: formData.billingAddress,&#10;          city: formData.billingCity,&#10;          postalCode: formData.billingPostalCode,&#10;          country: formData.billingCountry&#10;        },&#10;        shippingAddress: formData.sameAsBilling ? {&#10;          address: formData.billingAddress,&#10;          city: formData.billingCity,&#10;          postalCode: formData.billingPostalCode,&#10;          country: formData.billingCountry&#10;        } : {&#10;          address: formData.shippingAddress,&#10;          city: formData.shippingCity,&#10;          postalCode: formData.shippingPostalCode,&#10;          country: formData.shippingCountry&#10;        },&#10;        paymentMethod: formData.paymentMethod,&#10;        deliveryMethod: formData.deliveryMethod,&#10;        notes: formData.notes&#10;      }&#10;&#10;      const response = await fetch('/api/orders', {&#10;        method: 'POST',&#10;        headers: { 'Content-Type': 'application/json' },&#10;        body: JSON.stringify(orderData),&#10;      })&#10;&#10;      if (response.ok) {&#10;        clearCart()&#10;        setShowConfirm(false)&#10;        setShowOrderSuccessModal(true)&#10;        // focus the OK for accessibility&#10;        setTimeout(() =&gt; successOkRef.current?.focus(), 0)&#10;        // lock body scroll while modal open&#10;        document.body.style.overflow = 'hidden'&#10;      } else {&#10;        const errorText = await response.text()&#10;        let errorMessage = &quot;Failed to place order. Please try again.&quot;&#10;        try {&#10;          const error = JSON.parse(errorText)&#10;          errorMessage = error.error || error.message || errorMessage&#10;        } catch {}&#10;        toast({ title: &quot;Order Failed&quot;, description: errorMessage, variant: &quot;destructive&quot; })&#10;      }&#10;    } catch (error) {&#10;      toast({ title: &quot;Error&quot;, description: &quot;Something went wrong. Please try again.&quot;, variant: &quot;destructive&quot; })&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  // Close success modal&#10;  const closeSuccessModal = () =&gt; {&#10;    setShowOrderSuccessModal(false)&#10;    document.body.style.overflow = '' // restore scroll&#10;  }&#10;&#10;  // Handle OK on success message&#10;  const handleSuccessOk = () =&gt; {&#10;    closeSuccessModal()&#10;    router.push('/')&#10;  }&#10;&#10;  // Close modals with ESC&#10;  useEffect(() =&gt; {&#10;    const onKey = (e: KeyboardEvent) =&gt; {&#10;      if (e.key === 'Escape') {&#10;        if (showConfirm) setShowConfirm(false)&#10;        if (showOrderSuccessModal) closeSuccessModal()&#10;      }&#10;    }&#10;    document.addEventListener('keydown', onKey)&#10;    return () =&gt; document.removeEventListener('keydown', onKey)&#10;  }, [showConfirm, showOrderSuccessModal])&#10;&#10;  if (cart.length === 0) return null&#10;&#10;  return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 py-8&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4&quot;&gt;&#10;          &lt;div className=&quot;max-w-6xl mx-auto&quot;&gt;&#10;            &lt;h1 className=&quot;text-3xl font-bold text-gray-900 mb-8 flex items-center gap-3&quot;&gt;&#10;              &lt;ShoppingBag className=&quot;h-8 w-8 text-[#6EC1D1]&quot; /&gt;&#10;              Checkout&#10;            &lt;/h1&gt;&#10;&#10;            &lt;form onSubmit={handlePlaceOrderClick}&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-8&quot;&gt;&#10;                {/* Left Column - Forms */}&#10;                &lt;div className=&quot;lg:col-span-2 space-y-6&quot;&gt;&#10;                  {/* Customer Information */}&#10;                  &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;User className=&quot;h-5 w-5&quot; /&gt;&#10;                        Customer Information&#10;                      &lt;/CardTitle&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;div&gt;&#10;                          &lt;Label htmlFor=&quot;firstName&quot;&gt;First Name *&lt;/Label&gt;&#10;                          &lt;Input&#10;                              id=&quot;firstName&quot;&#10;                              value={formData.firstName}&#10;                              onChange={(e) =&gt; handleInputChange('firstName', e.target.value)}&#10;                              placeholder=&quot;Enter first name&quot;&#10;                              required&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;Label htmlFor=&quot;lastName&quot;&gt;Last Name *&lt;/Label&gt;&#10;                          &lt;Input&#10;                              id=&quot;lastName&quot;&#10;                              value={formData.lastName}&#10;                              onChange={(e) =&gt; handleInputChange('lastName', e.target.value)}&#10;                              placeholder=&quot;Enter last name&quot;&#10;                              required&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                        &lt;div&gt;&#10;                          &lt;Label htmlFor=&quot;email&quot;&gt;Email Address *&lt;/Label&gt;&#10;                          &lt;Input&#10;                              id=&quot;email&quot;&#10;                              type=&quot;email&quot;&#10;                              value={formData.email}&#10;                              onChange={(e) =&gt; handleInputChange('email', e.target.value)}&#10;                              placeholder=&quot;Enter email address&quot;&#10;                              required&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;Label htmlFor=&quot;phone&quot;&gt;Phone Number *&lt;/Label&gt;&#10;                          &lt;Input&#10;                              id=&quot;phone&quot;&#10;                              value={formData.phone}&#10;                              onChange={(e) =&gt; handleInputChange('phone', e.target.value)}&#10;                              placeholder=&quot;+880 1X XX XX XX XX&quot;&#10;                              required&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;&#10;                  {/* Billing Address */}&#10;                  &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;MapPin className=&quot;h-5 w-5&quot; /&gt;&#10;                        Billing Address&#10;                      &lt;/CardTitle&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;Label htmlFor=&quot;billingAddress&quot;&gt;Street Address *&lt;/Label&gt;&#10;                        &lt;Input&#10;                            id=&quot;billingAddress&quot;&#10;                            value={formData.billingAddress}&#10;                            onChange={(e) =&gt; handleInputChange('billingAddress', e.target.value)}&#10;                            placeholder=&quot;Enter your street address&quot;&#10;                            required&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;                        &lt;div&gt;&#10;                          &lt;Label htmlFor=&quot;billingCity&quot;&gt;City *&lt;/Label&gt;&#10;                          &lt;Input&#10;                              id=&quot;billingCity&quot;&#10;                              value={formData.billingCity}&#10;                              onChange={(e) =&gt; handleInputChange('billingCity', e.target.value)}&#10;                              placeholder=&quot;City&quot;&#10;                              required&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;Label htmlFor=&quot;billingPostalCode&quot;&gt;Postal Code *&lt;/Label&gt;&#10;                          &lt;Input&#10;                              id=&quot;billingPostalCode&quot;&#10;                              value={formData.billingPostalCode}&#10;                              onChange={(e) =&gt; handleInputChange('billingPostalCode', e.target.value)}&#10;                              placeholder=&quot;Postal Code&quot;&#10;                              required&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                          &lt;Label htmlFor=&quot;billingCountry&quot;&gt;Country&lt;/Label&gt;&#10;                          &lt;Input&#10;                              id=&quot;billingCountry&quot;&#10;                              value={formData.billingCountry}&#10;                              onChange={(e) =&gt; handleInputChange('billingCountry', e.target.value)}&#10;                              disabled&#10;                          /&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;&#10;                  {/* Shipping Address */}&#10;                  &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;Truck className=&quot;h-5 w-5&quot; /&gt;&#10;                        Shipping Address&#10;                      &lt;/CardTitle&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                        &lt;Checkbox&#10;                            id=&quot;sameAsBilling&quot;&#10;                            checked={formData.sameAsBilling}&#10;                            onCheckedChange={(checked) =&gt; handleInputChange('sameAsBilling', Boolean(checked))}&#10;                        /&gt;&#10;                        &lt;Label htmlFor=&quot;sameAsBilling&quot;&gt;Same as billing address&lt;/Label&gt;&#10;                      &lt;/div&gt;&#10;                      {!formData.sameAsBilling &amp;&amp; (&#10;                          &lt;&gt;&#10;                            &lt;div&gt;&#10;                              &lt;Label htmlFor=&quot;shippingAddress&quot;&gt;Street Address *&lt;/Label&gt;&#10;                              &lt;Input&#10;                                  id=&quot;shippingAddress&quot;&#10;                                  value={formData.shippingAddress}&#10;                                  onChange={(e) =&gt; handleInputChange('shippingAddress', e.target.value)}&#10;                                  placeholder=&quot;Enter shipping address&quot;&#10;                                  required&#10;                              /&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;                              &lt;div&gt;&#10;                                &lt;Label htmlFor=&quot;shippingCity&quot;&gt;City *&lt;/Label&gt;&#10;                                &lt;Input&#10;                                    id=&quot;shippingCity&quot;&#10;                                    value={formData.shippingCity}&#10;                                    onChange={(e) =&gt; handleInputChange('shippingCity', e.target.value)}&#10;                                    placeholder=&quot;City&quot;&#10;                                    required&#10;                                /&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div&gt;&#10;                                &lt;Label htmlFor=&quot;shippingPostalCode&quot;&gt;Postal Code *&lt;/Label&gt;&#10;                                &lt;Input&#10;                                    id=&quot;shippingPostalCode&quot;&#10;                                    value={formData.shippingPostalCode}&#10;                                    onChange={(e) =&gt; handleInputChange('shippingPostalCode', e.target.value)}&#10;                                    placeholder=&quot;Postal Code&quot;&#10;                                    required&#10;                                /&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;div&gt;&#10;                                &lt;Label htmlFor=&quot;shippingCountry&quot;&gt;Country&lt;/Label&gt;&#10;                                &lt;Input&#10;                                    id=&quot;shippingCountry&quot;&#10;                                    value={formData.shippingCountry}&#10;                                    onChange={(e) =&gt; handleInputChange('shippingCountry', e.target.value)}&#10;                                    disabled&#10;                                /&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/&gt;&#10;                      )}&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;&#10;                  {/* Delivery &amp; Payment */}&#10;                  &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;CreditCard className=&quot;h-5 w-5&quot; /&gt;&#10;                        Delivery &amp; Payment&#10;                      &lt;/CardTitle&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                      &lt;div&gt;&#10;                        &lt;Label className=&quot;text-base font-medium&quot;&gt;Delivery Method&lt;/Label&gt;&#10;                        &lt;RadioGroup&#10;                            value={formData.deliveryMethod}&#10;                            onValueChange={(value) =&gt; handleInputChange('deliveryMethod', value)}&#10;                            className=&quot;mt-2&quot;&#10;                        &gt;&#10;                          &lt;div className=&quot;flex items-center space-x-2 p-3 border rounded-lg&quot;&gt;&#10;                            &lt;RadioGroupItem value=&quot;standard&quot; id=&quot;standard&quot; /&gt;&#10;                            &lt;Label htmlFor=&quot;standard&quot; className=&quot;flex-1&quot;&gt;&#10;                              &lt;div className=&quot;font-medium&quot;&gt;Standard Delivery (3-5 days)&lt;/div&gt;&#10;                              &lt;div className=&quot;text-sm text-gray-500&quot;&gt;&#10;                                {getCartTotal() &gt; 2000 ? 'Free' : '৳100'} - Regular delivery&#10;                              &lt;/div&gt;&#10;                            &lt;/Label&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;flex items-center space-x-2 p-3 border rounded-lg&quot;&gt;&#10;                            &lt;RadioGroupItem value=&quot;express&quot; id=&quot;express&quot; /&gt;&#10;                            &lt;Label htmlFor=&quot;express&quot; className=&quot;flex-1&quot;&gt;&#10;                              &lt;div className=&quot;font-medium&quot;&gt;Express Delivery (1-2 days)&lt;/div&gt;&#10;                              &lt;div className=&quot;text-sm text-gray-500&quot;&gt;৳200 - Fast delivery&lt;/div&gt;&#10;                            &lt;/Label&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/RadioGroup&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;Label className=&quot;text-base font-medium&quot;&gt;Payment Method&lt;/Label&gt;&#10;                        &lt;RadioGroup&#10;                            value={formData.paymentMethod}&#10;                            onValueChange={(value) =&gt; handleInputChange('paymentMethod', value)}&#10;                            className=&quot;mt-2&quot;&#10;                        &gt;&#10;                          &lt;div className=&quot;flex items-center space-x-2 p-3 border rounded-lg&quot;&gt;&#10;                            &lt;RadioGroupItem value=&quot;cod&quot; id=&quot;cod&quot; /&gt;&#10;                            &lt;Label htmlFor=&quot;cod&quot; className=&quot;flex-1&quot;&gt;&#10;                              &lt;div className=&quot;font-medium&quot;&gt;Cash on Delivery&lt;/div&gt;&#10;                              &lt;div className=&quot;text-sm text-gray-500&quot;&gt;Pay when you receive your order&lt;/div&gt;&#10;                            &lt;/Label&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;div className=&quot;flex items-center space-x-2 p-3 border rounded-lg opacity-50&quot;&gt;&#10;                            &lt;RadioGroupItem value=&quot;online&quot; id=&quot;online&quot; disabled /&gt;&#10;                            &lt;Label htmlFor=&quot;online&quot; className=&quot;flex-1&quot;&gt;&#10;                              &lt;div className=&quot;font-medium&quot;&gt;Online Payment&lt;/div&gt;&#10;                              &lt;div className=&quot;text-sm text-gray-500&quot;&gt;Credit Card / Mobile Banking (Coming Soon)&lt;/div&gt;&#10;                            &lt;/Label&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/RadioGroup&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div&gt;&#10;                        &lt;Label htmlFor=&quot;notes&quot;&gt;Order Notes (Optional)&lt;/Label&gt;&#10;                        &lt;Textarea&#10;                            id=&quot;notes&quot;&#10;                            value={formData.notes}&#10;                            onChange={(e) =&gt; handleInputChange('notes', e.target.value)}&#10;                            placeholder=&quot;Special delivery instructions, gift message, etc.&quot;&#10;                            rows={3}&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Right Column - Order Summary */}&#10;                &lt;div className=&quot;lg:col-span-1&quot;&gt;&#10;                  &lt;Card className=&quot;sticky top-8&quot;&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle&gt;Order Summary&lt;/CardTitle&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;space-y-3&quot;&gt;&#10;                        {cart.map((item) =&gt; {&#10;                          let imageUrl = '/placeholder.jpg'&#10;                          const img = (item.product as any).images&#10;                          if (Array.isArray(img) &amp;&amp; img.length &gt; 0) {&#10;                            imageUrl = img[0]&#10;                          } else if (typeof img === 'string') {&#10;                            try {&#10;                              const parsed = JSON.parse(img)&#10;                              if (Array.isArray(parsed) &amp;&amp; parsed.length &gt; 0) imageUrl = parsed[0]&#10;                            } catch {&#10;                              const csvSplit = img.split(',').map((s) =&gt; s.trim()).filter(Boolean)&#10;                              if (csvSplit.length &gt; 0) imageUrl = csvSplit[0]&#10;                            }&#10;                          } else if (item.product.image) {&#10;                            imageUrl = item.product.image&#10;                          }&#10;                          return (&#10;                              &lt;div key={item.product.id} className=&quot;flex items-center gap-3 p-3 bg-gray-50 rounded-lg&quot;&gt;&#10;                                &lt;Image&#10;                                    src={imageUrl}&#10;                                    alt={item.product.name}&#10;                                    width={50}&#10;                                    height={50}&#10;                                    className=&quot;rounded object-cover&quot;&#10;                                /&gt;&#10;                                &lt;div className=&quot;flex-1&quot;&gt;&#10;                                  &lt;h4 className=&quot;font-medium text-sm&quot;&gt;{item.product.name}&lt;/h4&gt;&#10;                                  &lt;p className=&quot;text-xs text-gray-500&quot;&gt;Qty: {item.quantity}&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;text-sm font-medium&quot;&gt;&#10;                                  ৳{(item.product.price * item.quantity).toFixed(0)}&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                          )&#10;                        })}&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;border-t pt-4 space-y-2&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                          &lt;span&gt;Subtotal ({getCartItemCount()} items)&lt;/span&gt;&#10;                          &lt;span&gt;৳{subtotal.toFixed(0)}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                          &lt;span&gt;Shipping&lt;/span&gt;&#10;                          &lt;span&gt;{shippingCost === 0 ? 'Free' : `৳${shippingCost}`}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex justify-between font-bold text-lg pt-2 border-t&quot;&gt;&#10;                          &lt;span&gt;Total&lt;/span&gt;&#10;                          &lt;span className=&quot;text-[#6EC1D1]&quot;&gt;৳{total.toFixed(0)}&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;Button&#10;                          type=&quot;submit&quot;&#10;                          className=&quot;w-full bg-[#6EC1D1] hover:bg-[#5AAFBF] text-white font-semibold h-12&quot;&#10;                          disabled={loading}&#10;                      &gt;&#10;                        {loading ? (&#10;                            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                              &lt;div className=&quot;animate-spin rounded-full h-4 w-4 border-b-2 border-white&quot;&gt;&lt;/div&gt;&#10;                              Processing...&#10;                            &lt;/div&gt;&#10;                        ) : (&#10;                            `Place Order - ৳${total.toFixed(0)}`&#10;                        )}&#10;                      &lt;/Button&gt;&#10;                      &lt;p className=&quot;text-xs text-gray-500 text-center&quot;&gt;&#10;                        By placing your order, you agree to our Terms &amp; Conditions and Privacy Policy.&#10;                      &lt;/p&gt;&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Confirm Modal */}&#10;        {showConfirm &amp;&amp; (&#10;            &lt;div&#10;                className=&quot;fixed inset-0 z-50 flex items-center justify-center bg-black/40&quot;&#10;                role=&quot;dialog&quot;&#10;                aria-modal=&quot;true&quot;&#10;                onClick={() =&gt; !loading &amp;&amp; setShowConfirm(false)}&#10;            &gt;&#10;              &lt;div&#10;                  className=&quot;bg-white rounded-xl p-8 shadow-xl w-full max-w-sm text-center border&quot;&#10;                  onClick={(e) =&gt; e.stopPropagation()}&#10;              &gt;&#10;                &lt;h3 className=&quot;text-lg font-bold mb-4&quot;&gt;Are you sure you want to place this order?&lt;/h3&gt;&#10;                &lt;div className=&quot;flex gap-4 justify-center&quot;&gt;&#10;                  &lt;Button&#10;                      className=&quot;bg-green-600 hover:bg-green-700 text-white&quot;&#10;                      onClick={handleConfirmOrder}&#10;                      disabled={loading}&#10;                  &gt;&#10;                    Yes&#10;                  &lt;/Button&gt;&#10;                  &lt;Button&#10;                      className=&quot;bg-gray-300 hover:bg-gray-400 text-gray-700&quot;&#10;                      onClick={() =&gt; setShowConfirm(false)}&#10;                      disabled={loading}&#10;                  &gt;&#10;                    No&#10;                  &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Success Modal */}&#10;        {showOrderSuccessModal &amp;&amp; (&#10;            &lt;div className=&quot;fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40&quot; onClick={() =&gt; {}}&gt;&#10;              &lt;div&#10;                  className=&quot;bg-white rounded-xl p-8 shadow-xl w-full max-w-sm text-center border&quot;&#10;                  onClick={e =&gt; e.stopPropagation()}&#10;              &gt;&#10;                &lt;h3 className=&quot;text-xl font-bold mb-2 text-green-600&quot;&gt;Order Successfully Generated!&lt;/h3&gt;&#10;                &lt;p className=&quot;mb-6 text-gray-700&quot;&gt;&#10;                  Your order has been successfully generated. We will contact you soon.&#10;                &lt;/p&gt;&#10;                &lt;div className=&quot;flex gap-3&quot;&gt;&#10;                  &lt;Button&#10;                      ref={successOkRef}&#10;                      className=&quot;bg-blue-600 hover:bg-blue-700 text-white w-full&quot;&#10;                      onClick={handleSuccessOk}&#10;                      autoFocus&#10;                  &gt;&#10;                    OK&#10;                  &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/contact/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/contact/page.tsx" />
              <option name="updatedContent" value="import FooterPageTemplate from '@/components/FooterPageTemplate'&#10;&#10;export default function ContactPage() {&#10;  const fallbackContent = `&#10;    &lt;h2&gt;Get in Touch&lt;/h2&gt;&#10;    &lt;p&gt;We'd love to hear from you. Contact us for any questions about our products or services.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Contact Information&lt;/h3&gt;&#10;    &lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; info@sfdbd.com&lt;/p&gt;&#10;    &lt;p&gt;&lt;strong&gt;Phone:&lt;/strong&gt; +880 1234 567890&lt;/p&gt;&#10;    &lt;p&gt;&lt;strong&gt;Address:&lt;/strong&gt; 123 Fashion Street, Dhaka, Bangladesh&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Business Hours&lt;/h3&gt;&#10;    &lt;p&gt;Monday - Friday: 9:00 AM - 6:00 PM&lt;/p&gt;&#10;    &lt;p&gt;Saturday: 10:00 AM - 4:00 PM&lt;/p&gt;&#10;    &lt;p&gt;Sunday: Closed&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Customer Service&lt;/h3&gt;&#10;    &lt;p&gt;For immediate assistance, please contact our customer service team during business hours. We're here to help with any questions about our products, orders, shipping, or returns.&lt;/p&gt;&#10;  `&#10;&#10;  return (&#10;    &lt;FooterPageTemplate &#10;      slug=&quot;contact&quot;&#10;      fallbackTitle=&quot;Contact Us&quot;&#10;      fallbackContent={fallbackContent}&#10;    /&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/delivery/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/delivery/page.tsx" />
              <option name="updatedContent" value="import FooterPageTemplate from '@/components/FooterPageTemplate'&#10;&#10;export default function DeliveryPage() {&#10;  const fallbackContent = `&#10;    &lt;h2&gt;Delivery &amp; Shipping&lt;/h2&gt;&#10;    &lt;p&gt;We offer reliable delivery services across Bangladesh to get your products to you safely and on time.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Delivery Areas&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Dhaka City: 1-2 business days&lt;/li&gt;&#10;      &lt;li&gt;Major Cities: 2-3 business days&lt;/li&gt;&#10;      &lt;li&gt;Other Areas: 3-5 business days&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Delivery Charges&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Inside Dhaka: 80 BDT&lt;/li&gt;&#10;      &lt;li&gt;Outside Dhaka: 120 BDT&lt;/li&gt;&#10;      &lt;li&gt;Free delivery on orders above 2000 BDT&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Delivery Process&lt;/h3&gt;&#10;    &lt;p&gt;Once your order is confirmed, we'll process it within 24 hours and arrange delivery through our trusted courier partners.&lt;/p&gt;&#10;  `&#10;&#10;  return (&#10;    &lt;FooterPageTemplate &#10;      slug=&quot;delivery&quot;&#10;      fallbackTitle=&quot;Delivery Information&quot;&#10;      fallbackContent={fallbackContent}&#10;    /&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/ethics/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/ethics/page.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import { useState, useEffect } from 'react'&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'&#10;&#10;export default function EthicsPage() {&#10;  const [content, setContent] = useState&lt;any&gt;(null)&#10;  const [loading, setLoading] = useState(true)&#10;&#10;  useEffect(() =&gt; {&#10;    fetchContent()&#10;  }, [])&#10;&#10;  const fetchContent = async () =&gt; {&#10;    try {&#10;      const response = await fetch('/api/footer')&#10;      if (response.ok) {&#10;        const data = await response.json()&#10;        const ethicsContent = data.content.find((item: any) =&gt; item.slug === 'ethics')&#10;        setContent(ethicsContent)&#10;      }&#10;    } catch (error) {&#10;      console.error('Error fetching content:', error)&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;container mx-auto px-4 py-12&quot;&gt;&#10;        &lt;Card className=&quot;max-w-4xl mx-auto&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;text-3xl font-bold text-center&quot;&gt;&#10;              {content?.title || 'Ethical Policy'}&#10;            &lt;/CardTitle&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;prose max-w-none&quot;&gt;&#10;            &lt;div&#10;              dangerouslySetInnerHTML={{&#10;                __html: content?.content || `&#10;                  &lt;h2&gt;Our Ethical Commitments&lt;/h2&gt;&#10;                  &lt;p&gt;Southern Fashion &amp; Décor is committed to conducting business ethically and responsibly across all aspects of our operations.&lt;/p&gt;&#10;                  &#10;                  &lt;h3&gt;Fair Labor Practices&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Ensuring fair wages and safe working conditions for all workers&lt;/li&gt;&#10;                    &lt;li&gt;Zero tolerance for child labor or forced labor&lt;/li&gt;&#10;                    &lt;li&gt;Supporting workers' rights to organize and bargain collectively&lt;/li&gt;&#10;                    &lt;li&gt;Providing skills training and development opportunities&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;Supplier Ethics&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Working only with suppliers who share our ethical values&lt;/li&gt;&#10;                    &lt;li&gt;Regular audits of supplier facilities and practices&lt;/li&gt;&#10;                    &lt;li&gt;Supporting local artisans and small-scale manufacturers&lt;/li&gt;&#10;                    &lt;li&gt;Transparent supply chain management&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;Environmental Responsibility&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Minimizing environmental impact in all operations&lt;/li&gt;&#10;                    &lt;li&gt;Promoting sustainable materials and production methods&lt;/li&gt;&#10;                    &lt;li&gt;Reducing waste and implementing recycling programs&lt;/li&gt;&#10;                    &lt;li&gt;Supporting eco-friendly packaging solutions&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;Community Engagement&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Supporting local communities through employment and partnerships&lt;/li&gt;&#10;                    &lt;li&gt;Contributing to education and skill development programs&lt;/li&gt;&#10;                    &lt;li&gt;Participating in charitable initiatives and social causes&lt;/li&gt;&#10;                    &lt;li&gt;Promoting cultural heritage and traditional crafts&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;Customer Rights&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Honest and transparent product descriptions&lt;/li&gt;&#10;                    &lt;li&gt;Fair pricing and clear return policies&lt;/li&gt;&#10;                    &lt;li&gt;Protecting customer privacy and data&lt;/li&gt;&#10;                    &lt;li&gt;Accessible customer service and support&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;Continuous Improvement&lt;/h3&gt;&#10;                  &lt;p&gt;We continuously review and improve our ethical practices, seeking feedback from stakeholders and implementing best practices in corporate social responsibility.&lt;/p&gt;&#10;                `&#10;              }}&#10;            /&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="'use client'&#10;&#10;import FooterPageTemplate from '@/components/FooterPageTemplate'&#10;&#10;export default function EthicsPage() {&#10;  const fallbackContent = `&#10;    &lt;h2&gt;Our Ethical Commitments&lt;/h2&gt;&#10;    &lt;p&gt;Southern Fashion &amp; Décor is committed to conducting business ethically and responsibly across all aspects of our operations.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Fair Labor Practices&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Ensuring fair wages and safe working conditions for all workers&lt;/li&gt;&#10;      &lt;li&gt;Zero tolerance for child labor or forced labor&lt;/li&gt;&#10;      &lt;li&gt;Supporting workers' rights to organize and bargain collectively&lt;/li&gt;&#10;      &lt;li&gt;Providing skills training and development opportunities&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Supplier Ethics&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Working only with suppliers who share our ethical values&lt;/li&gt;&#10;      &lt;li&gt;Regular audits of supplier facilities and practices&lt;/li&gt;&#10;      &lt;li&gt;Supporting local artisans and small-scale manufacturers&lt;/li&gt;&#10;      &lt;li&gt;Transparent supply chain management&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Environmental Responsibility&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Minimizing environmental impact in all operations&lt;/li&gt;&#10;      &lt;li&gt;Promoting sustainable materials and production methods&lt;/li&gt;&#10;      &lt;li&gt;Reducing waste and implementing recycling programs&lt;/li&gt;&#10;      &lt;li&gt;Supporting eco-friendly packaging solutions&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Community Engagement&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Supporting local communities through employment and partnerships&lt;/li&gt;&#10;      &lt;li&gt;Contributing to education and skill development programs&lt;/li&gt;&#10;      &lt;li&gt;Participating in charitable initiatives and social causes&lt;/li&gt;&#10;      &lt;li&gt;Promoting cultural heritage and traditional crafts&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Customer Rights&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Honest and transparent product descriptions&lt;/li&gt;&#10;      &lt;li&gt;Fair pricing and clear return policies&lt;/li&gt;&#10;      &lt;li&gt;Protecting customer privacy and data&lt;/li&gt;&#10;      &lt;li&gt;Accessible customer service and support&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Continuous Improvement&lt;/h3&gt;&#10;    &lt;p&gt;We continuously review and improve our ethical practices, seeking feedback from stakeholders and implementing best practices in corporate social responsibility.&lt;/p&gt;&#10;  `&#10;&#10;  return (&#10;    &lt;FooterPageTemplate &#10;      slug=&quot;ethics&quot;&#10;      fallbackTitle=&quot;Ethical Policy&quot;&#10;      fallbackContent={fallbackContent}&#10;    /&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/faq/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/faq/page.tsx" />
              <option name="updatedContent" value="import FooterPageTemplate from '@/components/FooterPageTemplate'&#10;&#10;export default function FAQPage() {&#10;  const fallbackContent = `&#10;    &lt;h2&gt;Frequently Asked Questions&lt;/h2&gt;&#10;    &#10;    &lt;h3&gt;How do I place an order?&lt;/h3&gt;&#10;    &lt;p&gt;You can place an order by browsing our products, adding items to your cart, and proceeding to checkout. You'll need to provide your contact and shipping information.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;What payment methods do you accept?&lt;/h3&gt;&#10;    &lt;p&gt;We accept Visa, Mastercard, and cash on delivery for orders within Bangladesh.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;How long does delivery take?&lt;/h3&gt;&#10;    &lt;p&gt;Delivery typically takes 1-2 days within Dhaka and 3-5 days for other areas in Bangladesh.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Can I return or exchange items?&lt;/h3&gt;&#10;    &lt;p&gt;Yes, we accept returns within 7 days of delivery for unused items in original packaging.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Do you offer wholesale pricing?&lt;/h3&gt;&#10;    &lt;p&gt;Yes, we offer special wholesale pricing for bulk orders. Please contact us for more information.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;How can I track my order?&lt;/h3&gt;&#10;    &lt;p&gt;Once your order is shipped, you'll receive a tracking number via email or SMS to monitor your delivery status.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;What if I receive a damaged item?&lt;/h3&gt;&#10;    &lt;p&gt;If you receive a damaged item, please contact us immediately with photos. We'll arrange for a replacement or refund.&lt;/p&gt;&#10;  `&#10;&#10;  return (&#10;    &lt;FooterPageTemplate &#10;      slug=&quot;faq&quot;&#10;      fallbackTitle=&quot;Frequently Asked Questions&quot;&#10;      fallbackContent={fallbackContent}&#10;    /&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/lookbook/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/lookbook/page.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import { useState, useEffect } from 'react'&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'&#10;&#10;export default function LookbookPage() {&#10;  const [content, setContent] = useState&lt;any&gt;(null)&#10;  const [loading, setLoading] = useState(true)&#10;&#10;  useEffect(() =&gt; {&#10;    fetchContent()&#10;  }, [])&#10;&#10;  const fetchContent = async () =&gt; {&#10;    try {&#10;      const response = await fetch('/api/footer')&#10;      if (response.ok) {&#10;        const data = await response.json()&#10;        const lookbookContent = data.content.find((item: any) =&gt; item.slug === 'lookbook')&#10;        setContent(lookbookContent)&#10;      }&#10;    } catch (error) {&#10;      console.error('Error fetching content:', error)&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;container mx-auto px-4 py-12&quot;&gt;&#10;        &lt;Card className=&quot;max-w-4xl mx-auto&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;text-3xl font-bold text-center&quot;&gt;&#10;              {content?.title || 'Lookbook'}&#10;            &lt;/CardTitle&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;prose max-w-none&quot;&gt;&#10;            &lt;div&#10;              dangerouslySetInnerHTML={{&#10;                __html: content?.content || `&#10;                  &lt;h2&gt;Southern Fashion &amp; Décor Lookbook&lt;/h2&gt;&#10;                  &lt;p&gt;Discover the latest trends and styling inspiration from our curated collections.&lt;/p&gt;&#10;&#10;                  &lt;h3&gt;Fashion Lookbook&lt;/h3&gt;&#10;                  &lt;p&gt;Explore our seasonal fashion collections featuring the latest trends in clothing, accessories, and footwear. Our lookbook showcases how to style our pieces for different occasions and seasons.&lt;/p&gt;&#10;&#10;                  &lt;h3&gt;Home Décor Inspiration&lt;/h3&gt;&#10;                  &lt;p&gt;Get inspired with our home décor lookbook featuring beautifully styled spaces using our furniture and decorative items. See how our products can transform your living spaces.&lt;/p&gt;&#10;&#10;                  &lt;h3&gt;Seasonal Collections&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;&lt;strong&gt;Spring/Summer:&lt;/strong&gt; Light fabrics, bright colors, and fresh home décor&lt;/li&gt;&#10;                    &lt;li&gt;&lt;strong&gt;Fall/Winter:&lt;/strong&gt; Cozy textures, warm tones, and seasonal decorations&lt;/li&gt;&#10;                    &lt;li&gt;&lt;strong&gt;Festival Collections:&lt;/strong&gt; Special occasion wear and festive décor&lt;/li&gt;&#10;                    &lt;li&gt;&lt;strong&gt;Wedding Season:&lt;/strong&gt; Bridal and formal wear collections&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;&#10;                  &lt;h3&gt;Styling Tips&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Mix and match different pieces from our collections&lt;/li&gt;&#10;                    &lt;li&gt;Layer accessories to create unique looks&lt;/li&gt;&#10;                    &lt;li&gt;Combine different textures and patterns in home décor&lt;/li&gt;&#10;                    &lt;li&gt;Create focal points with statement pieces&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;&#10;                  &lt;h3&gt;Get Featured&lt;/h3&gt;&#10;                  &lt;p&gt;Share your styling creations using our products on social media with #SFDStyle for a chance to be featured in our lookbook!&lt;/p&gt;&#10;                `&#10;              }}&#10;            /&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;" />
              <option name="updatedContent" value="'use client'&#10;&#10;import FooterPageTemplate from '@/components/FooterPageTemplate'&#10;&#10;export default function LookbookPage() {&#10;  const fallbackContent = `&#10;    &lt;h2&gt;Southern Fashion &amp; Décor Lookbook&lt;/h2&gt;&#10;    &lt;p&gt;Discover the latest trends and styling inspiration from our curated collections.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Fashion Lookbook&lt;/h3&gt;&#10;    &lt;p&gt;Explore our seasonal fashion collections featuring the latest trends in clothing, accessories, and footwear. Our lookbook showcases how to style our pieces for different occasions and seasons.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Home Décor Inspiration&lt;/h3&gt;&#10;    &lt;p&gt;Get inspired with our home décor lookbook featuring beautifully styled spaces using our furniture and decorative items. See how our products can transform your living spaces.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Seasonal Collections&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;&lt;strong&gt;Spring/Summer:&lt;/strong&gt; Light fabrics, bright colors, and fresh home décor&lt;/li&gt;&#10;      &lt;li&gt;&lt;strong&gt;Fall/Winter:&lt;/strong&gt; Cozy textures, warm tones, and seasonal decorations&lt;/li&gt;&#10;      &lt;li&gt;&lt;strong&gt;Festival Collections:&lt;/strong&gt; Special occasion wear and festive décor&lt;/li&gt;&#10;      &lt;li&gt;&lt;strong&gt;Wedding Season:&lt;/strong&gt; Bridal and formal wear collections&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Styling Tips&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Mix and match different pieces from our collections&lt;/li&gt;&#10;      &lt;li&gt;Layer accessories to create unique looks&lt;/li&gt;&#10;      &lt;li&gt;Combine different textures and patterns in home décor&lt;/li&gt;&#10;      &lt;li&gt;Create focal points with statement pieces&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Get Featured&lt;/h3&gt;&#10;    &lt;p&gt;Share your styling creations using our products on social media with #SFDStyle for a chance to be featured in our lookbook!&lt;/p&gt;&#10;  `&#10;&#10;  return (&#10;    &lt;FooterPageTemplate &#10;      slug=&quot;lookbook&quot;&#10;      fallbackTitle=&quot;Lookbook&quot;&#10;      fallbackContent={fallbackContent}&#10;    /&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/privacy/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/privacy/page.tsx" />
              <option name="updatedContent" value="import FooterPageTemplate from '@/components/FooterPageTemplate'&#10;&#10;export default function PrivacyPage() {&#10;  const fallbackContent = `&#10;    &lt;h2&gt;Privacy Policy&lt;/h2&gt;&#10;    &lt;p&gt;At Southern Fashion &amp; Décor, we are committed to protecting your privacy and ensuring the security of your personal information.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Information We Collect&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Personal identification information (Name, email address, phone number)&lt;/li&gt;&#10;      &lt;li&gt;Billing and shipping addresses&lt;/li&gt;&#10;      &lt;li&gt;Payment information (processed securely through our payment partners)&lt;/li&gt;&#10;      &lt;li&gt;Website usage data and preferences&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;How We Use Your Information&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;To process and fulfill your orders&lt;/li&gt;&#10;      &lt;li&gt;To communicate with you about your orders and account&lt;/li&gt;&#10;      &lt;li&gt;To improve our products and services&lt;/li&gt;&#10;      &lt;li&gt;To send promotional emails (with your consent)&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Information Sharing&lt;/h3&gt;&#10;    &lt;p&gt;We do not sell, trade, or otherwise transfer your personal information to third parties without your consent, except as described in this policy.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Data Security&lt;/h3&gt;&#10;    &lt;p&gt;We implement appropriate security measures to protect your personal information against unauthorized access, alteration, disclosure, or destruction.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Contact Us&lt;/h3&gt;&#10;    &lt;p&gt;If you have any questions about this Privacy Policy, please contact us at privacy@sfdbd.com&lt;/p&gt;&#10;  `&#10;&#10;  return (&#10;    &lt;FooterPageTemplate &#10;      slug=&quot;privacy&quot;&#10;      fallbackTitle=&quot;Privacy Policy&quot;&#10;      fallbackContent={fallbackContent}&#10;    /&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/shipping/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/shipping/page.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import { useState, useEffect } from 'react'&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'&#10;&#10;export default function ShippingPage() {&#10;  const [content, setContent] = useState&lt;any&gt;(null)&#10;  const [loading, setLoading] = useState(true)&#10;&#10;  useEffect(() =&gt; {&#10;    fetchContent()&#10;  }, [])&#10;&#10;  const fetchContent = async () =&gt; {&#10;    try {&#10;      const response = await fetch('/api/footer')&#10;      if (response.ok) {&#10;        const data = await response.json()&#10;        const shippingContent = data.content.find((item: any) =&gt; item.slug === 'shipping')&#10;        setContent(shippingContent)&#10;      }&#10;    } catch (error) {&#10;      console.error('Error fetching content:', error)&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;container mx-auto px-4 py-12&quot;&gt;&#10;        &lt;Card className=&quot;max-w-4xl mx-auto&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;text-3xl font-bold text-center&quot;&gt;&#10;              {content?.title || 'BD Shipping'}&#10;            &lt;/CardTitle&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;prose max-w-none&quot;&gt;&#10;            &lt;div&#10;              dangerouslySetInnerHTML={{&#10;                __html: content?.content || `&#10;                  &lt;h2&gt;Bangladesh Shipping Information&lt;/h2&gt;&#10;                  &lt;p&gt;We provide reliable shipping services across Bangladesh through our trusted courier partners.&lt;/p&gt;&#10;                  &#10;                  &lt;h3&gt;Shipping Areas&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;&lt;strong&gt;Dhaka Metro:&lt;/strong&gt; Same day or next day delivery&lt;/li&gt;&#10;                    &lt;li&gt;&lt;strong&gt;Major Cities:&lt;/strong&gt; Chittagong, Sylhet, Rajshahi, Khulna, Barisal, Rangpur&lt;/li&gt;&#10;                    &lt;li&gt;&lt;strong&gt;District Cities:&lt;/strong&gt; All 64 district headquarters&lt;/li&gt;&#10;                    &lt;li&gt;&lt;strong&gt;Upazila Level:&lt;/strong&gt; Most upazila areas covered&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;Shipping Rates&lt;/h3&gt;&#10;                  &lt;table&gt;&#10;                    &lt;tr&gt;&lt;td&gt;Inside Dhaka&lt;/td&gt;&lt;td&gt;80 BDT&lt;/td&gt;&lt;/tr&gt;&#10;                    &lt;tr&gt;&lt;td&gt;Outside Dhaka (Major Cities)&lt;/td&gt;&lt;td&gt;120 BDT&lt;/td&gt;&lt;/tr&gt;&#10;                    &lt;tr&gt;&lt;td&gt;District/Upazila Areas&lt;/td&gt;&lt;td&gt;150 BDT&lt;/td&gt;&lt;/tr&gt;&#10;                    &lt;tr&gt;&lt;td&gt;Remote Areas&lt;/td&gt;&lt;td&gt;200 BDT&lt;/td&gt;&lt;/tr&gt;&#10;                  &lt;/table&gt;&#10;                  &#10;                  &lt;h3&gt;Free Shipping&lt;/h3&gt;&#10;                  &lt;p&gt;Enjoy free shipping on orders above 2000 BDT anywhere in Bangladesh!&lt;/p&gt;&#10;                  &#10;                  &lt;h3&gt;Delivery Partners&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Pathao Courier&lt;/li&gt;&#10;                    &lt;li&gt;RedX&lt;/li&gt;&#10;                    &lt;li&gt;Steadfast Courier&lt;/li&gt;&#10;                    &lt;li&gt;SA Paribahan&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                `&#10;              }}&#10;            /&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="'use client'&#10;&#10;import FooterPageTemplate from '@/components/FooterPageTemplate'&#10;&#10;export default function ShippingPage() {&#10;  const fallbackContent = `&#10;    &lt;h2&gt;Bangladesh Shipping Information&lt;/h2&gt;&#10;    &lt;p&gt;We provide reliable shipping services across Bangladesh through our trusted courier partners.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Shipping Areas&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;&lt;strong&gt;Dhaka Metro:&lt;/strong&gt; Same day or next day delivery&lt;/li&gt;&#10;      &lt;li&gt;&lt;strong&gt;Major Cities:&lt;/strong&gt; Chittagong, Sylhet, Rajshahi, Khulna, Barisal, Rangpur&lt;/li&gt;&#10;      &lt;li&gt;&lt;strong&gt;District Cities:&lt;/strong&gt; All 64 district headquarters&lt;/li&gt;&#10;      &lt;li&gt;&lt;strong&gt;Upazila Level:&lt;/strong&gt; Most upazila areas covered&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Shipping Rates&lt;/h3&gt;&#10;    &lt;table style=&quot;width: 100%; border-collapse: collapse; margin: 20px 0;&quot;&gt;&#10;      &lt;tr style=&quot;background-color: #f5f5f5;&quot;&gt;&#10;        &lt;td style=&quot;border: 1px solid #ddd; padding: 8px; font-weight: bold;&quot;&gt;Area&lt;/td&gt;&#10;        &lt;td style=&quot;border: 1px solid #ddd; padding: 8px; font-weight: bold;&quot;&gt;Cost&lt;/td&gt;&#10;      &lt;/tr&gt;&#10;      &lt;tr&gt;&#10;        &lt;td style=&quot;border: 1px solid #ddd; padding: 8px;&quot;&gt;Inside Dhaka&lt;/td&gt;&#10;        &lt;td style=&quot;border: 1px solid #ddd; padding: 8px;&quot;&gt;80 BDT&lt;/td&gt;&#10;      &lt;/tr&gt;&#10;      &lt;tr&gt;&#10;        &lt;td style=&quot;border: 1px solid #ddd; padding: 8px;&quot;&gt;Outside Dhaka (Major Cities)&lt;/td&gt;&#10;        &lt;td style=&quot;border: 1px solid #ddd; padding: 8px;&quot;&gt;120 BDT&lt;/td&gt;&#10;      &lt;/tr&gt;&#10;      &lt;tr&gt;&#10;        &lt;td style=&quot;border: 1px solid #ddd; padding: 8px;&quot;&gt;District/Upazila Areas&lt;/td&gt;&#10;        &lt;td style=&quot;border: 1px solid #ddd; padding: 8px;&quot;&gt;150 BDT&lt;/td&gt;&#10;      &lt;/tr&gt;&#10;      &lt;tr&gt;&#10;        &lt;td style=&quot;border: 1px solid #ddd; padding: 8px;&quot;&gt;Remote Areas&lt;/td&gt;&#10;        &lt;td style=&quot;border: 1px solid #ddd; padding: 8px;&quot;&gt;200 BDT&lt;/td&gt;&#10;      &lt;/tr&gt;&#10;    &lt;/table&gt;&#10;    &#10;    &lt;h3&gt;Free Shipping&lt;/h3&gt;&#10;    &lt;p&gt;Enjoy free shipping on orders above 2000 BDT anywhere in Bangladesh!&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Delivery Partners&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Pathao Courier&lt;/li&gt;&#10;      &lt;li&gt;RedX&lt;/li&gt;&#10;      &lt;li&gt;Steadfast Courier&lt;/li&gt;&#10;      &lt;li&gt;SA Paribahan&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;  `&#10;&#10;  return (&#10;    &lt;FooterPageTemplate &#10;      slug=&quot;shipping&quot;&#10;      fallbackTitle=&quot;BD Shipping&quot;&#10;      fallbackContent={fallbackContent}&#10;    /&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/showroom/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/showroom/page.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import { useState, useEffect } from 'react'&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'&#10;&#10;export default function ShowroomPage() {&#10;  const [content, setContent] = useState&lt;any&gt;(null)&#10;  const [loading, setLoading] = useState(true)&#10;&#10;  useEffect(() =&gt; {&#10;    fetchContent()&#10;  }, [])&#10;&#10;  const fetchContent = async () =&gt; {&#10;    try {&#10;      const response = await fetch('/api/footer')&#10;      if (response.ok) {&#10;        const data = await response.json()&#10;        const showroomContent = data.content.find((item: any) =&gt; item.slug === 'showroom')&#10;        setContent(showroomContent)&#10;      }&#10;    } catch (error) {&#10;      console.error('Error fetching content:', error)&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;container mx-auto px-4 py-12&quot;&gt;&#10;        &lt;Card className=&quot;max-w-4xl mx-auto&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;text-3xl font-bold text-center&quot;&gt;&#10;              {content?.title || 'Visit Our Showroom'}&#10;            &lt;/CardTitle&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;prose max-w-none&quot;&gt;&#10;            &lt;div &#10;              dangerouslySetInnerHTML={{ &#10;                __html: content?.content || `&#10;                  &lt;h2&gt;Southern Fashion &amp; Décor Showroom&lt;/h2&gt;&#10;                  &lt;p&gt;Experience our complete collection in person at our beautiful showroom in Dhaka.&lt;/p&gt;&#10;                  &#10;                  &lt;h3&gt;Showroom Location&lt;/h3&gt;&#10;                  &lt;p&gt;&lt;strong&gt;Address:&lt;/strong&gt; House #123, Road #15, Block C, Bashundhara R/A, Dhaka-1229&lt;/p&gt;&#10;                  &lt;p&gt;&lt;strong&gt;Phone:&lt;/strong&gt; +880 1711 123456&lt;/p&gt;&#10;                  &lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; showroom@sfdbd.com&lt;/p&gt;&#10;                  &#10;                  &lt;h3&gt;Opening Hours&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;&lt;strong&gt;Saturday - Thursday:&lt;/strong&gt; 10:00 AM - 9:00 PM&lt;/li&gt;&#10;                    &lt;li&gt;&lt;strong&gt;Friday:&lt;/strong&gt; 2:00 PM - 9:00 PM&lt;/li&gt;&#10;                    &lt;li&gt;&lt;strong&gt;Public Holidays:&lt;/strong&gt; 4:00 PM - 9:00 PM&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;What to Expect&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Browse our complete fashion and décor collections&lt;/li&gt;&#10;                    &lt;li&gt;Touch and feel product quality before purchasing&lt;/li&gt;&#10;                    &lt;li&gt;Get personalized styling advice from our experts&lt;/li&gt;&#10;                    &lt;li&gt;Enjoy exclusive showroom-only deals and discounts&lt;/li&gt;&#10;                    &lt;li&gt;Free parking available&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;Special Services&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Personal shopping appointments&lt;/li&gt;&#10;                    &lt;li&gt;Home décor consultation&lt;/li&gt;&#10;                    &lt;li&gt;Bulk order processing&lt;/li&gt;&#10;                    &lt;li&gt;Custom design requests&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;Directions&lt;/h3&gt;&#10;                  &lt;p&gt;Located in the heart of Bashundhara R/A, our showroom is easily accessible by public transport and private vehicles. Detailed directions available upon request.&lt;/p&gt;&#10;                `&#10;              }}&#10;            /&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="'use client'&#10;&#10;import FooterPageTemplate from '@/components/FooterPageTemplate'&#10;&#10;export default function ShowroomPage() {&#10;  const fallbackContent = `&#10;    &lt;h2&gt;Southern Fashion &amp; Décor Showroom&lt;/h2&gt;&#10;    &lt;p&gt;Experience our complete collection in person at our beautiful showroom in Dhaka.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Showroom Location&lt;/h3&gt;&#10;    &lt;p&gt;&lt;strong&gt;Address:&lt;/strong&gt; House #123, Road #15, Block C, Bashundhara R/A, Dhaka-1229&lt;/p&gt;&#10;    &lt;p&gt;&lt;strong&gt;Phone:&lt;/strong&gt; +880 1711 123456&lt;/p&gt;&#10;    &lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; showroom@sfdbd.com&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Opening Hours&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;&lt;strong&gt;Saturday - Thursday:&lt;/strong&gt; 10:00 AM - 9:00 PM&lt;/li&gt;&#10;      &lt;li&gt;&lt;strong&gt;Friday:&lt;/strong&gt; 2:00 PM - 9:00 PM&lt;/li&gt;&#10;      &lt;li&gt;&lt;strong&gt;Public Holidays:&lt;/strong&gt; 4:00 PM - 9:00 PM&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;What to Expect&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Browse our complete fashion and décor collections&lt;/li&gt;&#10;      &lt;li&gt;Touch and feel product quality before purchasing&lt;/li&gt;&#10;      &lt;li&gt;Get personalized styling advice from our experts&lt;/li&gt;&#10;      &lt;li&gt;Enjoy exclusive showroom-only deals and discounts&lt;/li&gt;&#10;      &lt;li&gt;Free parking available&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Special Services&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Personal shopping appointments&lt;/li&gt;&#10;      &lt;li&gt;Home décor consultation&lt;/li&gt;&#10;      &lt;li&gt;Bulk order processing&lt;/li&gt;&#10;      &lt;li&gt;Custom design requests&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Directions&lt;/h3&gt;&#10;    &lt;p&gt;Located in the heart of Bashundhara R/A, our showroom is easily accessible by public transport and private vehicles. Detailed directions available upon request.&lt;/p&gt;&#10;  `&#10;&#10;  return (&#10;    &lt;FooterPageTemplate &#10;      slug=&quot;showroom&quot;&#10;      fallbackTitle=&quot;Visit Our Showroom&quot;&#10;      fallbackContent={fallbackContent}&#10;    /&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/sustainability/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/sustainability/page.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import { useState, useEffect } from 'react'&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'&#10;&#10;export default function SustainabilityPage() {&#10;  const [content, setContent] = useState&lt;any&gt;(null)&#10;  const [loading, setLoading] = useState(true)&#10;&#10;  useEffect(() =&gt; {&#10;    fetchContent()&#10;  }, [])&#10;&#10;  const fetchContent = async () =&gt; {&#10;    try {&#10;      const response = await fetch('/api/footer')&#10;      if (response.ok) {&#10;        const data = await response.json()&#10;        const sustainabilityContent = data.content.find((item: any) =&gt; item.slug === 'sustainability')&#10;        setContent(sustainabilityContent)&#10;      }&#10;    } catch (error) {&#10;      console.error('Error fetching content:', error)&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;container mx-auto px-4 py-12&quot;&gt;&#10;        &lt;Card className=&quot;max-w-4xl mx-auto&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;text-3xl font-bold text-center&quot;&gt;&#10;              {content?.title || 'Sustainability Mission'}&#10;            &lt;/CardTitle&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;prose max-w-none&quot;&gt;&#10;            &lt;div&#10;              dangerouslySetInnerHTML={{&#10;                __html: content?.content || `&#10;                  &lt;h2&gt;Our Sustainability Mission&lt;/h2&gt;&#10;                  &lt;p&gt;At Southern Fashion &amp; Décor, we are committed to building a sustainable future through responsible business practices and environmental stewardship.&lt;/p&gt;&#10;                  &#10;                  &lt;h3&gt;Sustainable Materials&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Prioritizing eco-friendly and renewable materials&lt;/li&gt;&#10;                    &lt;li&gt;Using organic cotton and sustainable fabrics&lt;/li&gt;&#10;                    &lt;li&gt;Sourcing recycled and upcycled materials&lt;/li&gt;&#10;                    &lt;li&gt;Supporting sustainable wood and bamboo products&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;Eco-Friendly Production&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Implementing energy-efficient manufacturing processes&lt;/li&gt;&#10;                    &lt;li&gt;Reducing water consumption and waste&lt;/li&gt;&#10;                    &lt;li&gt;Using non-toxic dyes and chemicals&lt;/li&gt;&#10;                    &lt;li&gt;Minimizing carbon footprint in production&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;Sustainable Packaging&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Using biodegradable and recyclable packaging materials&lt;/li&gt;&#10;                    &lt;li&gt;Minimizing packaging waste&lt;/li&gt;&#10;                    &lt;li&gt;Encouraging customers to reuse and recycle&lt;/li&gt;&#10;                    &lt;li&gt;Eliminating single-use plastics where possible&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;Circular Economy&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Designing products for longevity and durability&lt;/li&gt;&#10;                    &lt;li&gt;Offering repair and refurbishment services&lt;/li&gt;&#10;                    &lt;li&gt;Implementing take-back programs for end-of-life products&lt;/li&gt;&#10;                    &lt;li&gt;Promoting upcycling and creative reuse&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;Environmental Initiatives&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Tree planting and reforestation programs&lt;/li&gt;&#10;                    &lt;li&gt;Supporting renewable energy projects&lt;/li&gt;&#10;                    &lt;li&gt;Participating in environmental awareness campaigns&lt;/li&gt;&#10;                    &lt;li&gt;Partnering with environmental organizations&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;Our Goals&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Achieve carbon neutrality by 2030&lt;/li&gt;&#10;                    &lt;li&gt;Use 100% sustainable materials by 2028&lt;/li&gt;&#10;                    &lt;li&gt;Zero waste to landfill by 2027&lt;/li&gt;&#10;                    &lt;li&gt;Support 1000+ local artisans and sustainable producers&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;Join Our Mission&lt;/h3&gt;&#10;                  &lt;p&gt;We invite our customers to join us in this sustainability journey. Choose eco-friendly products, practice conscious consumption, and help us build a better future for generations to come.&lt;/p&gt;&#10;                `&#10;              }}&#10;            /&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="'use client'&#10;&#10;import FooterPageTemplate from '@/components/FooterPageTemplate'&#10;&#10;export default function SustainabilityPage() {&#10;  const fallbackContent = `&#10;    &lt;h2&gt;Our Sustainability Mission&lt;/h2&gt;&#10;    &lt;p&gt;At Southern Fashion &amp; Décor, we are committed to building a sustainable future through responsible business practices and environmental stewardship.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Sustainable Materials&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Prioritizing eco-friendly and renewable materials&lt;/li&gt;&#10;      &lt;li&gt;Using organic cotton and sustainable fabrics&lt;/li&gt;&#10;      &lt;li&gt;Sourcing recycled and upcycled materials&lt;/li&gt;&#10;      &lt;li&gt;Supporting sustainable wood and bamboo products&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Eco-Friendly Production&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Implementing energy-efficient manufacturing processes&lt;/li&gt;&#10;      &lt;li&gt;Reducing water consumption and waste&lt;/li&gt;&#10;      &lt;li&gt;Using non-toxic dyes and chemicals&lt;/li&gt;&#10;      &lt;li&gt;Minimizing carbon footprint in production&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Sustainable Packaging&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Using biodegradable and recyclable packaging materials&lt;/li&gt;&#10;      &lt;li&gt;Minimizing packaging waste&lt;/li&gt;&#10;      &lt;li&gt;Encouraging customers to reuse and recycle&lt;/li&gt;&#10;      &lt;li&gt;Eliminating single-use plastics where possible&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Circular Economy&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Designing products for longevity and durability&lt;/li&gt;&#10;      &lt;li&gt;Offering repair and refurbishment services&lt;/li&gt;&#10;      &lt;li&gt;Implementing take-back programs for end-of-life products&lt;/li&gt;&#10;      &lt;li&gt;Promoting upcycling and creative reuse&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Environmental Initiatives&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Tree planting and reforestation programs&lt;/li&gt;&#10;      &lt;li&gt;Supporting renewable energy projects&lt;/li&gt;&#10;      &lt;li&gt;Participating in environmental awareness campaigns&lt;/li&gt;&#10;      &lt;li&gt;Partnering with environmental organizations&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Our Goals&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Achieve carbon neutrality by 2030&lt;/li&gt;&#10;      &lt;li&gt;Use 100% sustainable materials by 2028&lt;/li&gt;&#10;      &lt;li&gt;Zero waste to landfill by 2027&lt;/li&gt;&#10;      &lt;li&gt;Support 1000+ local artisans and sustainable producers&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Join Our Mission&lt;/h3&gt;&#10;    &lt;p&gt;We invite our customers to join us in this sustainability journey. Choose eco-friendly products, practice conscious consumption, and help us build a better future for generations to come.&lt;/p&gt;&#10;  `&#10;&#10;  return (&#10;    &lt;FooterPageTemplate &#10;      slug=&quot;sustainability&quot;&#10;      fallbackTitle=&quot;Sustainability Mission&quot;&#10;      fallbackContent={fallbackContent}&#10;    /&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/terms/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/terms/page.tsx" />
              <option name="updatedContent" value="import FooterPageTemplate from '@/components/FooterPageTemplate'&#10;&#10;export default function TermsPage() {&#10;  const fallbackContent = `&#10;    &lt;h2&gt;Terms and Conditions&lt;/h2&gt;&#10;    &lt;p&gt;Welcome to Southern Fashion &amp; Décor. These terms and conditions outline the rules and regulations for the use of our website and services.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;1. Acceptance of Terms&lt;/h3&gt;&#10;    &lt;p&gt;By accessing and using this website, you accept and agree to be bound by the terms and provision of this agreement.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;2. Product Information&lt;/h3&gt;&#10;    &lt;p&gt;We strive to provide accurate product descriptions and images. However, slight variations in color and design may occur due to photographic lighting and monitor settings.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;3. Orders and Payment&lt;/h3&gt;&#10;    &lt;p&gt;All orders are subject to acceptance and availability. Payment must be made in full before dispatch of goods.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;4. Returns and Refunds&lt;/h3&gt;&#10;    &lt;p&gt;Returns are accepted within 7 days of delivery for unused items in original packaging. Refunds will be processed within 7-10 business days.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;5. Limitation of Liability&lt;/h3&gt;&#10;    &lt;p&gt;Southern Fashion &amp; Décor shall not be liable for any direct, indirect, or consequential damages arising from the use of our products or services.&lt;/p&gt;&#10;  `&#10;&#10;  return (&#10;    &lt;FooterPageTemplate &#10;      slug=&quot;terms&quot;&#10;      fallbackTitle=&quot;Terms &amp; Conditions&quot;&#10;      fallbackContent={fallbackContent}&#10;    /&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/trade-shows/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/trade-shows/page.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import { useState, useEffect } from 'react'&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'&#10;&#10;export default function TradeShowsPage() {&#10;  const [content, setContent] = useState&lt;any&gt;(null)&#10;  const [loading, setLoading] = useState(true)&#10;&#10;  useEffect(() =&gt; {&#10;    fetchContent()&#10;  }, [])&#10;&#10;  const fetchContent = async () =&gt; {&#10;    try {&#10;      const response = await fetch('/api/footer')&#10;      if (response.ok) {&#10;        const data = await response.json()&#10;        const tradeShowsContent = data.content.find((item: any) =&gt; item.slug === 'trade-shows')&#10;        setContent(tradeShowsContent)&#10;      }&#10;    } catch (error) {&#10;      console.error('Error fetching content:', error)&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;container mx-auto px-4 py-12&quot;&gt;&#10;        &lt;Card className=&quot;max-w-4xl mx-auto&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;text-3xl font-bold text-center&quot;&gt;&#10;              {content?.title || 'Trade Shows'}&#10;            &lt;/CardTitle&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;prose max-w-none&quot;&gt;&#10;            &lt;div&#10;              dangerouslySetInnerHTML={{&#10;                __html: content?.content || `&#10;                  &lt;h2&gt;Trade Shows &amp; Exhibitions&lt;/h2&gt;&#10;                  &lt;p&gt;Southern Fashion &amp; Décor actively participates in major trade shows and exhibitions across Bangladesh and internationally.&lt;/p&gt;&#10;                  &#10;                  &lt;h3&gt;Upcoming Events&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;&lt;strong&gt;Dhaka International Trade Fair 2024:&lt;/strong&gt; January 1-31, 2024&lt;/li&gt;&#10;                    &lt;li&gt;&lt;strong&gt;Bangladesh Home &amp; Lifestyle Expo:&lt;/strong&gt; March 15-18, 2024&lt;/li&gt;&#10;                    &lt;li&gt;&lt;strong&gt;Fashion Week Dhaka:&lt;/strong&gt; April 10-12, 2024&lt;/li&gt;&#10;                    &lt;li&gt;&lt;strong&gt;International Furniture Fair:&lt;/strong&gt; June 5-8, 2024&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;What to Expect&lt;/h3&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Preview of new collections before market launch&lt;/li&gt;&#10;                    &lt;li&gt;Exclusive trade show discounts and offers&lt;/li&gt;&#10;                    &lt;li&gt;Meet our design team and product experts&lt;/li&gt;&#10;                    &lt;li&gt;Wholesale pricing and bulk order opportunities&lt;/li&gt;&#10;                    &lt;li&gt;Networking with industry professionals&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;For Retailers &amp; Wholesalers&lt;/h3&gt;&#10;                  &lt;p&gt;Join us at trade shows to explore wholesale opportunities, establish partnerships, and discover our complete product range. Schedule a meeting with our sales team to discuss:&lt;/p&gt;&#10;                  &lt;ul&gt;&#10;                    &lt;li&gt;Wholesale pricing structures&lt;/li&gt;&#10;                    &lt;li&gt;Minimum order quantities&lt;/li&gt;&#10;                    &lt;li&gt;Seasonal collections and pre-orders&lt;/li&gt;&#10;                    &lt;li&gt;Custom design and private labeling&lt;/li&gt;&#10;                  &lt;/ul&gt;&#10;                  &#10;                  &lt;h3&gt;Contact for Trade Shows&lt;/h3&gt;&#10;                  &lt;p&gt;&lt;strong&gt;Trade Relations:&lt;/strong&gt; trade@sfdbd.com&lt;/p&gt;&#10;                  &lt;p&gt;&lt;strong&gt;Phone:&lt;/strong&gt; +880 1711 654321&lt;/p&gt;&#10;                  &#10;                  &lt;h3&gt;Past Participations&lt;/h3&gt;&#10;                  &lt;p&gt;We have successfully participated in numerous trade shows across South Asia, building strong relationships with retailers, wholesalers, and industry partners.&lt;/p&gt;&#10;                `&#10;              }}&#10;            /&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="'use client'&#10;&#10;import FooterPageTemplate from '@/components/FooterPageTemplate'&#10;&#10;export default function TradeShowsPage() {&#10;  const fallbackContent = `&#10;    &lt;h2&gt;Trade Shows &amp; Exhibitions&lt;/h2&gt;&#10;    &lt;p&gt;Southern Fashion &amp; Décor actively participates in major trade shows and exhibitions across Bangladesh and internationally.&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Upcoming Events&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;&lt;strong&gt;Dhaka International Trade Fair 2024:&lt;/strong&gt; January 1-31, 2024&lt;/li&gt;&#10;      &lt;li&gt;&lt;strong&gt;Bangladesh Home &amp; Lifestyle Expo:&lt;/strong&gt; March 15-18, 2024&lt;/li&gt;&#10;      &lt;li&gt;&lt;strong&gt;Fashion Week Dhaka:&lt;/strong&gt; April 10-12, 2024&lt;/li&gt;&#10;      &lt;li&gt;&lt;strong&gt;International Furniture Fair:&lt;/strong&gt; June 5-8, 2024&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;What to Expect&lt;/h3&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Preview of new collections before market launch&lt;/li&gt;&#10;      &lt;li&gt;Exclusive trade show discounts and offers&lt;/li&gt;&#10;      &lt;li&gt;Meet our design team and product experts&lt;/li&gt;&#10;      &lt;li&gt;Wholesale pricing and bulk order opportunities&lt;/li&gt;&#10;      &lt;li&gt;Networking with industry professionals&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;For Retailers &amp; Wholesalers&lt;/h3&gt;&#10;    &lt;p&gt;Join us at trade shows to explore wholesale opportunities, establish partnerships, and discover our complete product range. Schedule a meeting with our sales team to discuss:&lt;/p&gt;&#10;    &lt;ul&gt;&#10;      &lt;li&gt;Wholesale pricing structures&lt;/li&gt;&#10;      &lt;li&gt;Minimum order quantities&lt;/li&gt;&#10;      &lt;li&gt;Seasonal collections and pre-orders&lt;/li&gt;&#10;      &lt;li&gt;Custom design and private labeling&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &#10;    &lt;h3&gt;Contact for Trade Shows&lt;/h3&gt;&#10;    &lt;p&gt;&lt;strong&gt;Trade Relations:&lt;/strong&gt; trade@sfdbd.com&lt;/p&gt;&#10;    &lt;p&gt;&lt;strong&gt;Phone:&lt;/strong&gt; +880 1711 654321&lt;/p&gt;&#10;    &#10;    &lt;h3&gt;Past Participations&lt;/h3&gt;&#10;    &lt;p&gt;We have successfully participated in numerous trade shows across South Asia, building strong relationships with retailers, wholesalers, and industry partners.&lt;/p&gt;&#10;  `&#10;&#10;  return (&#10;    &lt;FooterPageTemplate &#10;      slug=&quot;trade-shows&quot;&#10;      fallbackTitle=&quot;Trade Shows&quot;&#10;      fallbackContent={fallbackContent}&#10;    /&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/FooterPageTemplate.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/FooterPageTemplate.tsx" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="'use client'&#10;&#10;import { useState, useEffect } from 'react'&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'&#10;import { Button } from '@/components/ui/button'&#10;import { useRouter } from 'next/navigation'&#10;import { ArrowLeft } from 'lucide-react'&#10;&#10;interface FooterPageProps {&#10;  slug: string&#10;  fallbackTitle: string&#10;  fallbackContent: string&#10;}&#10;&#10;export default function FooterPageTemplate({ slug, fallbackTitle, fallbackContent }: FooterPageProps) {&#10;  const router = useRouter()&#10;  const [content, setContent] = useState&lt;any&gt;(null)&#10;  const [loading, setLoading] = useState(true)&#10;&#10;  useEffect(() =&gt; {&#10;    fetchContent()&#10;  }, [slug])&#10;&#10;  const fetchContent = async () =&gt; {&#10;    try {&#10;      const response = await fetch('/api/footer')&#10;      if (response.ok) {&#10;        const data = await response.json()&#10;        const pageContent = data.content.find((item: any) =&gt; item.slug === slug &amp;&amp; item.isActive)&#10;        setContent(pageContent)&#10;      }&#10;    } catch (error) {&#10;      console.error('Error fetching content:', error)&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;container mx-auto px-4 py-12&quot;&gt;&#10;        {/* Back Button */}&#10;        &lt;div className=&quot;mb-6&quot;&gt;&#10;          &lt;Button&#10;            variant=&quot;outline&quot;&#10;            onClick={() =&gt; router.back()}&#10;            className=&quot;flex items-center gap-2&quot;&#10;          &gt;&#10;            &lt;ArrowLeft className=&quot;h-4 w-4&quot; /&gt;&#10;            Back&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;Card className=&quot;max-w-4xl mx-auto&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;text-3xl font-bold text-center&quot;&gt;&#10;              {content?.title || fallbackTitle}&#10;            &lt;/CardTitle&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;prose max-w-none&quot;&gt;&#10;            &lt;div&#10;              dangerouslySetInnerHTML={{&#10;                __html: content?.content || fallbackContent&#10;              }}&#10;            /&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/cart-sidebar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/cart-sidebar.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import { X, Plus, Minus, ShoppingBag } from &quot;lucide-react&quot;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { useStore } from &quot;@/lib/store&quot;&#10;import Image from &quot;next/image&quot;&#10;import { useRouter } from &quot;next/navigation&quot;&#10;&#10;export function CartSidebar() {&#10;  const router = useRouter()&#10;  const { cart, isCartOpen, setCartOpen, updateQuantity, removeFromCart, getCartTotal, getCartItemCount } = useStore()&#10;&#10;  if (!isCartOpen) return null&#10;&#10;  return (&#10;    &lt;&gt;&#10;      {/* Overlay */}&#10;      &lt;div className=&quot;fixed inset-0 bg-black/50 z-50&quot; onClick={() =&gt; setCartOpen(false)} /&gt;&#10;&#10;      {/* Sidebar */}&#10;      &lt;div className=&quot;fixed right-0 top-0 h-full w-full sm:w-96 bg-white shadow-2xl z-50 flex flex-col&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;flex items-center justify-between p-4 border-b bg-[#FFA000] text-white&quot;&gt;&#10;          &lt;h2 className=&quot;text-base md:text-lg font-bold&quot;&gt;Shopping Cart ({getCartItemCount()})&lt;/h2&gt;&#10;          &lt;Button&#10;            variant=&quot;ghost&quot;&#10;            size=&quot;sm&quot;&#10;            onClick={() =&gt; setCartOpen(false)}&#10;            className=&quot;text-white hover:bg-[#E68900] rounded-full&quot;&#10;          &gt;&#10;            &lt;X className=&quot;w-4 h-4&quot; /&gt;&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Cart Items */}&#10;        &lt;div className=&quot;flex-1 overflow-y-auto p-4 bg-gray-50&quot;&gt;&#10;          {cart.length === 0 ? (&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#10;              &lt;ShoppingBag className=&quot;w-12 h-12 text-gray-300 mx-auto mb-4&quot; /&gt;&#10;              &lt;p className=&quot;text-gray-500&quot;&gt;Your cart is empty&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#10;              {cart.map((item) =&gt; (&#10;                &lt;div key={item.product.id} className=&quot;flex gap-3 p-3 bg-white border rounded-xl shadow-md&quot;&gt;&#10;                  &lt;Image&#10;                    src={item.product.image || &quot;/placeholder.svg&quot;}&#10;                    alt={item.product.name}&#10;                    width={60}&#10;                    height={60}&#10;                    className=&quot;rounded-lg flex-shrink-0&quot;&#10;                  /&gt;&#10;                  &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                    &lt;h3 className=&quot;text-sm font-semibold truncate text-gray-800&quot;&gt;{item.product.name}&lt;/h3&gt;&#10;                    &lt;p className=&quot;text-sm text-blue-600 font-bold&quot;&gt;৳{item.product.price.toFixed(0)}&lt;/p&gt;&#10;                    &lt;div className=&quot;flex items-center gap-2 mt-2&quot;&gt;&#10;                      &lt;Button&#10;                        variant=&quot;outline&quot;&#10;                        size=&quot;sm&quot;&#10;                        onClick={() =&gt; {&#10;                          const newQuantity = item.quantity - 1&#10;                          if (newQuantity &gt; 0) {&#10;                            updateQuantity(item.product.id, newQuantity)&#10;                          } else {&#10;                            removeFromCart(item.product.id)&#10;                          }&#10;                        }}&#10;                        className=&quot;h-6 w-6 p-0 border-[#FFA000] text-[#FFA000] hover:bg-[#FFF8E1]&quot;&#10;                        disabled={item.quantity &lt;= 1}&#10;                      &gt;&#10;                        &lt;Minus className=&quot;w-3 h-3&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                      &lt;span className=&quot;text-sm w-8 text-center font-semibold&quot;&gt;{item.quantity}&lt;/span&gt;&#10;                      &lt;Button&#10;                        variant=&quot;outline&quot;&#10;                        size=&quot;sm&quot;&#10;                        onClick={() =&gt; updateQuantity(item.product.id, item.quantity + 1)}&#10;                        className=&quot;h-6 w-6 p-0 border-[#FFA000] text-[#FFA000] hover:bg-[#FFF8E1]&quot;&#10;                      &gt;&#10;                        &lt;Plus className=&quot;w-3 h-3&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                      &lt;Button&#10;                        variant=&quot;ghost&quot;&#10;                        size=&quot;sm&quot;&#10;                        onClick={() =&gt; removeFromCart(item.product.id)}&#10;                        className=&quot;ml-auto text-red-500 hover:bg-red-50 h-6 w-6 p-0&quot;&#10;                      &gt;&#10;                        &lt;X className=&quot;w-3 h-3&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Footer */}&#10;        {cart.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;border-t p-4 space-y-4 bg-white&quot;&gt;&#10;            &lt;div className=&quot;flex justify-between text-lg font-bold text-gray-800&quot;&gt;&#10;              &lt;span&gt;Total:&lt;/span&gt;&#10;              &lt;span className=&quot;text-[hsl(var(--primary))]&quot;&gt;৳{getCartTotal().toFixed(0)}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;Button&#10;              className=&quot;w-full bg-[hsl(var(--primary))] hover:bg-[hsl(var(--primary))] text-white font-semibold shadow-lg&quot;&#10;              onClick={() =&gt; {&#10;                setCartOpen(false)&#10;                router.push('/checkout')&#10;              }}&#10;            &gt;&#10;              Proceed to Checkout&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import { X, Plus, Minus, ShoppingBag } from &quot;lucide-react&quot;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { useStore } from &quot;@/lib/store&quot;&#10;import Image from &quot;next/image&quot;&#10;import { useRouter } from &quot;next/navigation&quot;&#10;&#10;export function CartSidebar() {&#10;  const router = useRouter()&#10;  const { cart, isCartOpen, setCartOpen, updateQuantity, removeFromCart, getCartTotal, getCartItemCount } = useStore()&#10;&#10;  if (!isCartOpen) return null&#10;&#10;  return (&#10;    &lt;&gt;&#10;      {/* Overlay */}&#10;      &lt;div className=&quot;fixed inset-0 bg-black/50 z-50&quot; onClick={() =&gt; setCartOpen(false)} /&gt;&#10;&#10;      {/* Sidebar */}&#10;      &lt;div className=&quot;fixed right-0 top-0 h-full w-full sm:w-96 bg-white shadow-2xl z-50 flex flex-col&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;flex items-center justify-between p-4 border-b bg-[#FFA000] text-white&quot;&gt;&#10;          &lt;h2 className=&quot;text-base md:text-lg font-bold&quot;&gt;Shopping Cart ({getCartItemCount()})&lt;/h2&gt;&#10;          &lt;Button&#10;            variant=&quot;ghost&quot;&#10;            size=&quot;sm&quot;&#10;            onClick={() =&gt; setCartOpen(false)}&#10;            className=&quot;text-white hover:bg-[#E68900] rounded-full&quot;&#10;          &gt;&#10;            &lt;X className=&quot;w-4 h-4&quot; /&gt;&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Cart Items */}&#10;        &lt;div className=&quot;flex-1 overflow-y-auto p-4 bg-gray-50&quot;&gt;&#10;          {cart.length === 0 ? (&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#10;              &lt;ShoppingBag className=&quot;w-12 h-12 text-gray-300 mx-auto mb-4&quot; /&gt;&#10;              &lt;p className=&quot;text-gray-500&quot;&gt;Your cart is empty&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;space-y-4&quot;&gt;&#10;              {cart.map((item) =&gt; {&#10;                // --- Consistent image logic as product page ---&#10;                let imageUrl = '/placeholder.svg';&#10;                const img = (item.product as any).images;&#10;                if (Array.isArray(img) &amp;&amp; img.length &gt; 0) {&#10;                  imageUrl = img[0];&#10;                } else if (typeof img === 'string') {&#10;                  try {&#10;                    const parsed = JSON.parse(img);&#10;                    if (Array.isArray(parsed) &amp;&amp; parsed.length &gt; 0) imageUrl = parsed[0];&#10;                  } catch {&#10;                    const csvSplit = img.split(',').map((s) =&gt; s.trim()).filter(Boolean);&#10;                    if (csvSplit.length &gt; 0) imageUrl = csvSplit[0];&#10;                  }&#10;                } else if (item.product.image) {&#10;                  imageUrl = item.product.image;&#10;                }&#10;                return (&#10;                  &lt;div key={item.product.id} className=&quot;flex gap-3 p-3 bg-white border rounded-xl shadow-md&quot;&gt;&#10;                    &lt;Image&#10;                      src={imageUrl}&#10;                      alt={item.product.name}&#10;                      width={60}&#10;                      height={60}&#10;                      className=&quot;rounded-lg flex-shrink-0&quot;&#10;                    /&gt;&#10;                    &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                      &lt;h3 className=&quot;text-sm font-semibold truncate text-gray-800&quot;&gt;{item.product.name}&lt;/h3&gt;&#10;                      &lt;p className=&quot;text-sm text-blue-600 font-bold&quot;&gt;৳{item.product.price.toFixed(0)}&lt;/p&gt;&#10;                      &lt;div className=&quot;flex items-center gap-2 mt-2&quot;&gt;&#10;                        &lt;Button&#10;                          variant=&quot;outline&quot;&#10;                          size=&quot;sm&quot;&#10;                          onClick={() =&gt; {&#10;                            const newQuantity = item.quantity - 1&#10;                            if (newQuantity &gt; 0) {&#10;                              updateQuantity(item.product.id, newQuantity)&#10;                            } else {&#10;                              removeFromCart(item.product.id)&#10;                            }&#10;                          }}&#10;                          className=&quot;h-6 w-6 p-0 border-[#FFA000] text-[#FFA000] hover:bg-[#FFF8E1]&quot;&#10;                          disabled={item.quantity &lt;= 1}&#10;                        &gt;&#10;                          &lt;Minus className=&quot;w-3 h-3&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                        &lt;span className=&quot;text-sm w-8 text-center font-semibold&quot;&gt;{item.quantity}&lt;/span&gt;&#10;                        &lt;Button&#10;                          variant=&quot;outline&quot;&#10;                          size=&quot;sm&quot;&#10;                          onClick={() =&gt; updateQuantity(item.product.id, item.quantity + 1)}&#10;                          className=&quot;h-6 w-6 p-0 border-[#FFA000] text-[#FFA000] hover:bg-[#FFF8E1]&quot;&#10;                        &gt;&#10;                          &lt;Plus className=&quot;w-3 h-3&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                        &lt;Button&#10;                          variant=&quot;ghost&quot;&#10;                          size=&quot;sm&quot;&#10;                          onClick={() =&gt; removeFromCart(item.product.id)}&#10;                          className=&quot;ml-auto text-red-500 hover:bg-red-50 h-6 w-6 p-0&quot;&#10;                        &gt;&#10;                          &lt;X className=&quot;w-3 h-3&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                );&#10;              })}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Footer */}&#10;        {cart.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;border-t p-4 space-y-4 bg-white&quot;&gt;&#10;            &lt;div className=&quot;flex justify-between text-lg font-bold text-gray-800&quot;&gt;&#10;              &lt;span&gt;Total:&lt;/span&gt;&#10;              &lt;span className=&quot;text-[hsl(var(--primary))]&quot;&gt;৳{getCartTotal().toFixed(0)}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;Button&#10;              className=&quot;w-full bg-[hsl(var(--primary))] hover:bg-[hsl(var(--primary))] text-white font-semibold shadow-lg&quot;&#10;              onClick={() =&gt; {&#10;                setCartOpen(false)&#10;                router.push('/checkout')&#10;              }}&#10;            &gt;&#10;              Proceed to Checkout&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-orders.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-orders.js" />
              <option name="originalContent" value="const { PrismaClient } = require('@prisma/client');&#10;&#10;const prisma = new PrismaClient();&#10;&#10;async function debugOrders() {&#10;  try {&#10;    console.log('=== Debugging Order Statistics ===\n');&#10;    &#10;    // Get all orders with their status and amounts&#10;    const allOrders = await prisma.order.findMany({&#10;      select: {&#10;        id: true,&#10;        orderNumber: true,&#10;        status: true,&#10;        paymentStatus: true,&#10;        totalAmount: true,&#10;        createdAt: true&#10;      },&#10;      orderBy: { createdAt: 'desc' }&#10;    });&#10;    &#10;    console.log('All Orders:');&#10;" />
              <option name="updatedContent" value="const { PrismaClient } = require('@prisma/client');&#10;&#10;const prisma = new PrismaClient();&#10;&#10;async function debugOrders() {&#10;  try {&#10;    console.log('=== Debugging Order Statistics ===\n');&#10;    &#10;    // Get all orders with their status and amounts&#10;    const allOrders = await prisma.order.findMany({&#10;      select: {&#10;        id: true,&#10;        orderNumber: true,&#10;        status: true,&#10;        paymentStatus: true,&#10;        totalAmount: true,&#10;        createdAt: true&#10;      },&#10;      orderBy: { createdAt: 'desc' }&#10;    });&#10;    &#10;    console.log('All Orders:');&#10;    console.log(`Total found: ${allOrders.length}`);&#10;    allOrders.forEach(order =&gt; {&#10;      console.log(`- Order ${order.orderNumber}: Status=${order.status}, Payment=${order.paymentStatus}, Amount=৳${order.totalAmount}, Date=${order.createdAt.toLocaleDateString()}`);&#10;    });&#10;    &#10;    console.log('\n=== Statistics ===');&#10;    &#10;    // Count by status&#10;    const statusCounts = await prisma.order.groupBy({&#10;      by: ['status'],&#10;      _count: { status: true },&#10;      _sum: { totalAmount: true }&#10;    });&#10;    &#10;    console.log('\nOrders by Status:');&#10;    statusCounts.forEach(stat =&gt; {&#10;      console.log(`- ${stat.status}: ${stat._count.status} orders, Total: ৳${stat._sum.totalAmount || 0}`);&#10;    });&#10;    &#10;    // Total all orders&#10;    const totalAll = await prisma.order.count();&#10;    const revenueAll = await prisma.order.aggregate({&#10;      _sum: { totalAmount: true }&#10;    });&#10;    &#10;    console.log(`\nAll Orders: ${totalAll}, Total Revenue: ৳${revenueAll._sum.totalAmount || 0}`);&#10;    &#10;    // Total excluding cancelled/refunded&#10;    const totalExcluding = await prisma.order.count({&#10;      where: {&#10;        status: {&#10;          notIn: ['CANCELLED', 'REFUNDED']&#10;        }&#10;      }&#10;    });&#10;    &#10;    const revenueExcluding = await prisma.order.aggregate({&#10;      _sum: { totalAmount: true },&#10;      where: {&#10;        paymentStatus: 'PAID',&#10;        status: {&#10;          notIn: ['CANCELLED', 'REFUNDED']&#10;        }&#10;      }&#10;    });&#10;    &#10;    console.log(`\nExcluding Cancelled/Refunded Orders: ${totalExcluding}, Revenue: ৳${revenueExcluding._sum.totalAmount || 0}`);&#10;    &#10;  } catch (error) {&#10;    console.error('Error:', error);&#10;  } finally {&#10;    await prisma.$disconnect();&#10;  }&#10;}&#10;&#10;debugOrders();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/debug-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/debug-reviews.js" />
              <option name="updatedContent" value="const { PrismaClient } = require('@prisma/client');&#10;&#10;const prisma = new PrismaClient();&#10;&#10;async function debugReviews() {&#10;  try {&#10;    console.log('=== Debugging Review System ===\n');&#10;    &#10;    // Check if any reviews exist in the database&#10;    const allReviews = await prisma.review.findMany({&#10;      include: {&#10;        product: {&#10;          select: { name: true }&#10;        }&#10;      },&#10;      orderBy: { createdAt: 'desc' }&#10;    });&#10;    &#10;    console.log(`Total reviews in database: ${allReviews.length}\n`);&#10;    &#10;    if (allReviews.length &gt; 0) {&#10;      console.log('All Reviews:');&#10;      allReviews.forEach(review =&gt; {&#10;        console.log(`- ID: ${review.id}`);&#10;        console.log(`  Product: ${review.product?.name || 'Unknown'}`);&#10;        console.log(`  Customer: ${review.customerName}`);&#10;        console.log(`  Rating: ${review.rating}/5`);&#10;        console.log(`  Approved: ${review.isApproved ? 'YES' : 'NO'}`);&#10;        console.log(`  Created: ${review.createdAt.toLocaleDateString()}`);&#10;        console.log(`  Comment: ${review.comment.substring(0, 50)}...`);&#10;        console.log('');&#10;      });&#10;    } else {&#10;      console.log('No reviews found in database');&#10;    }&#10;    &#10;    // Check pending reviews&#10;    const pendingReviews = await prisma.review.findMany({&#10;      where: { isApproved: false },&#10;      include: {&#10;        product: {&#10;          select: { name: true }&#10;        }&#10;      }&#10;    });&#10;    &#10;    console.log(`Pending reviews (need approval): ${pendingReviews.length}`);&#10;    &#10;    // Check approved reviews&#10;    const approvedReviews = await prisma.review.findMany({&#10;      where: { isApproved: true },&#10;      include: {&#10;        product: {&#10;          select: { name: true }&#10;        }&#10;      }&#10;    });&#10;    &#10;    console.log(`Approved reviews (visible to public): ${approvedReviews.length}`);&#10;    &#10;    // Check if products exist&#10;    const productCount = await prisma.product.count();&#10;    console.log(`\nTotal products in database: ${productCount}`);&#10;    &#10;  } catch (error) {&#10;    console.error('Error debugging reviews:', error);&#10;  } finally {&#10;    await prisma.$disconnect();&#10;  }&#10;}&#10;&#10;debugReviews();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/template.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/template.ts" />
              <option name="updatedContent" value="import fs from 'fs'&#10;import path from 'path'&#10;&#10;interface TemplateConfig {&#10;  template: {&#10;    name: string&#10;    version: string&#10;    author: string&#10;    description: string&#10;  }&#10;  branding: {&#10;    siteName: string&#10;    siteDescription: string&#10;    tagline: string&#10;    logo: string&#10;    favicon: string&#10;  }&#10;  theme: {&#10;    colors: {&#10;      primary: string&#10;      secondary: string&#10;      accent: string&#10;      success: string&#10;      warning: string&#10;      error: string&#10;      background: string&#10;      foreground: string&#10;    }&#10;    fonts: {&#10;      heading: string&#10;      body: string&#10;      mono: string&#10;    }&#10;    borderRadius: string&#10;    spacing: {&#10;      container: string&#10;      section: string&#10;    }&#10;  }&#10;  features: {&#10;    authentication: boolean&#10;    reviews: boolean&#10;    wishlist: boolean&#10;    search: boolean&#10;    filters: boolean&#10;    multiLanguage: boolean&#10;    multiCurrency: boolean&#10;    analytics: boolean&#10;    seo: boolean&#10;  }&#10;  layout: {&#10;    header: {&#10;      type: string&#10;      showSearch: boolean&#10;      showWishlist: boolean&#10;      showCart: boolean&#10;      showAuth: boolean&#10;    }&#10;    footer: {&#10;      type: string&#10;      showSocialLinks: boolean&#10;      showNewsletter: boolean&#10;      showFooterPages: boolean&#10;    }&#10;    sidebar: {&#10;      showCategories: boolean&#10;      showFilters: boolean&#10;      showRecentProducts: boolean&#10;    }&#10;  }&#10;  ecommerce: {&#10;    currency: string&#10;    currencySymbol: string&#10;    taxRate: number&#10;    shippingCost: number&#10;    freeShippingThreshold: number&#10;    itemsPerPage: number&#10;    maxCartItems: number&#10;    allowGuestCheckout: boolean&#10;  }&#10;  admin: {&#10;    itemsPerPage: number&#10;    enableBulkActions: boolean&#10;    enableExport: boolean&#10;    enableImport: boolean&#10;  }&#10;  email: {&#10;    enabled: boolean&#10;    orderConfirmation: boolean&#10;    welcomeEmail: boolean&#10;    resetPassword: boolean&#10;  }&#10;  social: {&#10;    facebook: string&#10;    instagram: string&#10;    twitter: string&#10;    youtube: string&#10;    tiktok: string&#10;    pinterest: string&#10;  }&#10;}&#10;&#10;class TemplateManager {&#10;  private configPath: string&#10;  private config: TemplateConfig | null = null&#10;&#10;  constructor() {&#10;    this.configPath = path.join(process.cwd(), 'config', 'template.json')&#10;  }&#10;&#10;  private loadConfig(): TemplateConfig {&#10;    if (this.config) return this.config&#10;&#10;    try {&#10;      const configData = fs.readFileSync(this.configPath, 'utf8')&#10;      this.config = JSON.parse(configData)&#10;      return this.config!&#10;    } catch (error) {&#10;      console.warn('Failed to load template config, using defaults:', error)&#10;      this.config = this.getDefaultConfig()&#10;      return this.config&#10;    }&#10;  }&#10;&#10;  private getDefaultConfig(): TemplateConfig {&#10;    return {&#10;      template: {&#10;        name: 'E-Commerce Master Template',&#10;        version: '1.0.0',&#10;        author: 'Your Company',&#10;        description: 'High-performance e-commerce template'&#10;      },&#10;      branding: {&#10;        siteName: 'Your Store',&#10;        siteDescription: 'Amazing products for everyone',&#10;        tagline: 'Quality products, exceptional service',&#10;        logo: '/placeholder-logo.svg',&#10;        favicon: '/favicon.ico'&#10;      },&#10;      theme: {&#10;        colors: {&#10;          primary: '#3b82f6',&#10;          secondary: '#64748b',&#10;          accent: '#f59e0b',&#10;          success: '#10b981',&#10;          warning: '#f59e0b',&#10;          error: '#ef4444',&#10;          background: '#ffffff',&#10;          foreground: '#0f172a'&#10;        },&#10;        fonts: {&#10;          heading: 'Inter',&#10;          body: 'Inter',&#10;          mono: 'JetBrains Mono'&#10;        },&#10;        borderRadius: '0.5rem',&#10;        spacing: {&#10;          container: '1200px',&#10;          section: '5rem'&#10;        }&#10;      },&#10;      features: {&#10;        authentication: true,&#10;        reviews: true,&#10;        wishlist: true,&#10;        search: true,&#10;        filters: true,&#10;        multiLanguage: false,&#10;        multiCurrency: false,&#10;        analytics: true,&#10;        seo: true&#10;      },&#10;      layout: {&#10;        header: {&#10;          type: 'default',&#10;          showSearch: true,&#10;          showWishlist: true,&#10;          showCart: true,&#10;          showAuth: true&#10;        },&#10;        footer: {&#10;          type: 'default',&#10;          showSocialLinks: true,&#10;          showNewsletter: true,&#10;          showFooterPages: true&#10;        },&#10;        sidebar: {&#10;          showCategories: true,&#10;          showFilters: true,&#10;          showRecentProducts: true&#10;        }&#10;      },&#10;      ecommerce: {&#10;        currency: 'USD',&#10;        currencySymbol: '$',&#10;        taxRate: 0.1,&#10;        shippingCost: 10,&#10;        freeShippingThreshold: 50,&#10;        itemsPerPage: 12,&#10;        maxCartItems: 99,&#10;        allowGuestCheckout: true&#10;      },&#10;      admin: {&#10;        itemsPerPage: 20,&#10;        enableBulkActions: true,&#10;        enableExport: true,&#10;        enableImport: true&#10;      },&#10;      email: {&#10;        enabled: false,&#10;        orderConfirmation: true,&#10;        welcomeEmail: true,&#10;        resetPassword: true&#10;      },&#10;      social: {&#10;        facebook: '',&#10;        instagram: '',&#10;        twitter: '',&#10;        youtube: '',&#10;        tiktok: '',&#10;        pinterest: ''&#10;      }&#10;    }&#10;  }&#10;&#10;  public getConfig(): TemplateConfig {&#10;    return this.loadConfig()&#10;  }&#10;&#10;  public updateConfig(updates: Partial&lt;TemplateConfig&gt;): void {&#10;    this.config = { ...this.loadConfig(), ...updates }&#10;    this.saveConfig()&#10;  }&#10;&#10;  public getBranding() {&#10;    return this.loadConfig().branding&#10;  }&#10;&#10;  public getTheme() {&#10;    return this.loadConfig().theme&#10;  }&#10;&#10;  public getFeatures() {&#10;    return this.loadConfig().features&#10;  }&#10;&#10;  public getEcommerceConfig() {&#10;    return this.loadConfig().ecommerce&#10;  }&#10;&#10;  public getSocialLinks() {&#10;    return this.loadConfig().social&#10;  }&#10;&#10;  public getLayout() {&#10;    return this.loadConfig().layout&#10;  }&#10;&#10;  private saveConfig(): void {&#10;    if (!this.config) return&#10;&#10;    try {&#10;      const configDir = path.dirname(this.configPath)&#10;      if (!fs.existsSync(configDir)) {&#10;        fs.mkdirSync(configDir, { recursive: true })&#10;      }&#10;      fs.writeFileSync(this.configPath, JSON.stringify(this.config, null, 2))&#10;    } catch (error) {&#10;      console.error('Failed to save template config:', error)&#10;    }&#10;  }&#10;&#10;  public generateTailwindColors(): Record&lt;string, any&gt; {&#10;    const colors = this.loadConfig().theme.colors&#10;    return {&#10;      primary: {&#10;        DEFAULT: colors.primary,&#10;        50: this.lightenColor(colors.primary, 95),&#10;        100: this.lightenColor(colors.primary, 90),&#10;        200: this.lightenColor(colors.primary, 80),&#10;        300: this.lightenColor(colors.primary, 70),&#10;        400: this.lightenColor(colors.primary, 60),&#10;        500: colors.primary,&#10;        600: this.darkenColor(colors.primary, 10),&#10;        700: this.darkenColor(colors.primary, 20),&#10;        800: this.darkenColor(colors.primary, 30),&#10;        900: this.darkenColor(colors.primary, 40),&#10;      },&#10;      secondary: {&#10;        DEFAULT: colors.secondary,&#10;        50: this.lightenColor(colors.secondary, 95),&#10;        500: colors.secondary,&#10;        900: this.darkenColor(colors.secondary, 40),&#10;      }&#10;    }&#10;  }&#10;&#10;  private lightenColor(color: string, percent: number): string {&#10;    // Simple implementation - you could use a proper color library here&#10;    return color&#10;  }&#10;&#10;  private darkenColor(color: string, percent: number): string {&#10;    // Simple implementation - you could use a proper color library here&#10;    return color&#10;  }&#10;}&#10;&#10;// Create and export the singleton instance&#10;export const templateManager = new TemplateManager()&#10;export type { TemplateConfig }" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/theme-system.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/theme-system.ts" />
              <option name="originalContent" value="import { templateManager } from './template'&#10;import type { Metadata } from 'next'&#10;&#10;/**&#10; * Dynamic theme configuration that adapts based on template settings&#10; */&#10;export const createDynamicTheme = () =&gt; {&#10;  const theme = templateManager.getTheme()&#10;  &#10;  return {&#10;    extend: {&#10;      colors: {&#10;        primary: {&#10;          50: `hsl(from ${theme.colors.primary} h s 95%)`,&#10;          100: `hsl(from ${theme.colors.primary} h s 90%)`,&#10;          200: `hsl(from ${theme.colors.primary} h s 80%)`,&#10;          300: `hsl(from ${theme.colors.primary} h s 70%)`,&#10;          400: `hsl(from ${theme.colors.primary} h s 60%)`,&#10;          500: theme.colors.primary,&#10;          600: `hsl(from ${theme.colors.primary} h s 45%)`,&#10;          700: `hsl(from ${theme.colors.primary} h s 35%)`,&#10;          800: `hsl(from ${theme.colors.primary} h s 25%)`,&#10;          900: `hsl(from ${theme.colors.primary} h s 15%)`,&#10;          DEFAULT: theme.colors.primary,&#10;        },&#10;        secondary: {&#10;          50: `hsl(from ${theme.colors.secondary} h s 95%)`,&#10;          500: theme.colors.secondary,&#10;          900: `hsl(from ${theme.colors.secondary} h s 15%)`,&#10;          DEFAULT: theme.colors.secondary,&#10;        },&#10;        accent: {&#10;          500: theme.colors.accent,&#10;          DEFAULT: theme.colors.accent,&#10;        }&#10;      },&#10;      fontFamily: {&#10;        heading: [theme.fonts.heading, 'sans-serif'],&#10;        body: [theme.fonts.body, 'sans-serif'],&#10;        mono: [theme.fonts.mono || 'JetBrains Mono', 'monospace'],&#10;      },&#10;      animation: {&#10;        'fade-in': 'fadeIn 0.5s ease-in-out',&#10;        'slide-up': 'slideUp 0.3s ease-out',&#10;        'scale-in': 'scaleIn 0.2s ease-out',&#10;        'pulse-soft': 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',&#10;      },&#10;      keyframes: {&#10;        fadeIn: {&#10;          '0%': { opacity: '0' },&#10;          '100%': { opacity: '1' },&#10;        },&#10;        slideUp: {&#10;          '0%': { transform: 'translateY(10px)', opacity: '0' },&#10;          '100%': { transform: 'translateY(0)', opacity: '1' },&#10;        },&#10;        scaleIn: {&#10;          '0%': { transform: 'scale(0.95)', opacity: '0' },&#10;          '100%': { transform: 'scale(1)', opacity: '1' },&#10;        },&#10;      },&#10;    },&#10;  }&#10;}&#10;&#10;/**&#10; * Generate dynamic metadata for any page&#10; */&#10;export const generatePageMetadata = (&#10;  pageType: 'home' | 'product' | 'category' | 'admin' | 'auth',&#10;  data?: any&#10;): Metadata =&gt; {&#10;  const branding = templateManager.getBranding()&#10;  const baseUrl = process.env.SITE_URL || 'http://localhost:3000'&#10;&#10;  const defaultMetadata: Metadata = {&#10;    metadataBase: new URL(baseUrl),&#10;    title: branding.siteName,&#10;    description: branding.siteDescription,&#10;    keywords: ['ecommerce', 'online store', 'shopping'],&#10;    authors: [{ name: branding.siteName }],&#10;    creator: branding.siteName,&#10;    publisher: branding.siteName,&#10;    robots: {&#10;      index: true,&#10;      follow: true,&#10;      googleBot: {&#10;        index: true,&#10;        follow: true,&#10;        'max-video-preview': -1,&#10;        'max-image-preview': 'large',&#10;        'max-snippet': -1,&#10;      },&#10;    },&#10;    openGraph: {&#10;      type: 'website',&#10;      locale: 'en_US',&#10;      url: baseUrl,&#10;      siteName: branding.siteName,&#10;      title: branding.siteName,&#10;      description: branding.siteDescription,&#10;      images: [&#10;        {&#10;          url: `${baseUrl}${branding.logo}`,&#10;          width: 1200,&#10;          height: 630,&#10;          alt: branding.siteName,&#10;        },&#10;      ],&#10;    },&#10;    twitter: {&#10;      card: 'summary_large_image',&#10;      title: branding.siteName,&#10;      description: branding.siteDescription,&#10;      images: [`${baseUrl}${branding.logo}`],&#10;    },&#10;    icons: {&#10;      icon: '/favicon.ico',&#10;      shortcut: '/favicon-16x16.png',&#10;      apple: '/apple-touch-icon.png',&#10;    },&#10;    manifest: '/site.webmanifest',&#10;  }&#10;&#10;  // Customize metadata based on page type&#10;  switch (pageType) {&#10;    case 'product':&#10;      if (data) {&#10;        return {&#10;          ...defaultMetadata,&#10;          title: `${data.name} | ${branding.siteName}`,&#10;          description: data.description,&#10;          openGraph: {&#10;            ...defaultMetadata.openGraph,&#10;            type: 'product',&#10;            title: `${data.name} | ${branding.siteName}`,&#10;            description: data.description,&#10;            images: data.images?.map((img: string) =&gt; ({&#10;              url: img,&#10;              width: 800,&#10;              height: 800,&#10;              alt: data.name,&#10;            })) || defaultMetadata.openGraph?.images,&#10;          },&#10;        }&#10;      }&#10;      break&#10;&#10;    case 'category':&#10;      if (data) {&#10;        return {&#10;          ...defaultMetadata,&#10;          title: `${data.name} | ${branding.siteName}`,&#10;          description: `Shop ${data.name} products at ${branding.siteName}`,&#10;          openGraph: {&#10;            ...defaultMetadata.openGraph,&#10;            title: `${data.name} | ${branding.siteName}`,&#10;            description: `Shop ${data.name} products at ${branding.siteName}`,&#10;          },&#10;        }&#10;      }&#10;      break&#10;&#10;    case 'admin':&#10;      return {&#10;        ...defaultMetadata,&#10;        title: `Admin Dashboard | ${branding.siteName}`,&#10;        description: 'Store management dashboard',&#10;        robots: {&#10;          index: false,&#10;          follow: false,&#10;        },&#10;      }&#10;&#10;    case 'auth':&#10;      return {&#10;        ...defaultMetadata,&#10;        title: `Account | ${branding.siteName}`,&#10;        description: 'Sign in to your account',&#10;      }&#10;  }&#10;&#10;  return defaultMetadata&#10;}&#10;&#10;/**&#10; * Performance monitoring utilities&#10; */&#10;export class PerformanceMonitor {&#10;  private static metrics = new Map&lt;string, number[]&gt;()&#10;&#10;  static startTiming(label: string): () =&gt; number {&#10;    const start = performance.now()&#10;&#10;    return () =&gt; {&#10;      const duration = performance.now() - start&#10;      this.recordMetric(label, duration)&#10;      return duration&#10;    }&#10;  }&#10;&#10;  static recordMetric(label: string, value: number) {&#10;    if (!this.metrics.has(label)) {&#10;      this.metrics.set(label, [])&#10;    }&#10;&#10;    const values = this.metrics.get(label)!&#10;    values.push(value)&#10;&#10;    // Keep only last 100 measurements&#10;    if (values.length &gt; 100) {&#10;      values.shift()&#10;    }&#10;  }&#10;&#10;  static getMetrics(label: string) {&#10;    const values = this.metrics.get(label) || []&#10;    if (values.length === 0) return null&#10;&#10;    const avg = values.reduce((a, b) =&gt; a + b, 0) / values.length&#10;    const min = Math.min(...values)&#10;    const max = Math.max(...values)&#10;&#10;    return { avg, min, max, count: values.length }&#10;  }&#10;&#10;  static getAllMetrics() {&#10;    const result: Record&lt;string, any&gt; = {}&#10;&#10;    for (const [label, values] of this.metrics.entries()) {&#10;      result[label] = this.getMetrics(label)&#10;    }&#10;&#10;    return result&#10;  }&#10;}&#10;&#10;/**&#10; * Advanced caching utilities&#10; */&#10;export class CacheManager {&#10;  private static memoryCache = new Map&lt;string, {&#10;    data: any&#10;    timestamp: number&#10;    ttl: number&#10;    tags: string[]&#10;  }&gt;()&#10;&#10;  static set(&#10;    key: string,&#10;    data: any,&#10;    ttlSeconds: number = 300,&#10;    tags: string[] = []&#10;  ) {&#10;    this.memoryCache.set(key, {&#10;      data,&#10;      timestamp: Date.now(),&#10;      ttl: ttlSeconds * 1000,&#10;      tags&#10;    })&#10;  }&#10;&#10;  static get&lt;T = any&gt;(key: string): T | null {&#10;    const item = this.memoryCache.get(key)&#10;&#10;    if (!item) return null&#10;&#10;    if (Date.now() - item.timestamp &gt; item.ttl) {&#10;      this.memoryCache.delete(key)&#10;      return null&#10;    }&#10;&#10;    return item.data as T&#10;  }&#10;&#10;  static invalidateByTag(tag: string) {&#10;    for (const [key, item] of this.memoryCache.entries()) {&#10;      if (item.tags.includes(tag)) {&#10;        this.memoryCache.delete(key)&#10;      }&#10;    }&#10;  }&#10;&#10;  static clear() {&#10;    this.memoryCache.clear()&#10;  }&#10;&#10;  static getStats() {&#10;    const total = this.memoryCache.size&#10;    const expired = Array.from(this.memoryCache.values())&#10;      .filter(item =&gt; Date.now() - item.timestamp &gt; item.ttl).length&#10;&#10;    return {&#10;      total,&#10;      active: total - expired,&#10;      expired&#10;    }&#10;  }&#10;}&#10;&#10;/**&#10; * Custom hook factory for template features&#10; */&#10;export const createTemplateHooks = () =&gt; {&#10;  const features = templateManager.getFeatures()&#10;  const ecommerce = templateManager.getEcommerceConfig()&#10;&#10;  return {&#10;    useAuth: () =&gt; features.authentication,&#10;    useReviews: () =&gt; features.reviews,&#10;    useWishlist: () =&gt; features.wishlist,&#10;    useSearch: () =&gt; features.search,&#10;    useCurrency: () =&gt; ({&#10;      code: ecommerce.currency,&#10;      symbol: ecommerce.currencySymbol,&#10;      format: (amount: number) =&gt;&#10;        new Intl.NumberFormat('en-US', {&#10;          style: 'currency',&#10;          currency: ecommerce.currency&#10;        }).format(amount)&#10;    }),&#10;    useShipping: () =&gt; ({&#10;      cost: ecommerce.shippingCost,&#10;      freeThreshold: ecommerce.freeShippingThreshold,&#10;      isFree: (total: number) =&gt; total &gt;= ecommerce.freeShippingThreshold&#10;    })&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { templateManager } from './template'&#10;import type { Metadata } from 'next'&#10;&#10;/**&#10; * Dynamic theme configuration that adapts based on template settings&#10; */&#10;export const createDynamicTheme = () =&gt; {&#10;  const theme = templateManager.getTheme()&#10;  &#10;  return {&#10;    extend: {&#10;      colors: {&#10;        primary: {&#10;          50: `hsl(from ${theme.colors.primary} h s 95%)`,&#10;          100: `hsl(from ${theme.colors.primary} h s 90%)`,&#10;          200: `hsl(from ${theme.colors.primary} h s 80%)`,&#10;          300: `hsl(from ${theme.colors.primary} h s 70%)`,&#10;          400: `hsl(from ${theme.colors.primary} h s 60%)`,&#10;          500: theme.colors.primary,&#10;          600: `hsl(from ${theme.colors.primary} h s 45%)`,&#10;          700: `hsl(from ${theme.colors.primary} h s 35%)`,&#10;          800: `hsl(from ${theme.colors.primary} h s 25%)`,&#10;          900: `hsl(from ${theme.colors.primary} h s 15%)`,&#10;          DEFAULT: theme.colors.primary,&#10;        },&#10;        secondary: {&#10;          50: `hsl(from ${theme.colors.secondary} h s 95%)`,&#10;          500: theme.colors.secondary,&#10;          900: `hsl(from ${theme.colors.secondary} h s 15%)`,&#10;          DEFAULT: theme.colors.secondary,&#10;        },&#10;        accent: {&#10;          500: theme.colors.accent,&#10;          DEFAULT: theme.colors.accent,&#10;        }&#10;      },&#10;      fontFamily: {&#10;        heading: [theme.fonts.heading, 'sans-serif'],&#10;        body: [theme.fonts.body, 'sans-serif'],&#10;        mono: [theme.fonts.mono || 'JetBrains Mono', 'monospace'],&#10;      },&#10;      animation: {&#10;        'fade-in': 'fadeIn 0.5s ease-in-out',&#10;        'slide-up': 'slideUp 0.3s ease-out',&#10;        'scale-in': 'scaleIn 0.2s ease-out',&#10;        'pulse-soft': 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',&#10;      },&#10;      keyframes: {&#10;        fadeIn: {&#10;          '0%': { opacity: '0' },&#10;          '100%': { opacity: '1' },&#10;        },&#10;        slideUp: {&#10;          '0%': { transform: 'translateY(10px)', opacity: '0' },&#10;          '100%': { transform: 'translateY(0)', opacity: '1' },&#10;        },&#10;        scaleIn: {&#10;          '0%': { transform: 'scale(0.95)', opacity: '0' },&#10;          '100%': { transform: 'scale(1)', opacity: '1' },&#10;        },&#10;      },&#10;    },&#10;  }&#10;}&#10;&#10;/**&#10; * Generate dynamic metadata for any page&#10; */&#10;export const generatePageMetadata = (&#10;  pageType: 'home' | 'product' | 'category' | 'admin' | 'auth',&#10;  data?: any&#10;): Metadata =&gt; {&#10;  const branding = templateManager.getBranding()&#10;  const baseUrl = process.env.SITE_URL || 'http://localhost:3000'&#10;  &#10;  const defaultMetadata: Metadata = {&#10;    metadataBase: new URL(baseUrl),&#10;    title: branding.siteName,&#10;    description: branding.siteDescription,&#10;    keywords: ['ecommerce', 'online store', 'shopping'],&#10;    authors: [{ name: branding.siteName }],&#10;    creator: branding.siteName,&#10;    publisher: branding.siteName,&#10;    robots: {&#10;      index: true,&#10;      follow: true,&#10;      googleBot: {&#10;        index: true,&#10;        follow: true,&#10;        'max-video-preview': -1,&#10;        'max-image-preview': 'large',&#10;        'max-snippet': -1,&#10;      },&#10;    },&#10;    openGraph: {&#10;      type: 'website',&#10;      locale: 'en_US',&#10;      url: baseUrl,&#10;      siteName: branding.siteName,&#10;      title: branding.siteName,&#10;      description: branding.siteDescription,&#10;      images: [&#10;        {&#10;          url: `${baseUrl}${branding.logo}`,&#10;          width: 1200,&#10;          height: 630,&#10;          alt: branding.siteName,&#10;        },&#10;      ],&#10;    },&#10;    twitter: {&#10;      card: 'summary_large_image',&#10;      title: branding.siteName,&#10;      description: branding.siteDescription,&#10;      images: [`${baseUrl}${branding.logo}`],&#10;    },&#10;    icons: {&#10;      icon: '/favicon.ico',&#10;      shortcut: '/favicon-16x16.png',&#10;      apple: '/apple-touch-icon.png',&#10;    },&#10;    manifest: '/site.webmanifest',&#10;  }&#10;&#10;  // Customize metadata based on page type&#10;  switch (pageType) {&#10;    case 'product':&#10;      if (data) {&#10;        return {&#10;          ...defaultMetadata,&#10;          title: `${data.name} | ${branding.siteName}`,&#10;          description: data.description,&#10;          openGraph: {&#10;            ...defaultMetadata.openGraph,&#10;            type: 'website', // Changed from 'product' to fix TypeScript error&#10;            title: `${data.name} | ${branding.siteName}`,&#10;            description: data.description,&#10;            images: data.images?.map((img: string) =&gt; ({&#10;              url: img,&#10;              width: 800,&#10;              height: 800,&#10;              alt: data.name,&#10;            })) || defaultMetadata.openGraph?.images,&#10;          },&#10;        }&#10;      }&#10;      break&#10;&#10;    case 'category':&#10;      if (data) {&#10;        return {&#10;          ...defaultMetadata,&#10;          title: `${data.name} | ${branding.siteName}`,&#10;          description: `Shop ${data.name} products at ${branding.siteName}`,&#10;          openGraph: {&#10;            ...defaultMetadata.openGraph,&#10;            title: `${data.name} | ${branding.siteName}`,&#10;            description: `Shop ${data.name} products at ${branding.siteName}`,&#10;          },&#10;        }&#10;      }&#10;      break&#10;&#10;    case 'admin':&#10;      return {&#10;        ...defaultMetadata,&#10;        title: `Admin Dashboard | ${branding.siteName}`,&#10;        description: 'Store management dashboard',&#10;        robots: {&#10;          index: false,&#10;          follow: false,&#10;        },&#10;      }&#10;&#10;    case 'auth':&#10;      return {&#10;        ...defaultMetadata,&#10;        title: `Account | ${branding.siteName}`,&#10;        description: 'Sign in to your account',&#10;      }&#10;  }&#10;&#10;  return defaultMetadata&#10;}&#10;&#10;/**&#10; * Performance monitoring utilities&#10; */&#10;export class PerformanceMonitor {&#10;  private static metrics = new Map&lt;string, number[]&gt;()&#10;&#10;  static startTiming(label: string): () =&gt; number {&#10;    const start = performance.now()&#10;&#10;    return () =&gt; {&#10;      const duration = performance.now() - start&#10;      this.recordMetric(label, duration)&#10;      return duration&#10;    }&#10;  }&#10;&#10;  static recordMetric(label: string, value: number) {&#10;    if (!this.metrics.has(label)) {&#10;      this.metrics.set(label, [])&#10;    }&#10;&#10;    const values = this.metrics.get(label)!&#10;    values.push(value)&#10;&#10;    // Keep only last 100 measurements&#10;    if (values.length &gt; 100) {&#10;      values.shift()&#10;    }&#10;  }&#10;&#10;  static getMetrics(label: string) {&#10;    const values = this.metrics.get(label) || []&#10;    if (values.length === 0) return null&#10;&#10;    const avg = values.reduce((a, b) =&gt; a + b, 0) / values.length&#10;    const min = Math.min(...values)&#10;    const max = Math.max(...values)&#10;&#10;    return { avg, min, max, count: values.length }&#10;  }&#10;&#10;  static getAllMetrics() {&#10;    const result: Record&lt;string, any&gt; = {}&#10;&#10;    for (const [label, values] of this.metrics.entries()) {&#10;      result[label] = this.getMetrics(label)&#10;    }&#10;&#10;    return result&#10;  }&#10;}&#10;&#10;/**&#10; * Advanced caching utilities&#10; */&#10;export class CacheManager {&#10;  private static memoryCache = new Map&lt;string, {&#10;    data: any&#10;    timestamp: number&#10;    ttl: number&#10;    tags: string[]&#10;  }&gt;()&#10;&#10;  static set(&#10;    key: string,&#10;    data: any,&#10;    ttlSeconds: number = 300,&#10;    tags: string[] = []&#10;  ) {&#10;    this.memoryCache.set(key, {&#10;      data,&#10;      timestamp: Date.now(),&#10;      ttl: ttlSeconds * 1000,&#10;      tags&#10;    })&#10;  }&#10;&#10;  static get&lt;T = any&gt;(key: string): T | null {&#10;    const item = this.memoryCache.get(key)&#10;&#10;    if (!item) return null&#10;&#10;    if (Date.now() - item.timestamp &gt; item.ttl) {&#10;      this.memoryCache.delete(key)&#10;      return null&#10;    }&#10;&#10;    return item.data as T&#10;  }&#10;&#10;  static invalidateByTag(tag: string) {&#10;    for (const [key, item] of this.memoryCache.entries()) {&#10;      if (item.tags.includes(tag)) {&#10;        this.memoryCache.delete(key)&#10;      }&#10;    }&#10;  }&#10;&#10;  static clear() {&#10;    this.memoryCache.clear()&#10;  }&#10;&#10;  static getStats() {&#10;    const total = this.memoryCache.size&#10;    const expired = Array.from(this.memoryCache.values())&#10;      .filter(item =&gt; Date.now() - item.timestamp &gt; item.ttl).length&#10;&#10;    return {&#10;      total,&#10;      active: total - expired,&#10;      expired&#10;    }&#10;  }&#10;}&#10;&#10;/**&#10; * Custom hook factory for template features&#10; */&#10;export const createTemplateHooks = () =&gt; {&#10;  const features = templateManager.getFeatures()&#10;  const ecommerce = templateManager.getEcommerceConfig()&#10;&#10;  return {&#10;    useAuth: () =&gt; features.authentication,&#10;    useReviews: () =&gt; features.reviews,&#10;    useWishlist: () =&gt; features.wishlist,&#10;    useSearch: () =&gt; features.search,&#10;    useCurrency: () =&gt; ({&#10;      code: ecommerce.currency,&#10;      symbol: ecommerce.currencySymbol,&#10;      format: (amount: number) =&gt;&#10;        new Intl.NumberFormat('en-US', {&#10;          style: 'currency',&#10;          currency: ecommerce.currency&#10;        }).format(amount)&#10;    }),&#10;    useShipping: () =&gt; ({&#10;      cost: ecommerce.shippingCost,&#10;      freeThreshold: ecommerce.freeShippingThreshold,&#10;      isFree: (total: number) =&gt; total &gt;= ecommerce.freeShippingThreshold&#10;    })&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/theme-updater.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/theme-updater.ts" />
              <option name="updatedContent" value="import fs from 'fs'&#10;import path from 'path'&#10;&#10;// Function to convert hex color to HSL values for CSS variables&#10;function hexToHsl(hex: string): string {&#10;  const r = parseInt(hex.slice(1, 3), 16) / 255&#10;  const g = parseInt(hex.slice(3, 5), 16) / 255&#10;  const b = parseInt(hex.slice(5, 7), 16) / 255&#10;&#10;  const max = Math.max(r, g, b)&#10;  const min = Math.min(r, g, b)&#10;  let h = 0, s = 0, l = (max + min) / 2&#10;&#10;  if (max !== min) {&#10;    const d = max - min&#10;    s = l &gt; 0.5 ? d / (2 - max - min) : d / (max + min)&#10;    switch (max) {&#10;      case r: h = (g - b) / d + (g &lt; b ? 6 : 0); break&#10;      case g: h = (b - r) / d + 2; break&#10;      case b: h = (r - g) / d + 4; break&#10;    }&#10;    h /= 6&#10;  }&#10;&#10;  return `${Math.round(h * 360)} ${Math.round(s * 100)}% ${Math.round(l * 100)}%`&#10;}&#10;&#10;export function updateCSSWithTheme() {&#10;  try {&#10;    // Read template configuration&#10;    const configPath = path.join(process.cwd(), 'config', 'template.json')&#10;    const configData = fs.readFileSync(configPath, 'utf8')&#10;    const config = JSON.parse(configData)&#10;&#10;    // Convert hex colors to HSL&#10;    const primaryHsl = hexToHsl(config.theme.colors.primary)&#10;    const secondaryHsl = hexToHsl(config.theme.colors.secondary)&#10;    const accentHsl = hexToHsl(config.theme.colors.accent)&#10;    const successHsl = hexToHsl(config.theme.colors.success)&#10;    const errorHsl = hexToHsl(config.theme.colors.error)&#10;&#10;    // Generate dynamic CSS content&#10;    const dynamicCSS = `@tailwind base;&#10;@tailwind components;&#10;@tailwind utilities;&#10;&#10;@font-face {&#10;  font-family: &quot;Brandon&quot;;&#10;  src: url(&quot;/fonts/Brandon_reg.ttf&quot;) format(&quot;truetype&quot;);&#10;  font-weight: normal;&#10;  font-style: normal;&#10;  font-display: swap;&#10;}&#10;&#10;@layer base {&#10;  :root {&#10;    --background: 0 0% 100%;&#10;    --foreground: 222.2 84% 4.9%;&#10;    --card: 0 0% 100%;&#10;    --card-foreground: 222.2 84% 4.9%;&#10;    --popover: 0 0% 100%;&#10;    --popover-foreground: 222.2 84% 4.9%;&#10;    --primary: ${primaryHsl};&#10;    --primary-foreground: 210 40% 98%;&#10;    --secondary: ${secondaryHsl};&#10;    --secondary-foreground: 222.2 84% 4.9%;&#10;    --muted: 210 40% 96%;&#10;    --muted-foreground: 215.4 16.3% 46.9%;&#10;    --accent: ${accentHsl};&#10;    --accent-foreground: 222.2 84% 4.9%;&#10;    --destructive: ${errorHsl};&#10;    --destructive-foreground: 210 40% 98%;&#10;    --border: 214.3 31.8% 91.4%;&#10;    --input: 214.3 31.8% 91.4%;&#10;    --ring: ${primaryHsl};&#10;    --radius: 0.5rem;&#10;    --chart-1: ${primaryHsl};&#10;    --chart-2: ${secondaryHsl};&#10;    --chart-3: ${accentHsl};&#10;    --chart-4: ${successHsl};&#10;    --chart-5: ${errorHsl};&#10;  }&#10;&#10;  .dark {&#10;    --background: 222.2 84% 4.9%;&#10;    --foreground: 210 40% 98%;&#10;    --card: 222.2 84% 4.9%;&#10;    --card-foreground: 210 40% 98%;&#10;    --popover: 222.2 84% 4.9%;&#10;    --popover-foreground: 210 40% 98%;&#10;    --primary: ${primaryHsl};&#10;    --primary-foreground: 222.2 84% 4.9%;&#10;    --secondary: ${secondaryHsl};&#10;    --secondary-foreground: 210 40% 98%;&#10;    --muted: 217.2 32.6% 17.5%;&#10;    --muted-foreground: 215 20.2% 65.1%;&#10;    --accent: ${accentHsl};&#10;    --accent-foreground: 210 40% 98%;&#10;    --destructive: ${errorHsl};&#10;    --destructive-foreground: 210 40% 98%;&#10;    --border: 217.2 32.6% 17.5%;&#10;    --input: 217.2 32.6% 17.5%;&#10;    --ring: 212.7 26.8% 83.9%;&#10;    --chart-1: ${primaryHsl};&#10;    --chart-2: ${secondaryHsl};&#10;    --chart-3: ${accentHsl};&#10;    --chart-4: ${successHsl};&#10;    --chart-5: ${errorHsl};&#10;  }&#10;}&#10;&#10;@layer base {&#10;  * {&#10;    @apply border-border;&#10;  }&#10;  body {&#10;    @apply bg-background text-foreground;&#10;  }&#10;}&#10;&#10;/* Custom font classes */&#10;.font-brandon {&#10;  font-family: &quot;Brandon&quot;, sans-serif;&#10;}&#10;&#10;/* Store-specific brand colors */&#10;.text-brand-primary {&#10;  color: hsl(var(--primary));&#10;}&#10;&#10;.bg-brand-primary {&#10;  background-color: hsl(var(--primary));&#10;}&#10;&#10;.border-brand-primary {&#10;  border-color: hsl(var(--primary));&#10;}&#10;&#10;/* Custom animations for smooth UX */&#10;@layer utilities {&#10;  .animate-fade-in {&#10;    animation: fadeIn 0.5s ease-in-out;&#10;  }&#10;  &#10;  .animate-slide-up {&#10;    animation: slideUp 0.3s ease-out;&#10;  }&#10;  &#10;  .animate-scale-in {&#10;    animation: scaleIn 0.2s ease-out;&#10;  }&#10;}&#10;&#10;@keyframes fadeIn {&#10;  from {&#10;    opacity: 0;&#10;  }&#10;  to {&#10;    opacity: 1;&#10;  }&#10;}&#10;&#10;@keyframes slideUp {&#10;  from {&#10;    transform: translateY(10px);&#10;    opacity: 0;&#10;  }&#10;  to {&#10;    transform: translateY(0);&#10;    opacity: 1;&#10;  }&#10;}&#10;&#10;@keyframes scaleIn {&#10;  from {&#10;    transform: scale(0.95);&#10;    opacity: 0;&#10;  }&#10;  to {&#10;    transform: scale(1);&#10;    opacity: 1;&#10;  }&#10;}`&#10;&#10;    // Write the updated CSS file&#10;    const cssPath = path.join(process.cwd(), 'app', 'globals.css')&#10;    fs.writeFileSync(cssPath, dynamicCSS)&#10;&#10;    console.log('✅ CSS updated with your theme colors!')&#10;    return true&#10;&#10;  } catch (error) {&#10;    console.error('❌ Failed to update CSS:', error)&#10;    return false&#10;  }&#10;}&#10;&#10;// Also update the site title in layout.tsx&#10;export function updateSiteMetadata() {&#10;  try {&#10;    const configPath = path.join(process.cwd(), 'config', 'template.json')&#10;    const configData = fs.readFileSync(configPath, 'utf8')&#10;    const config = JSON.parse(configData)&#10;&#10;    const layoutPath = path.join(process.cwd(), 'app', 'layout.tsx')&#10;    let layoutContent = fs.readFileSync(layoutPath, 'utf8')&#10;&#10;    // Update site name in metadata&#10;    layoutContent = layoutContent.replace(&#10;      /title:\s*[&quot;'][^&quot;']*[&quot;']/,&#10;      `title: &quot;${config.branding.siteName}&quot;`&#10;    )&#10;    &#10;    layoutContent = layoutContent.replace(&#10;      /description:\s*[&quot;'][^&quot;']*[&quot;']/,&#10;      `description: &quot;${config.branding.siteDescription}&quot;`&#10;    )&#10;&#10;    fs.writeFileSync(layoutPath, layoutContent)&#10;    console.log('✅ Site metadata updated!')&#10;    return true&#10;&#10;  } catch (error) {&#10;    console.error('❌ Failed to update metadata:', error)&#10;    return false&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/seed-additional-footer-pages.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/seed-additional-footer-pages.js" />
              <option name="updatedContent" value="const { PrismaClient } = require('@prisma/client')&#10;&#10;const prisma = new PrismaClient()&#10;&#10;const additionalFooterPages = [&#10;  {&#10;    title: 'Lookbook',&#10;    slug: 'lookbook',&#10;    content: `&#10;      &lt;div class=&quot;max-w-4xl mx-auto&quot;&gt;&#10;        &lt;h2 class=&quot;text-2xl font-bold mb-6&quot;&gt;Our Lookbook&lt;/h2&gt;&#10;        &lt;div class=&quot;space-y-8&quot;&gt;&#10;          &lt;section&gt;&#10;            &lt;h3 class=&quot;text-xl font-semibold mb-4&quot;&gt;Latest Collections&lt;/h3&gt;&#10;            &lt;p class=&quot;mb-4&quot;&gt;Discover our latest fashion and home décor collections featuring carefully curated pieces that blend traditional craftsmanship with contemporary design.&lt;/p&gt;&#10;            &#10;            &lt;div class=&quot;grid md:grid-cols-2 gap-6 mt-6&quot;&gt;&#10;              &lt;div class=&quot;border p-4 rounded-lg&quot;&gt;&#10;                &lt;h4 class=&quot;font-medium mb-2&quot;&gt;Fashion Collection&lt;/h4&gt;&#10;                &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Explore our latest fashion pieces that celebrate both comfort and style.&lt;/p&gt;&#10;              &lt;/div&gt;&#10;              &lt;div class=&quot;border p-4 rounded-lg&quot;&gt;&#10;                &lt;h4 class=&quot;font-medium mb-2&quot;&gt;Home Décor Collection&lt;/h4&gt;&#10;                &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Transform your space with our beautiful home décor accessories and furnishings.&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/section&gt;&#10;          &#10;          &lt;section&gt;&#10;            &lt;h3 class=&quot;text-xl font-semibold mb-4&quot;&gt;Style Inspiration&lt;/h3&gt;&#10;            &lt;p&gt;Get inspired by our styling tips and see how our pieces can be incorporated into your daily life and living spaces.&lt;/p&gt;&#10;          &lt;/section&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    `,&#10;    metaTitle: 'Lookbook | Southern Fashion &amp; Decor',&#10;    metaDescription: 'Browse our latest fashion and home décor collections. Get style inspiration and discover how to incorporate our pieces into your life.',&#10;    sortOrder: 10&#10;  },&#10;  {&#10;    title: 'Trade Shows',&#10;    slug: 'trade-shows',&#10;    content: `&#10;      &lt;div class=&quot;max-w-4xl mx-auto&quot;&gt;&#10;        &lt;h2 class=&quot;text-2xl font-bold mb-6&quot;&gt;Trade Shows &amp; Events&lt;/h2&gt;&#10;        &lt;div class=&quot;space-y-8&quot;&gt;&#10;          &lt;section&gt;&#10;            &lt;h3 class=&quot;text-xl font-semibold mb-4&quot;&gt;Upcoming Events&lt;/h3&gt;&#10;            &lt;p class=&quot;mb-4&quot;&gt;Join us at various trade shows and exhibitions throughout the year where we showcase our latest collections and connect with industry professionals.&lt;/p&gt;&#10;            &#10;            &lt;div class=&quot;space-y-4&quot;&gt;&#10;              &lt;div class=&quot;border-l-4 border-blue-500 pl-4&quot;&gt;&#10;                &lt;h4 class=&quot;font-medium&quot;&gt;Bangladesh Fashion Week&lt;/h4&gt;&#10;                &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Annual showcase of the latest fashion trends&lt;/p&gt;&#10;                &lt;p class=&quot;text-sm text-gray-500&quot;&gt;Location: Dhaka | Date: TBA&lt;/p&gt;&#10;              &lt;/div&gt;&#10;              &#10;              &lt;div class=&quot;border-l-4 border-green-500 pl-4&quot;&gt;&#10;                &lt;h4 class=&quot;font-medium&quot;&gt;Home &amp; Décor Expo&lt;/h4&gt;&#10;                &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Exhibition featuring home decoration and lifestyle products&lt;/p&gt;&#10;                &lt;p class=&quot;text-sm text-gray-500&quot;&gt;Location: Dhaka | Date: TBA&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/section&gt;&#10;          &#10;          &lt;section&gt;&#10;            &lt;h3 class=&quot;text-xl font-semibold mb-4&quot;&gt;Partnership Opportunities&lt;/h3&gt;&#10;            &lt;p&gt;Interested in partnering with us or featuring our products at your event? Contact us to discuss collaboration opportunities.&lt;/p&gt;&#10;          &lt;/section&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    `,&#10;    metaTitle: 'Trade Shows &amp; Events | Southern Fashion &amp; Decor',&#10;    metaDescription: 'Join us at trade shows and exhibitions. Learn about our upcoming events and partnership opportunities.',&#10;    sortOrder: 11&#10;  },&#10;  {&#10;    title: 'Ethical Policy',&#10;    slug: 'ethics',&#10;    content: `&#10;      &lt;div class=&quot;max-w-4xl mx-auto&quot;&gt;&#10;        &lt;h2 class=&quot;text-2xl font-bold mb-6&quot;&gt;Our Ethical Policy&lt;/h2&gt;&#10;        &lt;div class=&quot;space-y-8&quot;&gt;&#10;          &lt;section&gt;&#10;            &lt;h3 class=&quot;text-xl font-semibold mb-4&quot;&gt;Our Commitment&lt;/h3&gt;&#10;            &lt;p class=&quot;mb-4&quot;&gt;At Southern Fashion &amp; Décor, we are committed to conducting our business with the highest ethical standards. We believe in fair trade, responsible sourcing, and supporting local communities.&lt;/p&gt;&#10;          &lt;/section&gt;&#10;          &#10;          &lt;section&gt;&#10;            &lt;h3 class=&quot;text-xl font-semibold mb-4&quot;&gt;Fair Trade Practices&lt;/h3&gt;&#10;            &lt;ul class=&quot;space-y-2 list-disc list-inside&quot;&gt;&#10;              &lt;li&gt;We ensure fair wages for all our artisans and workers&lt;/li&gt;&#10;              &lt;li&gt;We maintain safe and healthy working conditions&lt;/li&gt;&#10;              &lt;li&gt;We support skill development and training programs&lt;/li&gt;&#10;              &lt;li&gt;We promote gender equality in our workplace&lt;/li&gt;&#10;            &lt;/ul&gt;&#10;          &lt;/section&gt;&#10;          &#10;          &lt;section&gt;&#10;            &lt;h3 class=&quot;text-xl font-semibold mb-4&quot;&gt;Responsible Sourcing&lt;/h3&gt;&#10;            &lt;ul class=&quot;space-y-2 list-disc list-inside&quot;&gt;&#10;              &lt;li&gt;We source materials from certified and sustainable suppliers&lt;/li&gt;&#10;              &lt;li&gt;We prioritize local artisans and traditional craftsmanship&lt;/li&gt;&#10;              &lt;li&gt;We avoid materials that harm the environment&lt;/li&gt;&#10;              &lt;li&gt;We maintain transparency in our supply chain&lt;/li&gt;&#10;            &lt;/ul&gt;&#10;          &lt;/section&gt;&#10;          &#10;          &lt;section&gt;&#10;            &lt;h3 class=&quot;text-xl font-semibold mb-4&quot;&gt;Community Support&lt;/h3&gt;&#10;            &lt;p&gt;We actively support local communities through various initiatives including skill development programs, educational support, and community development projects.&lt;/p&gt;&#10;          &lt;/section&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    `,&#10;    metaTitle: 'Ethical Policy | Southern Fashion &amp; Decor',&#10;    metaDescription: 'Learn about our commitment to ethical business practices, fair trade, responsible sourcing, and community support.',&#10;    sortOrder: 12&#10;  },&#10;  {&#10;    title: 'Sustainability Mission',&#10;    slug: 'sustainability',&#10;    content: `&#10;      &lt;div class=&quot;max-w-4xl mx-auto&quot;&gt;&#10;        &lt;h2 class=&quot;text-2xl font-bold mb-6&quot;&gt;Our Sustainability Mission&lt;/h2&gt;&#10;        &lt;div class=&quot;space-y-8&quot;&gt;&#10;          &lt;section&gt;&#10;            &lt;h3 class=&quot;text-xl font-semibold mb-4&quot;&gt;Environmental Responsibility&lt;/h3&gt;&#10;            &lt;p class=&quot;mb-4&quot;&gt;We are dedicated to minimizing our environmental impact through sustainable practices across all aspects of our business operations.&lt;/p&gt;&#10;          &lt;/section&gt;&#10;          &#10;          &lt;section&gt;&#10;            &lt;h3 class=&quot;text-xl font-semibold mb-4&quot;&gt;Sustainable Materials&lt;/h3&gt;&#10;            &lt;ul class=&quot;space-y-2 list-disc list-inside&quot;&gt;&#10;              &lt;li&gt;We use eco-friendly and renewable materials whenever possible&lt;/li&gt;&#10;              &lt;li&gt;We prioritize organic and natural fibers&lt;/li&gt;&#10;              &lt;li&gt;We choose suppliers who share our sustainability values&lt;/li&gt;&#10;              &lt;li&gt;We minimize packaging waste and use recyclable materials&lt;/li&gt;&#10;            &lt;/ul&gt;&#10;          &lt;/section&gt;&#10;          &#10;          &lt;section&gt;&#10;            &lt;h3 class=&quot;text-xl font-semibold mb-4&quot;&gt;Carbon Footprint Reduction&lt;/h3&gt;&#10;            &lt;ul class=&quot;space-y-2 list-disc list-inside&quot;&gt;&#10;              &lt;li&gt;We optimize transportation and logistics to reduce emissions&lt;/li&gt;&#10;              &lt;li&gt;We support local production to minimize shipping distances&lt;/li&gt;&#10;              &lt;li&gt;We implement energy-efficient practices in our operations&lt;/li&gt;&#10;              &lt;li&gt;We offset our carbon footprint through environmental projects&lt;/li&gt;&#10;            &lt;/ul&gt;&#10;          &lt;/section&gt;&#10;          &#10;          &lt;section&gt;&#10;            &lt;h3 class=&quot;text-xl font-semibold mb-4&quot;&gt;Circular Economy&lt;/h3&gt;&#10;            &lt;p&gt;We promote a circular economy by designing products for durability, encouraging repair and reuse, and implementing take-back programs for end-of-life products.&lt;/p&gt;&#10;          &lt;/section&gt;&#10;          &#10;          &lt;section&gt;&#10;            &lt;h3 class=&quot;text-xl font-semibold mb-4&quot;&gt;Future Goals&lt;/h3&gt;&#10;            &lt;p&gt;We are continuously working towards:&lt;/p&gt;&#10;            &lt;ul class=&quot;space-y-2 list-disc list-inside mt-2&quot;&gt;&#10;              &lt;li&gt;Achieving carbon neutrality by 2030&lt;/li&gt;&#10;              &lt;li&gt;Using 100% sustainable materials by 2028&lt;/li&gt;&#10;              &lt;li&gt;Zero waste to landfill by 2027&lt;/li&gt;&#10;              &lt;li&gt;Supporting 1000+ local artisans by 2026&lt;/li&gt;&#10;            &lt;/ul&gt;&#10;          &lt;/section&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    `,&#10;    metaTitle: 'Sustainability Mission | Southern Fashion &amp; Decor',&#10;    metaDescription: 'Discover our commitment to environmental responsibility, sustainable materials, and our goals for a more sustainable future.',&#10;    sortOrder: 13&#10;  }&#10;]&#10;&#10;async function seedAdditionalFooterPages() {&#10;  console.log('Seeding additional footer pages...')&#10;&#10;  try {&#10;    for (const pageData of additionalFooterPages) {&#10;      const existingPage = await prisma.footerPage.findUnique({&#10;        where: { slug: pageData.slug }&#10;      })&#10;&#10;      if (existingPage) {&#10;        await prisma.footerPage.update({&#10;          where: { slug: pageData.slug },&#10;          data: pageData&#10;        })&#10;        console.log(`Updated page: ${pageData.title}`)&#10;      } else {&#10;        await prisma.footerPage.create({&#10;          data: pageData&#10;        })&#10;        console.log(`Created page: ${pageData.title}`)&#10;      }&#10;    }&#10;&#10;    console.log('Additional footer pages seeding completed!')&#10;  } catch (error) {&#10;    console.error('Error seeding additional pages:', error)&#10;  } finally {&#10;    await prisma.$disconnect()&#10;  }&#10;}&#10;&#10;seedAdditionalFooterPages()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/seed-footer.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/seed-footer.ts" />
              <option name="originalContent" value="import { PrismaClient } from '@prisma/client'&#10;&#10;const prisma = new PrismaClient()&#10;&#10;async function seedFooterContent() {&#10;  console.log('Seeding footer content...')&#10;&#10;  // Seed Footer Content Pages&#10;  const footerPages = [&#10;    {&#10;      slug: 'contact',&#10;      title: 'Contact Us',&#10;      section: 'help',&#10;      content: `&#10;        &lt;h2&gt;Get in Touch&lt;/h2&gt;&#10;        &lt;p&gt;We'd love to hear from you. Contact us for any questions about our products or services.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Contact Information&lt;/h3&gt;&#10;        &lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; info@sfdbd.com&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Phone:&lt;/strong&gt; +880 1234 567890&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Address:&lt;/strong&gt; 123 Fashion Street, Dhaka, Bangladesh&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Business Hours&lt;/h3&gt;&#10;        &lt;p&gt;Monday - Friday: 9:00 AM - 6:00 PM&lt;/p&gt;&#10;        &lt;p&gt;Saturday: 10:00 AM - 4:00 PM&lt;/p&gt;&#10;        &lt;p&gt;Sunday: Closed&lt;/p&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'delivery',&#10;      title: 'Delivery Information',&#10;      section: 'help',&#10;      content: `&#10;        &lt;h2&gt;Delivery &amp; Shipping&lt;/h2&gt;&#10;        &lt;p&gt;We offer reliable delivery services across Bangladesh to get your products to you safely and on time.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Delivery Areas&lt;/h3&gt;&#10;        &lt;ul&gt;&#10;          &lt;li&gt;Dhaka City: 1-2 business days&lt;/li&gt;&#10;          &lt;li&gt;Major Cities: 2-3 business days&lt;/li&gt;&#10;          &lt;li&gt;Other Areas: 3-5 business days&lt;/li&gt;&#10;        &lt;/ul&gt;&#10;        &#10;        &lt;h3&gt;Delivery Charges&lt;/h3&gt;&#10;        &lt;ul&gt;&#10;          &lt;li&gt;Inside Dhaka: 80 BDT&lt;/li&gt;&#10;          &lt;li&gt;Outside Dhaka: 120 BDT&lt;/li&gt;&#10;          &lt;li&gt;Free delivery on orders above 2000 BDT&lt;/li&gt;&#10;        &lt;/ul&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'terms',&#10;      title: 'Terms &amp; Conditions',&#10;      section: 'help',&#10;      content: `&#10;        &lt;h2&gt;Terms and Conditions&lt;/h2&gt;&#10;        &lt;p&gt;Welcome to Southern Fashion &amp; Décor. These terms and conditions outline the rules and regulations for the use of our website and services.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;1. Acceptance of Terms&lt;/h3&gt;&#10;        &lt;p&gt;By accessing and using this website, you accept and agree to be bound by the terms and provision of this agreement.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;2. Product Information&lt;/h3&gt;&#10;        &lt;p&gt;We strive to provide accurate product descriptions and images. However, slight variations in color and design may occur due to photographic lighting and monitor settings.&lt;/p&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'privacy',&#10;      title: 'Privacy Policy',&#10;      section: 'help',&#10;      content: `&#10;        &lt;h2&gt;Privacy Policy&lt;/h2&gt;&#10;        &lt;p&gt;At Southern Fashion &amp; Décor, we are committed to protecting your privacy and ensuring the security of your personal information.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Information We Collect&lt;/h3&gt;&#10;        &lt;ul&gt;&#10;          &lt;li&gt;Personal identification information (Name, email address, phone number)&lt;/li&gt;&#10;          &lt;li&gt;Billing and shipping addresses&lt;/li&gt;&#10;          &lt;li&gt;Payment information (processed securely through our payment partners)&lt;/li&gt;&#10;        &lt;/ul&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'faq',&#10;      title: 'Frequently Asked Questions',&#10;      section: 'help',&#10;      content: `&#10;        &lt;h2&gt;Frequently Asked Questions&lt;/h2&gt;&#10;        &lt;h3&gt;How do I place an order?&lt;/h3&gt;&#10;        &lt;p&gt;You can place an order by browsing our products, adding items to your cart, and proceeding to checkout.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;What payment methods do you accept?&lt;/h3&gt;&#10;        &lt;p&gt;We accept Visa, Mastercard, and cash on delivery for orders within Bangladesh.&lt;/p&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'shipping',&#10;      title: 'BD Shipping',&#10;      section: 'help',&#10;      content: `&#10;        &lt;h2&gt;Bangladesh Shipping Information&lt;/h2&gt;&#10;        &lt;p&gt;We provide reliable shipping services across Bangladesh through our trusted courier partners.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Shipping Areas&lt;/h3&gt;&#10;        &lt;ul&gt;&#10;          &lt;li&gt;&lt;strong&gt;Dhaka Metro:&lt;/strong&gt; Same day or next day delivery&lt;/li&gt;&#10;          &lt;li&gt;&lt;strong&gt;Major Cities:&lt;/strong&gt; Chittagong, Sylhet, Rajshahi, Khulna, Barisal, Rangpur&lt;/li&gt;&#10;        &lt;/ul&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'about',&#10;      title: 'Our Story',&#10;      section: 'about',&#10;      content: `&#10;        &lt;h2&gt;About Southern Fashion &amp; Décor&lt;/h2&gt;&#10;        &lt;p&gt;Welcome to Southern Fashion &amp; Décor, your premier destination for exquisite fashion and home décor items in Bangladesh.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Our Journey&lt;/h3&gt;&#10;        &lt;p&gt;Founded with a passion for bringing beautiful, high-quality products to Bangladesh, Southern Fashion &amp; Décor has been serving customers since our inception.&lt;/p&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'showroom',&#10;      title: 'Visit Our Showroom',&#10;      section: 'about',&#10;      content: `&#10;        &lt;h2&gt;Southern Fashion &amp; Décor Showroom&lt;/h2&gt;&#10;        &lt;p&gt;Experience our complete collection in person at our beautiful showroom in Dhaka.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Showroom Location&lt;/h3&gt;&#10;        &lt;p&gt;&lt;strong&gt;Address:&lt;/strong&gt; House #123, Road #15, Block C, Bashundhara R/A, Dhaka-1229&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Phone:&lt;/strong&gt; +880 1711 123456&lt;/p&gt;&#10;      `&#10;    }&#10;  ]&#10;&#10;  // Seed Social Links&#10;  const socialLinks = [&#10;    {&#10;      platform: 'facebook',&#10;      url: 'https://facebook.com/sfdbd',&#10;      icon: 'f'&#10;    },&#10;    {&#10;      platform: 'instagram',&#10;      url: 'https://instagram.com/sfdbd',&#10;      icon: 'i'&#10;    },&#10;    {&#10;      platform: 'twitter',&#10;      url: 'https://twitter.com/sfdbd',&#10;      icon: 't'&#10;    }&#10;  ]&#10;&#10;  // Seed Payment Methods&#10;  const paymentMethods = [&#10;    {&#10;      name: 'Visa',&#10;      image: null // Will be uploaded via admin&#10;    },&#10;    {&#10;      name: 'Mastercard',&#10;      image: null&#10;    },&#10;    {&#10;      name: 'bKash',&#10;      image: null&#10;    }&#10;  ]&#10;&#10;  try {&#10;    // Create footer content&#10;    for (const page of footerPages) {&#10;      await prisma.footerContent.upsert({&#10;        where: { slug: page.slug },&#10;        update: page,&#10;        create: page&#10;      })&#10;    }&#10;&#10;    // Create social links&#10;    for (const social of socialLinks) {&#10;      const existing = await prisma.socialLink.findFirst({&#10;        where: { platform: social.platform }&#10;      })&#10;&#10;      if (!existing) {&#10;        await prisma.socialLink.create({&#10;          data: social&#10;        })&#10;      }&#10;    }&#10;&#10;    // Create payment methods&#10;    for (const payment of paymentMethods) {&#10;      const existing = await prisma.paymentMethod.findFirst({&#10;        where: { name: payment.name }&#10;      })&#10;&#10;      if (!existing) {&#10;        await prisma.paymentMethod.create({&#10;          data: payment&#10;        })&#10;      }&#10;    }&#10;&#10;    console.log('Footer content seeded successfully!')&#10;  } catch (error) {&#10;    console.error('Error seeding footer content:', error)&#10;  }&#10;}&#10;&#10;seedFooterContent()&#10;  .catch((e) =&gt; {&#10;    console.error(e)&#10;    process.exit(1)&#10;  })&#10;  .finally(async () =&gt; {&#10;    await prisma.$disconnect()&#10;  })&#10;" />
              <option name="updatedContent" value="import { PrismaClient } from '@prisma/client'&#10;&#10;const prisma = new PrismaClient()&#10;&#10;async function seedFooterContent() {&#10;  console.log('Seeding footer content...')&#10;&#10;  // Seed Footer Content Pages&#10;  const footerPages = [&#10;    {&#10;      slug: 'contact',&#10;      title: 'Contact Us',&#10;      section: 'help',&#10;      content: `&#10;        &lt;h2&gt;Get in Touch&lt;/h2&gt;&#10;        &lt;p&gt;We'd love to hear from you. Contact us for any questions about our products or services.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Contact Information&lt;/h3&gt;&#10;        &lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; info@sfdbd.com&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Phone:&lt;/strong&gt; +880 1234 567890&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Address:&lt;/strong&gt; 123 Fashion Street, Dhaka, Bangladesh&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Business Hours&lt;/h3&gt;&#10;        &lt;p&gt;Monday - Friday: 9:00 AM - 6:00 PM&lt;/p&gt;&#10;        &lt;p&gt;Saturday: 10:00 AM - 4:00 PM&lt;/p&gt;&#10;        &lt;p&gt;Sunday: Closed&lt;/p&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'delivery',&#10;      title: 'Delivery Information',&#10;      section: 'help',&#10;      content: `&#10;        &lt;h2&gt;Delivery &amp; Shipping&lt;/h2&gt;&#10;        &lt;p&gt;We offer reliable delivery services across Bangladesh to get your products to you safely and on time.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Delivery Areas&lt;/h3&gt;&#10;        &lt;ul&gt;&#10;          &lt;li&gt;Dhaka City: 1-2 business days&lt;/li&gt;&#10;          &lt;li&gt;Major Cities: 2-3 business days&lt;/li&gt;&#10;          &lt;li&gt;Other Areas: 3-5 business days&lt;/li&gt;&#10;        &lt;/ul&gt;&#10;        &#10;        &lt;h3&gt;Delivery Charges&lt;/h3&gt;&#10;        &lt;ul&gt;&#10;          &lt;li&gt;Inside Dhaka: 80 BDT&lt;/li&gt;&#10;          &lt;li&gt;Outside Dhaka: 120 BDT&lt;/li&gt;&#10;          &lt;li&gt;Free delivery on orders above 2000 BDT&lt;/li&gt;&#10;        &lt;/ul&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'terms',&#10;      title: 'Terms &amp; Conditions',&#10;      section: 'help',&#10;      content: `&#10;        &lt;h2&gt;Terms and Conditions&lt;/h2&gt;&#10;        &lt;p&gt;Welcome to Southern Fashion &amp; Décor. These terms and conditions outline the rules and regulations for the use of our website and services.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;1. Acceptance of Terms&lt;/h3&gt;&#10;        &lt;p&gt;By accessing and using this website, you accept and agree to be bound by the terms and provision of this agreement.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;2. Product Information&lt;/h3&gt;&#10;        &lt;p&gt;We strive to provide accurate product descriptions and images. However, slight variations in color and design may occur due to photographic lighting and monitor settings.&lt;/p&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'privacy',&#10;      title: 'Privacy Policy',&#10;      section: 'help',&#10;      content: `&#10;        &lt;h2&gt;Privacy Policy&lt;/h2&gt;&#10;        &lt;p&gt;At Southern Fashion &amp; Décor, we are committed to protecting your privacy and ensuring the security of your personal information.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Information We Collect&lt;/h3&gt;&#10;        &lt;ul&gt;&#10;          &lt;li&gt;Personal identification information (Name, email address, phone number)&lt;/li&gt;&#10;          &lt;li&gt;Billing and shipping addresses&lt;/li&gt;&#10;          &lt;li&gt;Payment information (processed securely through our payment partners)&lt;/li&gt;&#10;        &lt;/ul&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'faq',&#10;      title: 'Frequently Asked Questions',&#10;      section: 'help',&#10;      content: `&#10;        &lt;h2&gt;Frequently Asked Questions&lt;/h2&gt;&#10;        &lt;h3&gt;How do I place an order?&lt;/h3&gt;&#10;        &lt;p&gt;You can place an order by browsing our products, adding items to your cart, and proceeding to checkout.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;What payment methods do you accept?&lt;/h3&gt;&#10;        &lt;p&gt;We accept Visa, Mastercard, and cash on delivery for orders within Bangladesh.&lt;/p&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'shipping',&#10;      title: 'BD Shipping',&#10;      section: 'help',&#10;      content: `&#10;        &lt;h2&gt;Bangladesh Shipping Information&lt;/h2&gt;&#10;        &lt;p&gt;We provide reliable shipping services across Bangladesh through our trusted courier partners.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Shipping Areas&lt;/h3&gt;&#10;        &lt;ul&gt;&#10;          &lt;li&gt;&lt;strong&gt;Dhaka Metro:&lt;/strong&gt; Same day or next day delivery&lt;/li&gt;&#10;          &lt;li&gt;&lt;strong&gt;Major Cities:&lt;/strong&gt; Chittagong, Sylhet, Rajshahi, Khulna, Barisal, Rangpur&lt;/li&gt;&#10;        &lt;/ul&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'about',&#10;      title: 'Our Story',&#10;      section: 'about',&#10;      content: `&#10;        &lt;h2&gt;About Southern Fashion &amp; Décor&lt;/h2&gt;&#10;        &lt;p&gt;Welcome to Southern Fashion &amp; Décor, your premier destination for exquisite fashion and home décor items in Bangladesh.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Our Journey&lt;/h3&gt;&#10;        &lt;p&gt;Founded with a passion for bringing beautiful, high-quality products to Bangladesh, Southern Fashion &amp; Décor has been serving customers since our inception.&lt;/p&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'showroom',&#10;      title: 'Visit Our Showroom',&#10;      section: 'about',&#10;      content: `&#10;        &lt;h2&gt;Southern Fashion &amp; Décor Showroom&lt;/h2&gt;&#10;        &lt;p&gt;Experience our complete collection in person at our beautiful showroom in Dhaka.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Showroom Location&lt;/h3&gt;&#10;        &lt;p&gt;&lt;strong&gt;Address:&lt;/strong&gt; House #123, Road #15, Block C, Bashundhara R/A, Dhaka-1229&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Phone:&lt;/strong&gt; +880 1711 123456&lt;/p&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'lookbook',&#10;      title: 'Lookbook',&#10;      section: 'about',&#10;      content: `&#10;        &lt;h2&gt;Southern Fashion &amp; Décor Lookbook&lt;/h2&gt;&#10;        &lt;p&gt;Discover the latest trends and styling inspiration from our curated collections.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Fashion Lookbook&lt;/h3&gt;&#10;        &lt;p&gt;Explore our seasonal fashion collections featuring the latest trends in clothing, accessories, and footwear.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Home Décor Inspiration&lt;/h3&gt;&#10;        &lt;p&gt;Get inspired with our home décor lookbook featuring beautifully styled spaces using our furniture and decorative items.&lt;/p&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'trade-shows',&#10;      title: 'Trade Shows',&#10;      section: 'about',&#10;      content: `&#10;        &lt;h2&gt;Trade Shows &amp; Exhibitions&lt;/h2&gt;&#10;        &lt;p&gt;Southern Fashion &amp; Décor actively participates in major trade shows and exhibitions across Bangladesh and internationally.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Upcoming Events&lt;/h3&gt;&#10;        &lt;ul&gt;&#10;          &lt;li&gt;&lt;strong&gt;Dhaka International Trade Fair 2024:&lt;/strong&gt; January 1-31, 2024&lt;/li&gt;&#10;          &lt;li&gt;&lt;strong&gt;Bangladesh Home &amp; Lifestyle Expo:&lt;/strong&gt; March 15-18, 2024&lt;/li&gt;&#10;        &lt;/ul&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'ethics',&#10;      title: 'Ethical Policy',&#10;      section: 'about',&#10;      content: `&#10;        &lt;h2&gt;Our Ethical Commitments&lt;/h2&gt;&#10;        &lt;p&gt;Southern Fashion &amp; Décor is committed to conducting business ethically and responsibly across all aspects of our operations.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Fair Labor Practices&lt;/h3&gt;&#10;        &lt;ul&gt;&#10;          &lt;li&gt;Ensuring fair wages and safe working conditions for all workers&lt;/li&gt;&#10;          &lt;li&gt;Zero tolerance for child labor or forced labor&lt;/li&gt;&#10;        &lt;/ul&gt;&#10;      `&#10;    },&#10;    {&#10;      slug: 'sustainability',&#10;      title: 'Sustainability Mission',&#10;      section: 'about',&#10;      content: `&#10;        &lt;h2&gt;Our Sustainability Mission&lt;/h2&gt;&#10;        &lt;p&gt;At Southern Fashion &amp; Décor, we are committed to building a sustainable future through responsible business practices and environmental stewardship.&lt;/p&gt;&#10;        &#10;        &lt;h3&gt;Sustainable Materials&lt;/h3&gt;&#10;        &lt;ul&gt;&#10;          &lt;li&gt;Prioritizing eco-friendly and renewable materials&lt;/li&gt;&#10;          &lt;li&gt;Using organic cotton and sustainable fabrics&lt;/li&gt;&#10;        &lt;/ul&gt;&#10;      `&#10;    }&#10;  ]&#10;&#10;  // Seed Social Links&#10;  const socialLinks = [&#10;    {&#10;      platform: 'facebook',&#10;      url: 'https://facebook.com/sfdbd',&#10;      icon: 'f'&#10;    },&#10;    {&#10;      platform: 'instagram',&#10;      url: 'https://instagram.com/sfdbd',&#10;      icon: 'i'&#10;    },&#10;    {&#10;      platform: 'twitter',&#10;      url: 'https://twitter.com/sfdbd',&#10;      icon: 't'&#10;    }&#10;  ]&#10;&#10;  // Seed Payment Methods&#10;  const paymentMethods = [&#10;    {&#10;      name: 'Visa',&#10;      image: null // Will be uploaded via admin&#10;    },&#10;    {&#10;      name: 'Mastercard',&#10;      image: null&#10;    },&#10;    {&#10;      name: 'bKash',&#10;      image: null&#10;    }&#10;  ]&#10;&#10;  try {&#10;    // Create footer content&#10;    for (const page of footerPages) {&#10;      await prisma.footerContent.upsert({&#10;        where: { slug: page.slug },&#10;        update: page,&#10;        create: page&#10;      })&#10;    }&#10;&#10;    // Create social links&#10;    for (const social of socialLinks) {&#10;      const existing = await prisma.socialLink.findFirst({&#10;        where: { platform: social.platform }&#10;      })&#10;&#10;      if (!existing) {&#10;        await prisma.socialLink.create({&#10;          data: social&#10;        })&#10;      }&#10;    }&#10;&#10;    // Create payment methods&#10;    for (const payment of paymentMethods) {&#10;      const existing = await prisma.paymentMethod.findFirst({&#10;        where: { name: payment.name }&#10;      })&#10;&#10;      if (!existing) {&#10;        await prisma.paymentMethod.create({&#10;          data: payment&#10;        })&#10;      }&#10;    }&#10;&#10;    console.log('Footer content seeded successfully!')&#10;  } catch (error) {&#10;    console.error('Error seeding footer content:', error)&#10;  }&#10;}&#10;&#10;seedFooterContent()&#10;  .catch((e) =&gt; {&#10;    console.error(e)&#10;    process.exit(1)&#10;  })&#10;  .finally(async () =&gt; {&#10;    await prisma.$disconnect()&#10;  })" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tailwind.config.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tailwind.config.ts" />
              <option name="originalContent" value="import type { Config } from &quot;tailwindcss&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;import { createDynamicTheme } from &quot;./lib/theme-system&quot;&#10;      ...createDynamicTheme().extend,&#10;&#10;" />
              <option name="updatedContent" value="import type { Config } from &quot;tailwindcss&quot;&#10;&#10;const config: Config = {&#10;  darkMode: [&quot;class&quot;],&#10;  content: [&#10;    './pages/**/*.{ts,tsx}',&#10;    './components/**/*.{ts,tsx}',&#10;    './app/**/*.{ts,tsx}',&#10;    './src/**/*.{ts,tsx}',&#10;  ],&#10;  prefix: &quot;&quot;,&#10;  theme: {&#10;    container: {&#10;      center: true,&#10;      padding: &quot;2rem&quot;,&#10;      screens: {&#10;        &quot;2xl&quot;: &quot;1400px&quot;,&#10;      },&#10;    },&#10;    extend: {&#10;      colors: {&#10;        border: &quot;hsl(var(--border))&quot;,&#10;        input: &quot;hsl(var(--input))&quot;,&#10;        ring: &quot;hsl(var(--ring))&quot;,&#10;        background: &quot;hsl(var(--background))&quot;,&#10;        foreground: &quot;hsl(var(--foreground))&quot;,&#10;        primary: {&#10;          DEFAULT: &quot;hsl(var(--primary))&quot;,&#10;          foreground: &quot;hsl(var(--primary-foreground))&quot;,&#10;        },&#10;        secondary: {&#10;          DEFAULT: &quot;hsl(var(--secondary))&quot;,&#10;          foreground: &quot;hsl(var(--secondary-foreground))&quot;,&#10;        },&#10;        destructive: {&#10;          DEFAULT: &quot;hsl(var(--destructive))&quot;,&#10;          foreground: &quot;hsl(var(--destructive-foreground))&quot;,&#10;        },&#10;        muted: {&#10;          DEFAULT: &quot;hsl(var(--muted))&quot;,&#10;          foreground: &quot;hsl(var(--muted-foreground))&quot;,&#10;        },&#10;        accent: {&#10;          DEFAULT: &quot;hsl(var(--accent))&quot;,&#10;          foreground: &quot;hsl(var(--accent-foreground))&quot;,&#10;        },&#10;        popover: {&#10;          DEFAULT: &quot;hsl(var(--popover))&quot;,&#10;          foreground: &quot;hsl(var(--popover-foreground))&quot;,&#10;        },&#10;        card: {&#10;          DEFAULT: &quot;hsl(var(--card))&quot;,&#10;          foreground: &quot;hsl(var(--card-foreground))&quot;,&#10;        },&#10;      },&#10;      borderRadius: {&#10;        lg: &quot;var(--radius)&quot;,&#10;        md: &quot;calc(var(--radius) - 2px)&quot;,&#10;        sm: &quot;calc(var(--radius) - 4px)&quot;,&#10;      },&#10;      fontFamily: {&#10;        heading: ['Inter', 'sans-serif'],&#10;        body: ['Inter', 'sans-serif'],&#10;        mono: ['JetBrains Mono', 'monospace'],&#10;        brandon: ['Brandon', 'sans-serif'],&#10;      },&#10;      // Enhanced animations for smooth UX&#10;      animation: {&#10;        &quot;accordion-down&quot;: &quot;accordion-down 0.2s ease-out&quot;,&#10;        &quot;accordion-up&quot;: &quot;accordion-up 0.2s ease-out&quot;,&#10;        &quot;fade-in&quot;: &quot;fadeIn 0.5s ease-in-out&quot;,&#10;        &quot;slide-up&quot;: &quot;slideUp 0.3s ease-out&quot;,&#10;        &quot;slide-down&quot;: &quot;slideDown 0.3s ease-out&quot;,&#10;        &quot;scale-in&quot;: &quot;scaleIn 0.2s ease-out&quot;,&#10;        &quot;pulse-soft&quot;: &quot;pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite&quot;,&#10;        &quot;bounce-gentle&quot;: &quot;bounceGentle 1s ease-in-out&quot;,&#10;        &quot;shimmer&quot;: &quot;shimmer 2s linear infinite&quot;,&#10;      },&#10;      keyframes: {&#10;        &quot;accordion-down&quot;: {&#10;          from: { height: &quot;0&quot; },&#10;          to: { height: &quot;var(--radix-accordion-content-height)&quot; },&#10;        },&#10;        &quot;accordion-up&quot;: {&#10;          from: { height: &quot;var(--radix-accordion-content-height)&quot; },&#10;          to: { height: &quot;0&quot; },&#10;        },&#10;        fadeIn: {&#10;          &quot;0%&quot;: { opacity: &quot;0&quot; },&#10;          &quot;100%&quot;: { opacity: &quot;1&quot; },&#10;        },&#10;        slideUp: {&#10;          &quot;0%&quot;: { transform: &quot;translateY(10px)&quot;, opacity: &quot;0&quot; },&#10;          &quot;100%&quot;: { transform: &quot;translateY(0)&quot;, opacity: &quot;1&quot; },&#10;        },&#10;        slideDown: {&#10;          &quot;0%&quot;: { transform: &quot;translateY(-10px)&quot;, opacity: &quot;0&quot; },&#10;          &quot;100%&quot;: { transform: &quot;translateY(0)&quot;, opacity: &quot;1&quot; },&#10;        },&#10;        scaleIn: {&#10;          &quot;0%&quot;: { transform: &quot;scale(0.95)&quot;, opacity: &quot;0&quot; },&#10;          &quot;100%&quot;: { transform: &quot;scale(1)&quot;, opacity: &quot;1&quot; },&#10;        },&#10;        bounceGentle: {&#10;          &quot;0%, 100%&quot;: { transform: &quot;translateY(0)&quot; },&#10;          &quot;50%&quot;: { transform: &quot;translateY(-5px)&quot; },&#10;        },&#10;        shimmer: {&#10;          &quot;0%&quot;: { transform: &quot;translateX(-100%)&quot; },&#10;          &quot;100%&quot;: { transform: &quot;translateX(100%)&quot; },&#10;        },&#10;      },&#10;      &#10;      // Enhanced spacing for better layouts&#10;      spacing: {&#10;        '18': '4.5rem',&#10;        '88': '22rem',&#10;        '128': '32rem',&#10;      },&#10;      &#10;      // Enhanced shadows for depth&#10;      boxShadow: {&#10;        'soft': '0 2px 15px -3px rgba(0, 0, 0, 0.07), 0 10px 20px -2px rgba(0, 0, 0, 0.04)',&#10;        'medium': '0 4px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',&#10;        'large': '0 10px 50px -12px rgba(0, 0, 0, 0.25)',&#10;      },&#10;      &#10;      // Typography scale&#10;      fontSize: {&#10;        'xs': ['0.75rem', { lineHeight: '1rem' }],&#10;        'sm': ['0.875rem', { lineHeight: '1.25rem' }],&#10;        'base': ['1rem', { lineHeight: '1.5rem' }],&#10;        'lg': ['1.125rem', { lineHeight: '1.75rem' }],&#10;        'xl': ['1.25rem', { lineHeight: '1.75rem' }],&#10;        '2xl': ['1.5rem', { lineHeight: '2rem' }],&#10;        '3xl': ['1.875rem', { lineHeight: '2.25rem' }],&#10;        '4xl': ['2.25rem', { lineHeight: '2.5rem' }],&#10;        '5xl': ['3rem', { lineHeight: '1' }],&#10;        '6xl': ['3.75rem', { lineHeight: '1' }],&#10;      },&#10;    },&#10;  },&#10;  plugins: [require(&quot;tailwindcss-animate&quot;)],&#10;} satisfies Config&#10;&#10;export default config" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test-admin-reviews.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test-admin-reviews.js" />
              <option name="updatedContent" value="const { PrismaClient } = require('@prisma/client');&#10;&#10;const prisma = new PrismaClient();&#10;&#10;async function testAdminReviewsAPI() {&#10;  try {&#10;    console.log('=== Testing Admin Reviews API Logic ===\n');&#10;    &#10;    // Test the same query that the admin API uses&#10;    console.log('Testing PENDING reviews query:');&#10;    const pendingReviews = await prisma.review.findMany({&#10;      where: { isApproved: false },&#10;      include: {&#10;        product: {&#10;          select: { name: true, id: true }&#10;        },&#10;        user: {&#10;          select: { name: true, email: true }&#10;        }&#10;      },&#10;      orderBy: { createdAt: 'desc' }&#10;    });&#10;    &#10;    console.log(`Found ${pendingReviews.length} pending reviews`);&#10;    pendingReviews.forEach(review =&gt; {&#10;      console.log(`- ${review.customerName}: ${review.rating}★ for ${review.product?.name}`);&#10;    });&#10;    &#10;    console.log('\nTesting APPROVED reviews query:');&#10;    const approvedReviews = await prisma.review.findMany({&#10;      where: { isApproved: true },&#10;      include: {&#10;        product: {&#10;          select: { name: true, id: true }&#10;        },&#10;        user: {&#10;          select: { name: true, email: true }&#10;        }&#10;      },&#10;      orderBy: { createdAt: 'desc' }&#10;    });&#10;    &#10;    console.log(`Found ${approvedReviews.length} approved reviews`);&#10;    approvedReviews.forEach(review =&gt; {&#10;      console.log(`- ${review.customerName}: ${review.rating}★ for ${review.product?.name}`);&#10;    });&#10;    &#10;    console.log('\nTesting ALL reviews query:');&#10;    const allReviews = await prisma.review.findMany({&#10;      include: {&#10;        product: {&#10;          select: { name: true, id: true }&#10;        },&#10;        user: {&#10;          select: { name: true, email: true }&#10;        }&#10;      },&#10;      orderBy: { createdAt: 'desc' }&#10;    });&#10;    &#10;    console.log(`Found ${allReviews.length} total reviews`);&#10;    allReviews.forEach(review =&gt; {&#10;      console.log(`- ${review.customerName}: ${review.rating}★ for ${review.product?.name} (${review.isApproved ? 'APPROVED' : 'PENDING'})`);&#10;    });&#10;    &#10;  } catch (error) {&#10;    console.error('Error testing admin API queries:', error);&#10;  } finally {&#10;    await prisma.$disconnect();&#10;  }&#10;}&#10;&#10;testAdminReviewsAPI();" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>