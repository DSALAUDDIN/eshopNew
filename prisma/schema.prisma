// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nativeTypes"]
  engineType      = "binary"
}


datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("USER")
  isTradeCustomer Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
  reviews   Review[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subcategories Subcategory[]
  products      Product[]

  @@map("categories")
}

model Subcategory {
  id          String   @id @default(cuid())
  name        String
  slug        String
  description String?
  image       String?
  isActive    Boolean  @default(true)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products Product[]

  @@unique([categoryId, slug])
  @@map("subcategories")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  description   String
  price         Float
  originalPrice Float?
  sku           String   @unique
  images        String   // JSON-stringified array of image URLs
  inStock       Boolean  @default(true)
  stockQuantity Int      @default(0)
  isNew         Boolean  @default(false)
  isSale        Boolean  @default(false)
  isFeatured    Boolean  @default(false)
  isActive      Boolean  @default(true)
  categoryId    String
  subcategoryId String?
  weight        Float?
  dimensions    String?
  materials     String?
  careInstructions String?
  seoTitle      String?
  seoDescription String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category    Category     @relation(fields: [categoryId], references: [id])
  subcategory Subcategory? @relation(fields: [subcategoryId], references: [id])
  orderItems  OrderItem[]
  reviews     Review[]

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([isFeatured])
  @@index([isNew])
  @@index([isSale])
  @@index([price])
  @@index([createdAt])
  @@map("products")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String?
  customerEmail   String
  customerName    String
  customerPhone   String?
  status          String      @default("PENDING")
  totalAmount     Float
  shippingAmount  Float       @default(0)
  taxAmount       Float       @default(0)
  discountAmount  Float       @default(0)
  paymentStatus   String      @default("PENDING")
  paymentMethod   String?
  shippingAddress String
  billingAddress  String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user       User?       @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([customerEmail])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String?
  rating    Int      // 1-5
  title     String?
  comment   String
  isApproved Boolean @default(false)
  customerName String
  customerEmail String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // string, number, boolean, json

  @@map("settings")
}

model SocialMediaSetting {
  id       String @id @default(cuid())
  platform String @unique // facebook, instagram, twitter, email
  url      String
  isActive Boolean @default(true)
  sortOrder Int   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([platform])
  @@index([isActive])
  @@index([sortOrder])
  @@map("social_media_settings")
}

model FooterPage {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  content         String
  metaTitle       String?
  metaDescription String?
  isActive        Boolean  @default(true)
  sortOrder       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([slug])
  @@index([isActive])
  @@index([sortOrder])
  @@map("footer_pages")
}
